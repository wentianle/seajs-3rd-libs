define("ucloud/plugins/1.3.3/plugins-debug", [ "./bootstrap-debug", "./jquery-metadata-debug", "./jquery-validate-debug", "./jquery-validate-password-debug", "./zxcvbn-validate-password-debug", "ucloud/zxcvbn/1.0.1/zxcvbn-debug", "./additional-methods-debug", "./iso8601-debug", "./jquery-autocomplete-debug", "./jquery-dateformat-debug", "./jquery-layout-debug", "./jquery-pager-debug", "./jquery-ui-debug", "./jquery-cookie-debug", "./jquery-ui-slideraccess-debug", "./select2-debug" ], function(require, exports, module) {
    return function($) {
        require("./bootstrap-debug")($);
        require("./jquery-metadata-debug")($);
        require("./jquery-validate-debug")($);
        require("./jquery-validate-password-debug")($);
        require("./zxcvbn-validate-password-debug")($);
        require("./additional-methods-debug")($);
        require("./iso8601-debug");
        require("./jquery-autocomplete-debug")($);
        require("./jquery-dateformat-debug")($);
        require("./jquery-layout-debug")($);
        require("./jquery-pager-debug")($);
        require("./jquery-ui-debug")($);
        require("./jquery-cookie-debug")($);
        /**
         *  datetimepicker 插件加载 
         */
        require("./jquery-ui-slideraccess-debug")($);
        require("./select2-debug")($);
    };
});

define("ucloud/plugins/1.3.3/bootstrap-debug", [], function() {
    return function($) {
        var jQuery = $;
        /* ===================================================
         * bootstrap-transition.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#transitions
         * ===================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ========================================================== */
        !function($) {
            $(function() {
                "use strict";
                /* CSS TRANSITION SUPPORT (https://gist.github.com/373874)
                 * ======================================================= */
                $.support.transition = function() {
                    var thisBody = document.body || document.documentElement, thisStyle = thisBody.style, support = thisStyle.transition !== undefined || thisStyle.WebkitTransition !== undefined || thisStyle.MozTransition !== undefined || thisStyle.MsTransition !== undefined || thisStyle.OTransition !== undefined;
                    return support && {
                        end: function() {
                            var transitionEnd = "TransitionEnd";
                            if ($.browser.webkit) {
                                transitionEnd = "webkitTransitionEnd";
                            } else if ($.browser.mozilla) {
                                transitionEnd = "transitionend";
                            } else if ($.browser.opera) {
                                transitionEnd = "oTransitionEnd";
                            }
                            return transitionEnd;
                        }()
                    };
                }();
            });
        }(jQuery);
        /* ==========================================================
         * bootstrap-alert.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#alerts
         * ==========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ========================================================== */
        !function($) {
            "use strict";
            /* ALERT CLASS DEFINITION
             * ====================== */
            var dismiss = '[data-dismiss="alert"]', Alert = function(el) {
                $(el).on("click", dismiss, this.close);
            };
            Alert.prototype = {
                constructor: Alert,
                close: function(e) {
                    var $this = $(this), selector = $this.attr("data-target"), $parent;
                    if (!selector) {
                        selector = $this.attr("href");
                        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
                    }
                    $parent = $(selector);
                    $parent.trigger("close");
                    e && e.preventDefault();
                    $parent.length || ($parent = $this.hasClass("alert") ? $this : $this.parent());
                    $parent.removeClass("in");
                    function removeElement() {
                        $parent.remove();
                        $parent.trigger("closed");
                    }
                    $.support.transition && $parent.hasClass("fade") ? $parent.on($.support.transition.end, removeElement) : removeElement();
                }
            };
            /* ALERT PLUGIN DEFINITION
             * ======================= */
            $.fn.alert = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("alert");
                    if (!data) $this.data("alert", data = new Alert(this));
                    if (typeof option == "string") data[option].call($this);
                });
            };
            $.fn.alert.Constructor = Alert;
            /* ALERT DATA-API
             * ============== */
            $(function() {
                $("body").on("click.alert.data-api", dismiss, Alert.prototype.close);
            });
        }(jQuery);
        /* ============================================================
         * bootstrap-button.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#buttons
         * ============================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ============================================================ */
        !function($) {
            "use strict";
            /* BUTTON PUBLIC CLASS DEFINITION
             * ============================== */
            var Button = function(element, options) {
                this.$element = $(element);
                this.options = $.extend({}, $.fn.tbutton.defaults, options);
            };
            Button.prototype = {
                constructor: Button,
                setState: function(state) {
                    var d = "disabled", $el = this.$element, data = $el.data(), val = $el.is("input") ? "val" : "html";
                    state = state + "Text";
                    data.resetText || $el.data("resetText", $el[val]());
                    $el[val](data[state] || this.options[state]);
                    // push to event loop to allow forms to submit
                    setTimeout(function() {
                        state == "loadingText" ? $el.addClass(d).attr(d, d) : $el.removeClass(d).removeAttr(d);
                    }, 0);
                },
                toggle: function() {
                    var $parent = this.$element.parent('[data-toggle="buttons-radio"]');
                    $parent && $parent.find(".active").removeClass("active");
                    this.$element.toggleClass("active");
                }
            };
            /* BUTTON PLUGIN DEFINITION
             * ======================== */
            $.fn.tbutton = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("button"), options = typeof option == "object" && option;
                    if (!data) $this.data("button", data = new Button(this, options));
                    if (option == "toggle") data.toggle(); else if (option) data.setState(option);
                });
            };
            $.fn.tbutton.defaults = {
                loadingText: "Loading"
            };
            $.fn.tbutton.Constructor = Button;
            /* BUTTON DATA-API
             * =============== */
            $(function() {
                $("body").on("click.button.data-api", "[data-toggle^=button]", function(e) {
                    $(e.target).tbutton("toggle");
                });
            });
        }(jQuery);
        /* ==========================================================
         * bootstrap-carousel.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#carousel
         * ==========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ========================================================== */
        !function($) {
            "use strict";
            /* CAROUSEL CLASS DEFINITION
             * ========================= */
            var Carousel = function(element, options) {
                this.$element = $(element);
                this.options = $.extend({}, $.fn.carousel.defaults, options);
                this.options.slide && this.slide(this.options.slide);
            };
            Carousel.prototype = {
                cycle: function() {
                    this.interval = setInterval($.proxy(this.next, this), this.options.interval);
                    return this;
                },
                to: function(pos) {
                    var $active = this.$element.find(".active"), children = $active.parent().children(), activePos = children.index($active), that = this;
                    if (pos > children.length - 1 || pos < 0) return;
                    if (this.sliding) {
                        return this.$element.one("slid", function() {
                            that.to(pos);
                        });
                    }
                    if (activePos == pos) {
                        return this.pause().cycle();
                    }
                    return this.slide(pos > activePos ? "next" : "prev", $(children[pos]));
                },
                pause: function() {
                    clearInterval(this.interval);
                    return this;
                },
                next: function() {
                    if (this.sliding) return;
                    return this.slide("next");
                },
                prev: function() {
                    if (this.sliding) return;
                    return this.slide("prev");
                },
                slide: function(type, next) {
                    var $active = this.$element.find(".active"), $next = next || $active[type](), isCycling = this.interval, direction = type == "next" ? "left" : "right", fallback = type == "next" ? "first" : "last", that = this;
                    this.sliding = true;
                    isCycling && this.pause();
                    $next = $next.length ? $next : this.$element.find(".item")[fallback]();
                    if (!$.support.transition && this.$element.hasClass("slide")) {
                        this.$element.trigger("slide");
                        $active.removeClass("active");
                        $next.addClass("active");
                        this.sliding = false;
                        this.$element.trigger("slid");
                    } else {
                        $next.addClass(type);
                        $next[0].offsetWidth;
                        // force reflow
                        $active.addClass(direction);
                        $next.addClass(direction);
                        this.$element.trigger("slide");
                        this.$element.one($.support.transition.end, function() {
                            $next.removeClass([ type, direction ].join(" ")).addClass("active");
                            $active.removeClass([ "active", direction ].join(" "));
                            that.sliding = false;
                            setTimeout(function() {
                                that.$element.trigger("slid");
                            }, 0);
                        });
                    }
                    isCycling && this.cycle();
                    return this;
                }
            };
            /* CAROUSEL PLUGIN DEFINITION
             * ========================== */
            $.fn.carousel = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("carousel"), options = typeof option == "object" && option;
                    if (!data) $this.data("carousel", data = new Carousel(this, options));
                    if (typeof option == "number") data.to(option); else if (typeof option == "string" || (option = options.slide)) data[option](); else data.cycle();
                });
            };
            $.fn.carousel.defaults = {
                interval: 5e3
            };
            $.fn.carousel.Constructor = Carousel;
            /* CAROUSEL DATA-API
             * ================= */
            $(function() {
                $("body").on("click.carousel.data-api", "[data-slide]", function(e) {
                    var $this = $(this), href, $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")), options = !$target.data("modal") && $.extend({}, $target.data(), $this.data());
                    $target.carousel(options);
                    e.preventDefault();
                });
            });
        }(jQuery);
        /* =============================================================
         * bootstrap-collapse.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#collapse
         * =============================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ============================================================ */
        !function($) {
            "use strict";
            var Collapse = function(element, options) {
                this.$element = $(element);
                this.options = $.extend({}, $.fn.collapse.defaults, options);
                if (this.options["parent"]) {
                    this.$parent = $(this.options["parent"]);
                }
                this.options.toggle && this.toggle();
            };
            Collapse.prototype = {
                constructor: Collapse,
                dimension: function() {
                    var hasWidth = this.$element.hasClass("width");
                    return hasWidth ? "width" : "height";
                },
                show: function() {
                    var dimension = this.dimension(), scroll = $.camelCase([ "scroll", dimension ].join("-")), actives = this.$parent && this.$parent.find(".in"), hasData;
                    if (actives && actives.length) {
                        hasData = actives.data("collapse");
                        actives.collapse("hide");
                        hasData || actives.data("collapse", null);
                    }
                    this.$element[dimension](0);
                    this.transition("addClass", "show", "shown");
                    this.$element[dimension](this.$element[0][scroll]);
                },
                hide: function() {
                    var dimension = this.dimension();
                    this.reset(this.$element[dimension]());
                    this.transition("removeClass", "hide", "hidden");
                    this.$element[dimension](0);
                },
                reset: function(size) {
                    var dimension = this.dimension();
                    this.$element.removeClass("collapse")[dimension](size || "auto")[0].offsetWidth;
                    this.$element.addClass("collapse");
                },
                transition: function(method, startEvent, completeEvent) {
                    var that = this, complete = function() {
                        if (startEvent == "show") that.reset();
                        that.$element.trigger(completeEvent);
                    };
                    this.$element.trigger(startEvent)[method]("in");
                    $.support.transition && this.$element.hasClass("collapse") ? this.$element.one($.support.transition.end, complete) : complete();
                },
                toggle: function() {
                    this[this.$element.hasClass("in") ? "hide" : "show"]();
                }
            };
            /* COLLAPSIBLE PLUGIN DEFINITION
             * ============================== */
            $.fn.collapse = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("collapse"), options = typeof option == "object" && option;
                    if (!data) $this.data("collapse", data = new Collapse(this, options));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.collapse.defaults = {
                toggle: true
            };
            $.fn.collapse.Constructor = Collapse;
            /* COLLAPSIBLE DATA-API
             * ==================== */
            $(function() {
                $("body").on("click.collapse.data-api", "[data-toggle=collapse]", function(e) {
                    var $this = $(this), href, target = $this.attr("data-target") || e.preventDefault() || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, ""), option = $(target).data("collapse") ? "toggle" : $this.data();
                    $(target).collapse(option);
                });
            });
        }(jQuery);
        /* ============================================================
         * bootstrap-dropdown.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#dropdowns
         * ============================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ============================================================ */
        !function($) {
            "use strict";
            /* DROPDOWN CLASS DEFINITION
             * ========================= */
            var toggle = '[data-toggle="dropdown"]', Dropdown = function(element) {
                var $el = $(element).on("click.dropdown.data-api", this.toggle);
                $("html").on("click.dropdown.data-api", function() {
                    $el.parent().removeClass("open");
                });
            };
            Dropdown.prototype = {
                constructor: Dropdown,
                toggle: function(e) {
                    var $this = $(this), selector = $this.attr("data-target"), $parent, isActive;
                    if (!selector) {
                        selector = $this.attr("href");
                        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
                    }
                    $parent = $(selector);
                    $parent.length || ($parent = $this.parent());
                    isActive = $parent.hasClass("open");
                    clearMenus();
                    !isActive && $parent.toggleClass("open");
                    return false;
                }
            };
            function clearMenus() {
                $(toggle).parent().removeClass("open");
            }
            /* DROPDOWN PLUGIN DEFINITION
             * ========================== */
            $.fn.dropdown = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("dropdown");
                    if (!data) $this.data("dropdown", data = new Dropdown(this));
                    if (typeof option == "string") data[option].call($this);
                });
            };
            $.fn.dropdown.Constructor = Dropdown;
            /* APPLY TO STANDARD DROPDOWN ELEMENTS
             * =================================== */
            $(function() {
                $("html").on("click.dropdown.data-api", clearMenus);
                $("body").on("click.dropdown.data-api", toggle, Dropdown.prototype.toggle);
            });
        }(jQuery);
        /* =========================================================
         * bootstrap-modal.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#modals
         * =========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ========================================================= */
        !function($) {
            "use strict";
            /* MODAL CLASS DEFINITION
             * ====================== */
            var Modal = function(content, options) {
                this.options = $.extend({}, $.fn.modal.defaults, options);
                this.$element = $(content).delegate('[data-dismiss="modal"]', "click.dismiss.modal", $.proxy(this.hide, this));
            };
            Modal.prototype = {
                constructor: Modal,
                toggle: function() {
                    return this[!this.isShown ? "show" : "hide"]();
                },
                show: function() {
                    var that = this;
                    if (this.isShown) return;
                    $("body").addClass("modal-open");
                    this.isShown = true;
                    this.$element.trigger("show");
                    escape.call(this);
                    backdrop.call(this, function() {
                        var transition = $.support.transition && that.$element.hasClass("fade");
                        !that.$element.parent().length && that.$element.appendTo(document.body);
                        //don't move modals dom position
                        that.$element.show();
                        if (transition) {
                            that.$element[0].offsetWidth;
                        }
                        that.$element.addClass("in");
                        transition ? that.$element.one($.support.transition.end, function() {
                            that.$element.trigger("shown");
                        }) : that.$element.trigger("shown");
                    });
                },
                hide: function(e) {
                    e && e.preventDefault();
                    if (!this.isShown) return;
                    var that = this;
                    this.isShown = false;
                    $("body").removeClass("modal-open");
                    escape.call(this);
                    this.$element.trigger("hide").removeClass("in");
                    $.support.transition && this.$element.hasClass("fade") ? hideWithTransition.call(this) : hideModal.call(this);
                }
            };
            /* MODAL PRIVATE METHODS
             * ===================== */
            function hideWithTransition() {
                var that = this, timeout = setTimeout(function() {
                    that.$element.off($.support.transition.end);
                    hideModal.call(that);
                }, 500);
                this.$element.one($.support.transition.end, function() {
                    clearTimeout(timeout);
                    hideModal.call(that);
                });
            }
            function hideModal(that) {
                this.$element.hide().trigger("hidden");
                backdrop.call(this);
            }
            function backdrop(callback) {
                var that = this, animate = this.$element.hasClass("fade") ? "fade" : "";
                if (this.isShown && this.options.backdrop) {
                    var doAnimate = $.support.transition && animate;
                    this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />').appendTo(document.body);
                    if (this.options.backdrop != "static") {
                        this.$backdrop.click($.proxy(this.hide, this));
                    }
                    if (doAnimate) this.$backdrop[0].offsetWidth;
                    // force reflow
                    this.$backdrop.addClass("in");
                    doAnimate ? this.$backdrop.one($.support.transition.end, callback) : callback();
                } else if (!this.isShown && this.$backdrop) {
                    this.$backdrop.removeClass("in");
                    $.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one($.support.transition.end, $.proxy(removeBackdrop, this)) : removeBackdrop.call(this);
                } else if (callback) {
                    callback();
                }
            }
            function removeBackdrop() {
                this.$backdrop.remove();
                this.$backdrop = null;
            }
            function escape() {
                var that = this;
                if (this.isShown && this.options.keyboard) {
                    $(document).on("keyup.dismiss.modal", function(e) {
                        e.which == 27 && that.hide();
                    });
                } else if (!this.isShown) {
                    $(document).off("keyup.dismiss.modal");
                }
            }
            /* MODAL PLUGIN DEFINITION
             * ======================= */
            $.fn.modal = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("modal"), options = typeof option == "object" && option;
                    if (!data) $this.data("modal", data = new Modal(this, options));
                    if (typeof option == "string") data[option](); else data.show();
                });
            };
            $.fn.modal.defaults = {
                backdrop: true,
                keyboard: true
            };
            $.fn.modal.Constructor = Modal;
            /* MODAL DATA-API
             * ============== */
            $(function() {
                $("body").on("click.modal.data-api", '[data-toggle="modal"]', function(e) {
                    var $this = $(this), href, $target = $($this.attr("data-target") || (href = $this.attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "")), option = $target.data("modal") ? "toggle" : $.extend({}, $target.data(), $this.data());
                    e.preventDefault();
                    $target.modal(option);
                });
            });
        }(jQuery);
        /* ===========================================================
         * bootstrap-tooltip.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#tooltips
         * Inspired by the original jQuery.tipsy by Jason Frame
         * ===========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ========================================================== */
        !function($) {
            "use strict";
            /* TOOLTIP PUBLIC CLASS DEFINITION
             * =============================== */
            var Tooltip = function(element, options) {
                this.init("tooltip", element, options);
            };
            Tooltip.prototype = {
                constructor: Tooltip,
                init: function(type, element, options) {
                    var eventIn, eventOut;
                    this.type = type;
                    this.$element = $(element);
                    this.options = this.getOptions(options);
                    this.enabled = true;
                    if (this.options.trigger != "manual") {
                        eventIn = this.options.trigger == "hover" ? "mouseenter" : "focus";
                        eventOut = this.options.trigger == "hover" ? "mouseleave" : "blur";
                        this.$element.on(eventIn, this.options.selector, $.proxy(this.enter, this));
                        this.$element.on(eventOut, this.options.selector, $.proxy(this.leave, this));
                    }
                    this.options.selector ? this._options = $.extend({}, this.options, {
                        trigger: "manual",
                        selector: ""
                    }) : this.fixTitle();
                },
                getOptions: function(options) {
                    options = $.extend({}, $.fn[this.type].defaults, options, this.$element.data());
                    if (options.delay && typeof options.delay == "number") {
                        options.delay = {
                            show: options.delay,
                            hide: options.delay
                        };
                    }
                    return options;
                },
                enter: function(e) {
                    var self = $(e.currentTarget)[this.type](this._options).data(this.type);
                    if (!self.options.delay || !self.options.delay.show) {
                        self.show();
                    } else {
                        self.hoverState = "in";
                        setTimeout(function() {
                            if (self.hoverState == "in") {
                                self.show();
                            }
                        }, self.options.delay.show);
                    }
                },
                leave: function(e) {
                    var self = $(e.currentTarget)[this.type](this._options).data(this.type);
                    if (!self.options.delay || !self.options.delay.hide) {
                        self.hide();
                    } else {
                        self.hoverState = "out";
                        setTimeout(function() {
                            if (self.hoverState == "out") {
                                self.hide();
                            }
                        }, self.options.delay.hide);
                    }
                },
                show: function() {
                    var $tip, inside, pos, actualWidth, actualHeight, placement, tp;
                    if (this.hasContent() && this.enabled) {
                        $tip = this.tip();
                        this.setContent();
                        if (this.options.animation) {
                            $tip.addClass("fade");
                        }
                        placement = typeof this.options.placement == "function" ? this.options.placement.call(this, $tip[0], this.$element[0]) : this.options.placement;
                        if (this.$element.attr("placement")) {
                            placement = this.$element.attr("placement");
                        }
                        inside = /in/.test(placement);
                        $tip.remove().css({
                            top: 0,
                            left: 0,
                            display: "block"
                        }).appendTo(inside ? this.$element : document.body);
                        pos = this.getPosition(inside);
                        actualWidth = $tip[0].offsetWidth;
                        actualHeight = $tip[0].offsetHeight;
                        switch (inside ? placement.split(" ")[1] : placement) {
                          case "bottom":
                            tp = {
                                top: pos.top + pos.height,
                                left: pos.left + pos.width / 2 - actualWidth / 2
                            };
                            break;

                          case "top":
                            tp = {
                                top: pos.top - actualHeight,
                                left: pos.left + pos.width / 2 - actualWidth / 2
                            };
                            break;

                          case "left":
                            tp = {
                                top: pos.top + pos.height / 2 - actualHeight / 2,
                                left: pos.left - actualWidth
                            };
                            break;

                          case "right":
                            tp = {
                                top: pos.top + pos.height / 2 - actualHeight / 2,
                                left: pos.left + pos.width
                            };
                            break;

                          default:
                            tp = {
                                top: pos.top - actualHeight,
                                left: pos.left + pos.width / 2 - actualWidth / 2
                            };
                            break;
                        }
                        $tip.css(tp).addClass(placement).addClass("in");
                    }
                },
                setContent: function() {
                    var $tip = this.tip();
                    $tip.find(".tooltip-inner").html(this.getTitle());
                    $tip.removeClass("fade in top bottom left right");
                },
                hide: function() {
                    var that = this, $tip = this.tip();
                    $tip.removeClass("in");
                    function removeWithAnimation() {
                        var timeout = setTimeout(function() {
                            $tip.off($.support.transition.end).remove();
                        }, 500);
                        $tip.one($.support.transition.end, function() {
                            clearTimeout(timeout);
                            $tip.remove();
                        });
                    }
                    $.support.transition && this.$tip.hasClass("fade") ? removeWithAnimation() : $tip.remove();
                },
                fixTitle: function() {
                    var $e = this.$element;
                    if ($e.attr("title") || typeof $e.attr("data-original-title") != "string") {
                        $e.attr("data-original-title", $e.attr("title") || "").removeAttr("title");
                    }
                },
                hasContent: function() {
                    return this.getTitle();
                },
                getPosition: function(inside) {
                    return $.extend({}, inside ? {
                        top: 0,
                        left: 0
                    } : this.$element.offset(), {
                        width: this.$element[0].offsetWidth,
                        height: this.$element[0].offsetHeight
                    });
                },
                getTitle: function() {
                    var title, $e = this.$element, o = this.options;
                    title = $e.attr("data-original-title") || (typeof o.title == "function" ? o.title.call($e[0]) : o.title);
                    title = title.toString().replace(/(^\s*|\s*$)/, "");
                    return title;
                },
                tip: function() {
                    return this.$tip = this.$tip || $(this.options.template);
                },
                validate: function() {
                    if (!this.$element[0].parentNode) {
                        this.hide();
                        this.$element = null;
                        this.options = null;
                    }
                },
                enable: function() {
                    this.enabled = true;
                },
                disable: function() {
                    this.enabled = false;
                },
                toggleEnabled: function() {
                    this.enabled = !this.enabled;
                },
                toggle: function() {
                    this[this.tip().hasClass("in") ? "hide" : "show"]();
                },
                destroy: function() {
                    this.hide();
                    this.$element.off("." + this.type).removeData(this.type);
                }
            };
            /* TOOLTIP PLUGIN DEFINITION
             * ========================= */
            $.fn.tooltip = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("tooltip"), options = typeof option == "object" && option;
                    if (!data) $this.data("tooltip", data = new Tooltip(this, options));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.tooltip.Constructor = Tooltip;
            $.fn.tooltip.defaults = {
                animation: true,
                delay: 0,
                selector: false,
                placement: "top",
                trigger: "hover",
                title: "",
                template: '<div class="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>'
            };
        }(jQuery);
        /* ===========================================================
         * bootstrap-popover.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#popovers
         * ===========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * =========================================================== */
        !function($) {
            "use strict";
            var Popover = function(element, options) {
                this.init("popover", element, options);
            };
            /* NOTE: POPOVER EXTENDS BOOTSTRAP-TOOLTIP.js
     ========================================== */
            Popover.prototype = $.extend({}, $.fn.tooltip.Constructor.prototype, {
                constructor: Popover,
                setContent: function() {
                    var $tip = this.tip(), title = this.getTitle(), content = this.getContent();
                    $tip.find(".popover-title")[$.type(title) == "object" ? "append" : "html"](title);
                    $tip.find(".popover-content > *")[$.type(content) == "object" ? "append" : "html"](content);
                    $tip.removeClass("fade top bottom left right in");
                },
                hasContent: function() {
                    return this.getTitle() || this.getContent();
                },
                getContent: function() {
                    var content, $e = this.$element, o = this.options;
                    content = $e.attr("data-content") || (typeof o.content == "function" ? o.content.call($e[0]) : o.content);
                    content = content.toString().replace(/(^\s*|\s*$)/, "");
                    return content;
                },
                tip: function() {
                    if (!this.$tip) {
                        this.$tip = $(this.options.template);
                    }
                    return this.$tip;
                }
            });
            /* POPOVER PLUGIN DEFINITION
                 * ======================= */
            $.fn.popover = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("popover"), options = typeof option == "object" && option;
                    if (!data) $this.data("popover", data = new Popover(this, options));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.popover.Constructor = Popover;
            $.fn.popover.defaults = $.extend({}, $.fn.tooltip.defaults, {
                placement: "right",
                content: "",
                template: '<div class="popover"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'
            });
        }(jQuery);
        /* =============================================================
         * bootstrap-scrollspy.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#scrollspy
         * =============================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ============================================================== */
        !function($) {
            "use strict";
            /* SCROLLSPY CLASS DEFINITION
             * ========================== */
            function ScrollSpy(element, options) {
                var process = $.proxy(this.process, this), $element = $(element).is("body") ? $(window) : $(element), href;
                this.options = $.extend({}, $.fn.scrollspy.defaults, options);
                this.$scrollElement = $element.on("scroll.scroll.data-api", process);
                this.selector = (this.options.target || (href = $(element).attr("href")) && href.replace(/.*(?=#[^\s]+$)/, "") || "") + " .nav li > a";
                this.$body = $("body").on("click.scroll.data-api", this.selector, process);
                this.refresh();
                this.process();
            }
            ScrollSpy.prototype = {
                constructor: ScrollSpy,
                refresh: function() {
                    this.targets = this.$body.find(this.selector).map(function() {
                        var href = $(this).attr("href");
                        return /^#\w/.test(href) && $(href).length ? href : null;
                    });
                    this.offsets = $.map(this.targets, function(id) {
                        return $(id).position().top;
                    });
                },
                process: function() {
                    var scrollTop = this.$scrollElement.scrollTop() + this.options.offset, offsets = this.offsets, targets = this.targets, activeTarget = this.activeTarget, i;
                    for (i = offsets.length; i--; ) {
                        activeTarget != targets[i] && scrollTop >= offsets[i] && (!offsets[i + 1] || scrollTop <= offsets[i + 1]) && this.activate(targets[i]);
                    }
                },
                activate: function(target) {
                    var active;
                    this.activeTarget = target;
                    this.$body.find(this.selector).parent(".active").removeClass("active");
                    active = this.$body.find(this.selector + '[href="' + target + '"]').parent("li").addClass("active");
                    if (active.parent(".dropdown-menu")) {
                        active.closest("li.dropdown").addClass("active");
                    }
                }
            };
            /* SCROLLSPY PLUGIN DEFINITION
             * =========================== */
            $.fn.scrollspy = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("scrollspy"), options = typeof option == "object" && option;
                    if (!data) $this.data("scrollspy", data = new ScrollSpy(this, options));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.scrollspy.Constructor = ScrollSpy;
            $.fn.scrollspy.defaults = {
                offset: 10
            };
            /* SCROLLSPY DATA-API
             * ================== */
            $(function() {
                $('[data-spy="scroll"]').each(function() {
                    var $spy = $(this);
                    $spy.scrollspy($spy.data());
                });
            });
        }(jQuery);
        /* ========================================================
         * bootstrap-tab.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#tabs
         * ========================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ======================================================== */
        !function($) {
            "use strict";
            /* TAB CLASS DEFINITION
             * ==================== */
            var Tab = function(element) {
                this.element = $(element);
            };
            Tab.prototype = {
                constructor: Tab,
                show: function() {
                    var $this = this.element, $ul = $this.closest("ul:not(.dropdown-menu)"), selector = $this.attr("data-target"), previous, $target;
                    if (!selector) {
                        selector = $this.attr("href");
                        selector = selector && selector.replace(/.*(?=#[^\s]*$)/, "");
                    }
                    if ($this.parent("li").hasClass("active")) return;
                    previous = $ul.find(".active a").last()[0];
                    $this.trigger({
                        type: "show",
                        relatedTarget: previous
                    });
                    $target = $(selector);
                    this.activate($this.parent("li"), $ul);
                    this.activate($target, $target.parent(), function() {
                        $this.trigger({
                            type: "shown",
                            relatedTarget: previous
                        });
                    });
                },
                activate: function(element, container, callback) {
                    var $active = container.find("> .active"), transition = callback && $.support.transition && $active.hasClass("fade");
                    function next() {
                        $active.removeClass("active").find("> .dropdown-menu > .active").removeClass("active");
                        element.addClass("active");
                        if (transition) {
                            element[0].offsetWidth;
                            // reflow for transition
                            element.addClass("in");
                        } else {
                            element.removeClass("fade");
                        }
                        if (element.parent(".dropdown-menu")) {
                            element.closest("li.dropdown").addClass("active");
                        }
                        callback && callback();
                    }
                    transition ? $active.one($.support.transition.end, next) : next();
                    $active.removeClass("in");
                }
            };
            /* TAB PLUGIN DEFINITION
             * ===================== */
            $.fn.tab = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("tab");
                    if (!data) $this.data("tab", data = new Tab(this));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.tab.Constructor = Tab;
            /* TAB DATA-API
             * ============ */
            $(function() {
                $("body").on("click.tab.data-api", '[data-toggle="tab"], [data-toggle="pill"]', function(e) {
                    e.preventDefault();
                    $(this).tab("show");
                });
            });
        }(jQuery);
        /* =============================================================
         * bootstrap-typeahead.js v2.0.0
         * http://twitter.github.com/bootstrap/javascript.html#typeahead
         * =============================================================
         * Copyright 2012 Twitter, Inc.
         *
         * Licensed under the Apache License, Version 2.0 (the "License");
         * you may not use this file except in compliance with the License.
         * You may obtain a copy of the License at
         *
         * http://www.apache.org/licenses/LICENSE-2.0
         *
         * Unless required by applicable law or agreed to in writing, software
         * distributed under the License is distributed on an "AS IS" BASIS,
         * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
         * See the License for the specific language governing permissions and
         * limitations under the License.
         * ============================================================ */
        !function($) {
            "use strict";
            var Typeahead = function(element, options) {
                this.$element = $(element);
                this.options = $.extend({}, $.fn.typeahead.defaults, options);
                this.matcher = this.options.matcher || this.matcher;
                this.sorter = this.options.sorter || this.sorter;
                this.highlighter = this.options.highlighter || this.highlighter;
                this.$menu = $(this.options.menu).appendTo("body");
                this.source = this.options.source;
                this.shown = false;
                this.listen();
            };
            Typeahead.prototype = {
                constructor: Typeahead,
                select: function() {
                    var val = this.$menu.find(".active").attr("data-value");
                    this.$element.val(val);
                    return this.hide();
                },
                show: function() {
                    var pos = $.extend({}, this.$element.offset(), {
                        height: this.$element[0].offsetHeight
                    });
                    this.$menu.css({
                        top: pos.top + pos.height,
                        left: pos.left
                    });
                    this.$menu.show();
                    this.shown = true;
                    return this;
                },
                hide: function() {
                    this.$menu.hide();
                    this.shown = false;
                    return this;
                },
                lookup: function(event) {
                    var that = this, items, q;
                    this.query = this.$element.val();
                    if (!this.query) {
                        return this.shown ? this.hide() : this;
                    }
                    items = $.grep(this.source, function(item) {
                        if (that.matcher(item)) return item;
                    });
                    items = this.sorter(items);
                    if (!items.length) {
                        return this.shown ? this.hide() : this;
                    }
                    return this.render(items.slice(0, this.options.items)).show();
                },
                matcher: function(item) {
                    return ~item.toLowerCase().indexOf(this.query.toLowerCase());
                },
                sorter: function(items) {
                    var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
                    while (item = items.shift()) {
                        if (!item.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(item); else if (~item.indexOf(this.query)) caseSensitive.push(item); else caseInsensitive.push(item);
                    }
                    return beginswith.concat(caseSensitive, caseInsensitive);
                },
                highlighter: function(item) {
                    return item.replace(new RegExp("(" + this.query + ")", "ig"), function($1, match) {
                        return "<strong>" + match + "</strong>";
                    });
                },
                render: function(items) {
                    var that = this;
                    items = $(items).map(function(i, item) {
                        i = $(that.options.item).attr("data-value", item);
                        i.find("a").html(that.highlighter(item));
                        return i[0];
                    });
                    items.first().addClass("active");
                    this.$menu.html(items);
                    return this;
                },
                next: function(event) {
                    var active = this.$menu.find(".active").removeClass("active"), next = active.next();
                    if (!next.length) {
                        next = $(this.$menu.find("li")[0]);
                    }
                    next.addClass("active");
                },
                prev: function(event) {
                    var active = this.$menu.find(".active").removeClass("active"), prev = active.prev();
                    if (!prev.length) {
                        prev = this.$menu.find("li").last();
                    }
                    prev.addClass("active");
                },
                listen: function() {
                    this.$element.on("blur", $.proxy(this.blur, this)).on("keypress", $.proxy(this.keypress, this)).on("keyup", $.proxy(this.keyup, this));
                    if ($.browser.webkit || $.browser.msie) {
                        this.$element.on("keydown", $.proxy(this.keypress, this));
                    }
                    this.$menu.on("click", $.proxy(this.click, this)).on("mouseenter", "li", $.proxy(this.mouseenter, this));
                },
                keyup: function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                    switch (e.keyCode) {
                      case 40:
                      // down arrow
                        case 38:
                        // up arrow
                        break;

                      case 9:
                      // tab
                        case 13:
                        // enter
                        if (!this.shown) return;
                        this.select();
                        break;

                      case 27:
                        // escape
                        this.hide();
                        break;

                      default:
                        this.lookup();
                        break;
                    }
                },
                keypress: function(e) {
                    e.stopPropagation();
                    if (!this.shown) return;
                    switch (e.keyCode) {
                      case 9:
                      // tab
                        case 13:
                      // enter
                        case 27:
                        // escape
                        e.preventDefault();
                        break;

                      case 38:
                        // up arrow
                        e.preventDefault();
                        this.prev();
                        break;

                      case 40:
                        // down arrow
                        e.preventDefault();
                        this.next();
                        break;
                    }
                },
                blur: function(e) {
                    var that = this;
                    e.stopPropagation();
                    e.preventDefault();
                    setTimeout(function() {
                        that.hide();
                    }, 150);
                },
                click: function(e) {
                    e.stopPropagation();
                    e.preventDefault();
                    this.select();
                },
                mouseenter: function(e) {
                    this.$menu.find(".active").removeClass("active");
                    $(e.currentTarget).addClass("active");
                }
            };
            /* TYPEAHEAD PLUGIN DEFINITION
             * =========================== */
            $.fn.typeahead = function(option) {
                return this.each(function() {
                    var $this = $(this), data = $this.data("typeahead"), options = typeof option == "object" && option;
                    if (!data) $this.data("typeahead", data = new Typeahead(this, options));
                    if (typeof option == "string") data[option]();
                });
            };
            $.fn.typeahead.defaults = {
                source: [],
                items: 8,
                menu: '<ul class="typeahead dropdown-menu"></ul>',
                item: '<li><a href="#"></a></li>'
            };
            $.fn.typeahead.Constructor = Typeahead;
            /* TYPEAHEAD DATA-API
             * ================== */
            $(function() {
                $("body").on("focus.typeahead.data-api", '[data-provide="typeahead"]', function(e) {
                    var $this = $(this);
                    if ($this.data("typeahead")) return;
                    e.preventDefault();
                    $this.typeahead($this.data());
                });
            });
        }(jQuery);
    };
});

define("ucloud/plugins/1.3.3/jquery-metadata-debug", [], function(require, exports, module) {
    return function($) {
        var jQuery = $;
        /*
         * Metadata - jQuery plugin for parsing metadata from elements
         *
         * Copyright (c) 2006 John Resig, Yehuda Katz, Jörn Zaefferer, Paul McLanahan
         *
         * Dual licensed under the MIT and GPL licenses:
         *   http://www.opensource.org/licenses/mit-license.php
         *   http://www.gnu.org/licenses/gpl.html
         *
         */
        /**
         * Sets the type of metadata to use. Metadata is encoded in JSON, and each property
         * in the JSON will become a property of the element itself.
         *
         * There are three supported types of metadata storage:
         *
         *   attr:  Inside an attribute. The name parameter indicates *which* attribute.
         *          
         *   class: Inside the class attribute, wrapped in curly braces: { }
         *   
         *   elem:  Inside a child element (e.g. a script tag). The
         *          name parameter indicates *which* element.
         *          
         * The metadata for an element is loaded the first time the element is accessed via jQuery.
         *
         * As a result, you can define the metadata type, use $(expr) to load the metadata into the elements
         * matched by expr, then redefine the metadata type and run another $(expr) for other elements.
         * 
         * @name $.metadata.setType
         *
         * @example <p id="one" class="some_class {item_id: 1, item_label: 'Label'}">This is a p</p>
         * @before $.metadata.setType("class")
         * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
         * @desc Reads metadata from the class attribute
         * 
         * @example <p id="one" class="some_class" data="{item_id: 1, item_label: 'Label'}">This is a p</p>
         * @before $.metadata.setType("attr", "data")
         * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
         * @desc Reads metadata from a "data" attribute
         * 
         * @example <p id="one" class="some_class"><script>{item_id: 1, item_label: 'Label'}</script>This is a p</p>
         * @before $.metadata.setType("elem", "script")
         * @after $("#one").metadata().item_id == 1; $("#one").metadata().item_label == "Label"
         * @desc Reads metadata from a nested script element
         * 
         * @param String type The encoding type
         * @param String name The name of the attribute to be used to get metadata (optional)
         * @cat Plugins/Metadata
         * @descr Sets the type of encoding to be used when loading metadata for the first time
         * @type undefined
         * @see metadata()
         */
        (function($) {
            $.extend({
                metadata: {
                    defaults: {
                        type: "class",
                        name: "metadata",
                        cre: /({.*})/,
                        single: "metadata"
                    },
                    setType: function(type, name) {
                        this.defaults.type = type;
                        this.defaults.name = name;
                    },
                    get: function(elem, opts) {
                        var settings = $.extend({}, this.defaults, opts);
                        // check for empty string in single property
                        if (!settings.single.length) settings.single = "metadata";
                        var data = $.data(elem, settings.single);
                        // returned cached data if it already exists
                        if (data) return data;
                        data = "{}";
                        if (settings.type == "class") {
                            var m = settings.cre.exec(elem.className);
                            if (m) data = m[1];
                        } else if (settings.type == "elem") {
                            if (!elem.getElementsByTagName) return undefined;
                            var e = elem.getElementsByTagName(settings.name);
                            if (e.length) data = $.trim(e[0].innerHTML);
                        } else if (elem.getAttribute != undefined) {
                            var attr = elem.getAttribute(settings.name);
                            if (attr) data = attr;
                        }
                        if (data.indexOf("{") < 0) data = "{" + data + "}";
                        data = eval("(" + data + ")");
                        $.data(elem, settings.single, data);
                        return data;
                    }
                }
            });
            /**
             * Returns the metadata object for the first member of the jQuery object.
             *
             * @name metadata
             * @descr Returns element's metadata object
             * @param Object opts An object contianing settings to override the defaults
             * @type jQuery
             * @cat Plugins/Metadata
             */
            $.fn.metadata = function(opts) {
                return $.metadata.get(this[0], opts);
            };
        })(jQuery);
    };
});

define("ucloud/plugins/1.3.3/jquery-validate-debug", [], function(require, exports, module) {
    return function(jQuery) {
        /**
         * jQuery Validation Plugin 1.10.0
         *
         * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
         * http://docs.jquery.com/Plugins/Validation
         *
         * Copyright (c) 2012 Jörn Zaefferer
         *
         * Dual licensed under the MIT and GPL licenses:
         *   http://www.opensource.org/licenses/mit-license.php
         *   http://www.gnu.org/licenses/gpl.html
         */
        (function($) {
            $.extend($.fn, {
                // http://docs.jquery.com/Plugins/Validation/validate
                validate: function(options) {
                    // if nothing is selected, return nothing; can't chain anyway
                    if (!this.length) {
                        if (options && options.debug && window.console) {
                            console.warn("nothing selected, can't validate, returning nothing");
                        }
                        return;
                    }
                    // check if a validator for this form was already created
                    var validator = $.data(this[0], "validator");
                    if (validator) {
                        return validator;
                    }
                    // Add novalidate tag if HTML5.
                    this.attr("novalidate", "novalidate");
                    validator = new $.validator(options, this[0]);
                    $.data(this[0], "validator", validator);
                    if (validator.settings.onsubmit) {
                        this.validateDelegate(":submit", "click", function(ev) {
                            if (validator.settings.submitHandler) {
                                validator.submitButton = ev.target;
                            }
                            // allow suppressing validation by adding a cancel class to the submit button
                            if ($(ev.target).hasClass("cancel")) {
                                validator.cancelSubmit = true;
                            }
                        });
                        // validate the form on submit
                        this.submit(function(event) {
                            if (validator.settings.debug) {
                                // prevent form submit to be able to see console output
                                event.preventDefault();
                            }
                            function handle() {
                                var hidden;
                                if (validator.settings.submitHandler) {
                                    if (validator.submitButton) {
                                        // insert a hidden input as a replacement for the missing submit button
                                        hidden = $("<input type='hidden'/>").attr("name", validator.submitButton.name).val(validator.submitButton.value).appendTo(validator.currentForm);
                                    }
                                    validator.settings.submitHandler.call(validator, validator.currentForm, event);
                                    if (validator.submitButton) {
                                        // and clean up afterwards; thanks to no-block-scope, hidden can be referenced
                                        hidden.remove();
                                    }
                                    return false;
                                }
                                return true;
                            }
                            // prevent submit for invalid forms or custom submit handlers
                            if (validator.cancelSubmit) {
                                validator.cancelSubmit = false;
                                return handle();
                            }
                            if (validator.form()) {
                                if (validator.pendingRequest) {
                                    validator.formSubmitted = true;
                                    return false;
                                }
                                return handle();
                            } else {
                                validator.focusInvalid();
                                return false;
                            }
                        });
                    }
                    return validator;
                },
                // http://docs.jquery.com/Plugins/Validation/valid
                valid: function() {
                    if ($(this[0]).is("form")) {
                        return this.validate().form();
                    } else {
                        var valid = true;
                        var validator = $(this[0].form).validate();
                        this.each(function() {
                            valid &= validator.element(this);
                        });
                        return valid;
                    }
                },
                // attributes: space seperated list of attributes to retrieve and remove
                removeAttrs: function(attributes) {
                    var result = {}, $element = this;
                    $.each(attributes.split(/\s/), function(index, value) {
                        result[value] = $element.attr(value);
                        $element.removeAttr(value);
                    });
                    return result;
                },
                // http://docs.jquery.com/Plugins/Validation/rules
                rules: function(command, argument) {
                    var element = this[0];
                    if (command) {
                        var settings = $.data(element.form, "validator").settings;
                        var staticRules = settings.rules;
                        var existingRules = $.validator.staticRules(element);
                        switch (command) {
                          case "add":
                            $.extend(existingRules, $.validator.normalizeRule(argument));
                            staticRules[element.name] = existingRules;
                            if (argument.messages) {
                                settings.messages[element.name] = $.extend(settings.messages[element.name], argument.messages);
                            }
                            break;

                          case "remove":
                            if (!argument) {
                                delete staticRules[element.name];
                                return existingRules;
                            }
                            var filtered = {};
                            $.each(argument.split(/\s/), function(index, method) {
                                filtered[method] = existingRules[method];
                                delete existingRules[method];
                            });
                            return filtered;
                        }
                    }
                    var data = $.validator.normalizeRules($.extend({}, $.validator.metadataRules(element), $.validator.classRules(element), $.validator.attributeRules(element), $.validator.staticRules(element)), element);
                    // make sure required is at front
                    if (data.required) {
                        var param = data.required;
                        delete data.required;
                        data = $.extend({
                            required: param
                        }, data);
                    }
                    return data;
                }
            });
            // Custom selectors
            $.extend($.expr[":"], {
                // http://docs.jquery.com/Plugins/Validation/blank
                blank: function(a) {
                    return !$.trim("" + a.value);
                },
                // http://docs.jquery.com/Plugins/Validation/filled
                filled: function(a) {
                    return !!$.trim("" + a.value);
                },
                // http://docs.jquery.com/Plugins/Validation/unchecked
                unchecked: function(a) {
                    return !a.checked;
                }
            });
            // constructor for validator
            $.validator = function(options, form) {
                this.settings = $.extend(true, {}, $.validator.defaults, options);
                this.currentForm = form;
                this.init();
            };
            $.validator.format = function(source, params) {
                if (arguments.length === 1) {
                    return function() {
                        var args = $.makeArray(arguments);
                        args.unshift(source);
                        return $.validator.format.apply(this, args);
                    };
                }
                if (arguments.length > 2 && params.constructor !== Array) {
                    params = $.makeArray(arguments).slice(1);
                }
                if (params.constructor !== Array) {
                    params = [ params ];
                }
                $.each(params, function(i, n) {
                    source = source.replace(new RegExp("\\{" + i + "\\}", "g"), n);
                });
                return source;
            };
            $.extend($.validator, {
                defaults: {
                    messages: {},
                    groups: {},
                    rules: {},
                    errorClass: "error",
                    validClass: "valid",
                    errorElement: "label",
                    focusInvalid: true,
                    errorContainer: $([]),
                    errorLabelContainer: $([]),
                    onsubmit: true,
                    ignore: ":hidden",
                    ignoreTitle: false,
                    onfocusin: function(element, event) {
                        this.lastActive = element;
                        // hide error label and remove error class on focus if enabled
                        if (this.settings.focusCleanup && !this.blockFocusCleanup) {
                            if (this.settings.unhighlight) {
                                this.settings.unhighlight.call(this, element, this.settings.errorClass, this.settings.validClass);
                            }
                            this.addWrapper(this.errorsFor(element)).hide();
                        }
                    },
                    onfocusout: function(element, event) {
                        if (!this.checkable(element) && (element.name in this.submitted || !this.optional(element))) {
                            this.element(element);
                        }
                    },
                    onkeyup: function(element, event) {
                        if (event.which === 9 && this.elementValue(element) === "") {
                            return;
                        } else if (element.name in this.submitted || element === this.lastActive) {
                            this.element(element);
                        }
                    },
                    onclick: function(element, event) {
                        // click on selects, radiobuttons and checkboxes
                        if (element.name in this.submitted) {
                            this.element(element);
                        } else if (element.parentNode.name in this.submitted) {
                            this.element(element.parentNode);
                        }
                    },
                    highlight: function(element, errorClass, validClass) {
                        if (element.type === "radio") {
                            this.findByName(element.name).addClass(errorClass).removeClass(validClass);
                        } else {
                            $(element).addClass(errorClass).removeClass(validClass);
                        }
                    },
                    unhighlight: function(element, errorClass, validClass) {
                        if (element.type === "radio") {
                            this.findByName(element.name).removeClass(errorClass).addClass(validClass);
                        } else {
                            $(element).removeClass(errorClass).addClass(validClass);
                        }
                    }
                },
                // http://docs.jquery.com/Plugins/Validation/Validator/setDefaults
                setDefaults: function(settings) {
                    $.extend($.validator.defaults, settings);
                },
                messages: {
                    required: "This field is required.",
                    remote: "Please fix this field.",
                    email: "Please enter a valid email address.",
                    url: "Please enter a valid URL.",
                    date: "Please enter a valid date.",
                    dateISO: "Please enter a valid date (ISO).",
                    number: "Please enter a valid number.",
                    digits: "Please enter only digits.",
                    creditcard: "Please enter a valid credit card number.",
                    equalTo: "Please enter the same value again.",
                    maxlength: $.validator.format("Please enter no more than {0} characters."),
                    minlength: $.validator.format("Please enter at least {0} characters."),
                    rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."),
                    range: $.validator.format("Please enter a value between {0} and {1}."),
                    max: $.validator.format("Please enter a value less than or equal to {0}."),
                    min: $.validator.format("Please enter a value greater than or equal to {0}.")
                },
                autoCreateRanges: false,
                prototype: {
                    init: function() {
                        this.labelContainer = $(this.settings.errorLabelContainer);
                        this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm);
                        this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer);
                        this.submitted = {};
                        this.valueCache = {};
                        this.pendingRequest = 0;
                        this.pending = {};
                        this.invalid = {};
                        this.reset();
                        var groups = this.groups = {};
                        $.each(this.settings.groups, function(key, value) {
                            $.each(value.split(/\s/), function(index, name) {
                                groups[name] = key;
                            });
                        });
                        var rules = this.settings.rules;
                        $.each(rules, function(key, value) {
                            rules[key] = $.validator.normalizeRule(value);
                        });
                        function delegate(event) {
                            var validator = $.data(this[0].form, "validator"), eventType = "on" + event.type.replace(/^validate/, "");
                            if (validator.settings[eventType]) {
                                validator.settings[eventType].call(validator, this[0], event);
                            }
                        }
                        $(this.currentForm).validateDelegate(":text, [type='password'], [type='file'], select, textarea, " + "[type='number'], [type='search'] ,[type='tel'], [type='url'], " + "[type='email'], [type='datetime'], [type='date'], [type='month'], " + "[type='week'], [type='time'], [type='datetime-local'], " + "[type='range'], [type='color'] ", "focusin focusout keyup", delegate).validateDelegate("[type='radio'], [type='checkbox'], select, option", "click", delegate);
                        if (this.settings.invalidHandler) {
                            $(this.currentForm).bind("invalid-form.validate", this.settings.invalidHandler);
                        }
                    },
                    // http://docs.jquery.com/Plugins/Validation/Validator/form
                    form: function() {
                        this.checkForm();
                        $.extend(this.submitted, this.errorMap);
                        this.invalid = $.extend({}, this.errorMap);
                        if (!this.valid()) {
                            $(this.currentForm).triggerHandler("invalid-form", [ this ]);
                        }
                        this.showErrors();
                        return this.valid();
                    },
                    checkForm: function() {
                        this.prepareForm();
                        for (var i = 0, elements = this.currentElements = this.elements(); elements[i]; i++) {
                            this.check(elements[i]);
                        }
                        return this.valid();
                    },
                    // http://docs.jquery.com/Plugins/Validation/Validator/element
                    element: function(element) {
                        element = this.validationTargetFor(this.clean(element));
                        this.lastElement = element;
                        this.prepareElement(element);
                        this.currentElements = $(element);
                        var result = this.check(element) !== false;
                        if (result) {
                            delete this.invalid[element.name];
                        } else {
                            this.invalid[element.name] = true;
                        }
                        if (!this.numberOfInvalids()) {
                            // Hide error containers on last error
                            this.toHide = this.toHide.add(this.containers);
                        }
                        this.showErrors();
                        return result;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Validator/showErrors
                    showErrors: function(errors) {
                        if (errors) {
                            // add items to error list and map
                            $.extend(this.errorMap, errors);
                            this.errorList = [];
                            for (var name in errors) {
                                this.errorList.push({
                                    message: errors[name],
                                    element: this.findByName(name)[0]
                                });
                            }
                            // remove items from success list
                            this.successList = $.grep(this.successList, function(element) {
                                return !(element.name in errors);
                            });
                        }
                        if (this.settings.showErrors) {
                            this.settings.showErrors.call(this, this.errorMap, this.errorList);
                        } else {
                            this.defaultShowErrors();
                        }
                    },
                    // http://docs.jquery.com/Plugins/Validation/Validator/resetForm
                    resetForm: function() {
                        if ($.fn.resetForm) {
                            $(this.currentForm).resetForm();
                        }
                        this.submitted = {};
                        this.lastElement = null;
                        this.prepareForm();
                        this.hideErrors();
                        this.elements().removeClass(this.settings.errorClass).removeData("previousValue");
                    },
                    numberOfInvalids: function() {
                        return this.objectLength(this.invalid);
                    },
                    objectLength: function(obj) {
                        var count = 0;
                        for (var i in obj) {
                            count++;
                        }
                        return count;
                    },
                    hideErrors: function() {
                        this.addWrapper(this.toHide).hide();
                    },
                    valid: function() {
                        return this.size() === 0;
                    },
                    size: function() {
                        return this.errorList.length;
                    },
                    focusInvalid: function() {
                        if (this.settings.focusInvalid) {
                            try {
                                $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
                            } catch (e) {}
                        }
                    },
                    findLastActive: function() {
                        var lastActive = this.lastActive;
                        return lastActive && $.grep(this.errorList, function(n) {
                            return n.element.name === lastActive.name;
                        }).length === 1 && lastActive;
                    },
                    elements: function() {
                        var validator = this, rulesCache = {};
                        // select all valid inputs inside the form (no submit or reset buttons)
                        return $(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, [disabled]").not(this.settings.ignore).filter(function() {
                            if (!this.name && validator.settings.debug && window.console) {
                                console.error("%o has no name assigned", this);
                            }
                            // select only the first element for each name, and only those with rules specified
                            if (this.name in rulesCache || !validator.objectLength($(this).rules())) {
                                return false;
                            }
                            rulesCache[this.name] = true;
                            return true;
                        });
                    },
                    clean: function(selector) {
                        return $(selector)[0];
                    },
                    errors: function() {
                        var errorClass = this.settings.errorClass.replace(" ", ".");
                        return $(this.settings.errorElement + "." + errorClass, this.errorContext);
                    },
                    reset: function() {
                        this.successList = [];
                        this.errorList = [];
                        this.errorMap = {};
                        this.toShow = $([]);
                        this.toHide = $([]);
                        this.currentElements = $([]);
                    },
                    prepareForm: function() {
                        this.reset();
                        this.toHide = this.errors().add(this.containers);
                    },
                    prepareElement: function(element) {
                        this.reset();
                        this.toHide = this.errorsFor(element);
                    },
                    elementValue: function(element) {
                        var type = $(element).attr("type"), val = $(element).val();
                        if (type === "radio" || type === "checkbox") {
                            return $('input[name="' + $(element).attr("name") + '"]:checked').val();
                        }
                        if (typeof val === "string") {
                            return val.replace(/\r/g, "");
                        }
                        return val;
                    },
                    check: function(element) {
                        element = this.validationTargetFor(this.clean(element));
                        var rules = $(element).rules();
                        var dependencyMismatch = false;
                        var val = this.elementValue(element);
                        var result;
                        for (var method in rules) {
                            var rule = {
                                method: method,
                                parameters: rules[method]
                            };
                            try {
                                result = $.validator.methods[method].call(this, val, element, rule.parameters);
                                // if a method indicates that the field is optional and therefore valid,
                                // don't mark it as valid when there are no other rules
                                if (result === "dependency-mismatch") {
                                    dependencyMismatch = true;
                                    continue;
                                }
                                dependencyMismatch = false;
                                if (result === "pending") {
                                    this.toHide = this.toHide.not(this.errorsFor(element));
                                    return;
                                }
                                if (!result) {
                                    this.formatAndAdd(element, rule);
                                    return false;
                                }
                            } catch (e) {
                                if (this.settings.debug && window.console) {
                                    console.log("exception occured when checking element " + element.id + ", check the '" + rule.method + "' method", e);
                                }
                                throw e;
                            }
                        }
                        if (dependencyMismatch) {
                            return;
                        }
                        if (this.objectLength(rules)) {
                            this.successList.push(element);
                        }
                        return true;
                    },
                    // return the custom message for the given element and validation method
                    // specified in the element's "messages" metadata
                    customMetaMessage: function(element, method) {
                        if (!$.metadata) {
                            return;
                        }
                        var meta = this.settings.meta ? $(element).metadata()[this.settings.meta] : $(element).metadata();
                        return meta && meta.messages && meta.messages[method];
                    },
                    // return the custom message for the given element and validation method
                    // specified in the element's HTML5 data attribute
                    customDataMessage: function(element, method) {
                        return $(element).data("msg-" + method.toLowerCase()) || element.attributes && $(element).attr("data-msg-" + method.toLowerCase());
                    },
                    // return the custom message for the given element name and validation method
                    customMessage: function(name, method) {
                        var m = this.settings.messages[name];
                        return m && (m.constructor === String ? m : m[method]);
                    },
                    // return the first defined argument, allowing empty strings
                    findDefined: function() {
                        for (var i = 0; i < arguments.length; i++) {
                            if (arguments[i] !== undefined) {
                                return arguments[i];
                            }
                        }
                        return undefined;
                    },
                    defaultMessage: function(element, method) {
                        return this.findDefined(this.customMessage(element.name, method), this.customDataMessage(element, method), this.customMetaMessage(element, method), // title is never undefined, so handle empty string as undefined
                        !this.settings.ignoreTitle && element.title || undefined, $.validator.messages[method], "<strong>Warning: No message defined for " + element.name + "</strong>");
                    },
                    formatAndAdd: function(element, rule) {
                        var message = this.defaultMessage(element, rule.method), theregex = /\$?\{(\d+)\}/g;
                        if (typeof message === "function") {
                            message = message.call(this, rule.parameters, element);
                        } else if (theregex.test(message)) {
                            message = $.validator.format(message.replace(theregex, "{$1}"), rule.parameters);
                        }
                        this.errorList.push({
                            message: message,
                            element: element
                        });
                        this.errorMap[element.name] = message;
                        this.submitted[element.name] = message;
                    },
                    addWrapper: function(toToggle) {
                        if (this.settings.wrapper) {
                            toToggle = toToggle.add(toToggle.parent(this.settings.wrapper));
                        }
                        return toToggle;
                    },
                    defaultShowErrors: function() {
                        var i, elements;
                        for (i = 0; this.errorList[i]; i++) {
                            var error = this.errorList[i];
                            if (this.settings.highlight) {
                                this.settings.highlight.call(this, error.element, this.settings.errorClass, this.settings.validClass);
                            }
                            this.showLabel(error.element, error.message);
                        }
                        if (this.errorList.length) {
                            this.toShow = this.toShow.add(this.containers);
                        }
                        if (this.settings.success) {
                            for (i = 0; this.successList[i]; i++) {
                                this.showLabel(this.successList[i]);
                            }
                        }
                        if (this.settings.unhighlight) {
                            for (i = 0, elements = this.validElements(); elements[i]; i++) {
                                this.settings.unhighlight.call(this, elements[i], this.settings.errorClass, this.settings.validClass);
                            }
                        }
                        this.toHide = this.toHide.not(this.toShow);
                        this.hideErrors();
                        this.addWrapper(this.toShow).show();
                    },
                    validElements: function() {
                        return this.currentElements.not(this.invalidElements());
                    },
                    invalidElements: function() {
                        return $(this.errorList).map(function() {
                            return this.element;
                        });
                    },
                    showLabel: function(element, message) {
                        var label = this.errorsFor(element);
                        if (label.length) {
                            // refresh error/success class
                            label.removeClass(this.settings.validClass).addClass(this.settings.errorClass);
                            // check if we have a generated label, replace the message then
                            if (label.attr("generated")) {
                                label.html(message);
                            }
                        } else {
                            // create label
                            label = $("<" + this.settings.errorElement + "/>").attr({
                                "for": this.idOrName(element),
                                generated: true
                            }).addClass(this.settings.errorClass).html(message || "");
                            if (this.settings.wrapper) {
                                // make sure the element is visible, even in IE
                                // actually showing the wrapped element is handled elsewhere
                                label = label.hide().show().wrap("<" + this.settings.wrapper + "/>").parent();
                            }
                            if (!this.labelContainer.append(label).length) {
                                if (this.settings.errorPlacement) {
                                    this.settings.errorPlacement(label, $(element));
                                } else {
                                    label.insertAfter(element);
                                }
                            }
                        }
                        if (!message && this.settings.success) {
                            label.text("");
                            if (typeof this.settings.success === "string") {
                                label.addClass(this.settings.success);
                            } else {
                                this.settings.success(label, element);
                            }
                        }
                        this.toShow = this.toShow.add(label);
                    },
                    errorsFor: function(element) {
                        var name = this.idOrName(element);
                        return this.errors().filter(function() {
                            return $(this).attr("for") === name;
                        });
                    },
                    idOrName: function(element) {
                        return this.groups[element.name] || (this.checkable(element) ? element.name : element.id || element.name);
                    },
                    validationTargetFor: function(element) {
                        // if radio/checkbox, validate first element in group instead
                        if (this.checkable(element)) {
                            element = this.findByName(element.name).not(this.settings.ignore)[0];
                        }
                        return element;
                    },
                    checkable: function(element) {
                        return /radio|checkbox/i.test(element.type);
                    },
                    findByName: function(name) {
                        return $(this.currentForm).find('[name="' + name + '"]');
                    },
                    getLength: function(value, element) {
                        switch (element.nodeName.toLowerCase()) {
                          case "select":
                            return $("option:selected", element).length;

                          case "input":
                            if (this.checkable(element)) {
                                return this.findByName(element.name).filter(":checked").length;
                            }
                        }
                        return value.length;
                    },
                    depend: function(param, element) {
                        return this.dependTypes[typeof param] ? this.dependTypes[typeof param](param, element) : true;
                    },
                    dependTypes: {
                        "boolean": function(param, element) {
                            return param;
                        },
                        string: function(param, element) {
                            return !!$(param, element.form).length;
                        },
                        "function": function(param, element) {
                            return param(element);
                        }
                    },
                    optional: function(element) {
                        var val = this.elementValue(element);
                        return !$.validator.methods.required.call(this, val, element) && "dependency-mismatch";
                    },
                    startRequest: function(element) {
                        if (!this.pending[element.name]) {
                            this.pendingRequest++;
                            this.pending[element.name] = true;
                        }
                    },
                    stopRequest: function(element, valid) {
                        this.pendingRequest--;
                        // sometimes synchronization fails, make sure pendingRequest is never < 0
                        if (this.pendingRequest < 0) {
                            this.pendingRequest = 0;
                        }
                        delete this.pending[element.name];
                        if (valid && this.pendingRequest === 0 && this.formSubmitted && this.form()) {
                            $(this.currentForm).submit();
                            this.formSubmitted = false;
                        } else if (!valid && this.pendingRequest === 0 && this.formSubmitted) {
                            $(this.currentForm).triggerHandler("invalid-form", [ this ]);
                            this.formSubmitted = false;
                        }
                    },
                    previousValue: function(element) {
                        return $.data(element, "previousValue") || $.data(element, "previousValue", {
                            old: null,
                            valid: true,
                            message: this.defaultMessage(element, "remote")
                        });
                    }
                },
                classRuleSettings: {
                    required: {
                        required: true
                    },
                    email: {
                        email: true
                    },
                    url: {
                        url: true
                    },
                    date: {
                        date: true
                    },
                    dateISO: {
                        dateISO: true
                    },
                    number: {
                        number: true
                    },
                    digits: {
                        digits: true
                    },
                    creditcard: {
                        creditcard: true
                    }
                },
                addClassRules: function(className, rules) {
                    if (className.constructor === String) {
                        this.classRuleSettings[className] = rules;
                    } else {
                        $.extend(this.classRuleSettings, className);
                    }
                },
                classRules: function(element) {
                    var rules = {};
                    var classes = $(element).attr("class");
                    if (classes) {
                        $.each(classes.split(" "), function() {
                            if (this in $.validator.classRuleSettings) {
                                $.extend(rules, $.validator.classRuleSettings[this]);
                            }
                        });
                    }
                    return rules;
                },
                attributeRules: function(element) {
                    var rules = {};
                    var $element = $(element);
                    for (var method in $.validator.methods) {
                        var value;
                        // support for <input required> in both html5 and older browsers
                        if (method === "required") {
                            value = $element.get(0).getAttribute(method);
                            // Some browsers return an empty string for the required attribute
                            // and non-HTML5 browsers might have required="" markup
                            if (value === "") {
                                value = true;
                            }
                            // force non-HTML5 browsers to return bool
                            value = !!value;
                        } else {
                            value = $element.attr(method);
                        }
                        if (value) {
                            rules[method] = value;
                        } else if ($element[0].getAttribute("type") === method) {
                            rules[method] = true;
                        }
                    }
                    // maxlength may be returned as -1, 2147483647 (IE) and 524288 (safari) for text inputs
                    if (rules.maxlength && /-1|2147483647|524288/.test(rules.maxlength)) {
                        delete rules.maxlength;
                    }
                    return rules;
                },
                metadataRules: function(element) {
                    if (!$.metadata) {
                        return {};
                    }
                    var meta = $.data(element.form, "validator").settings.meta;
                    return meta ? $(element).metadata()[meta] : $(element).metadata();
                },
                staticRules: function(element) {
                    var rules = {};
                    var validator = $.data(element.form, "validator");
                    if (validator.settings.rules) {
                        rules = $.validator.normalizeRule(validator.settings.rules[element.name]) || {};
                    }
                    return rules;
                },
                normalizeRules: function(rules, element) {
                    // handle dependency check
                    $.each(rules, function(prop, val) {
                        // ignore rule when param is explicitly false, eg. required:false
                        if (val === false) {
                            delete rules[prop];
                            return;
                        }
                        if (val.param || val.depends) {
                            var keepRule = true;
                            switch (typeof val.depends) {
                              case "string":
                                keepRule = !!$(val.depends, element.form).length;
                                break;

                              case "function":
                                keepRule = val.depends.call(element, element);
                                break;
                            }
                            if (keepRule) {
                                rules[prop] = val.param !== undefined ? val.param : true;
                            } else {
                                delete rules[prop];
                            }
                        }
                    });
                    // evaluate parameters
                    $.each(rules, function(rule, parameter) {
                        rules[rule] = $.isFunction(parameter) ? parameter(element) : parameter;
                    });
                    // clean number parameters
                    $.each([ "minlength", "maxlength", "min", "max" ], function() {
                        if (rules[this]) {
                            rules[this] = Number(rules[this]);
                        }
                    });
                    $.each([ "rangelength", "range" ], function() {
                        if (rules[this]) {
                            rules[this] = [ Number(rules[this][0]), Number(rules[this][1]) ];
                        }
                    });
                    if ($.validator.autoCreateRanges) {
                        // auto-create ranges
                        if (rules.min && rules.max) {
                            rules.range = [ rules.min, rules.max ];
                            delete rules.min;
                            delete rules.max;
                        }
                        if (rules.minlength && rules.maxlength) {
                            rules.rangelength = [ rules.minlength, rules.maxlength ];
                            delete rules.minlength;
                            delete rules.maxlength;
                        }
                    }
                    // To support custom messages in metadata ignore rule methods titled "messages"
                    if (rules.messages) {
                        delete rules.messages;
                    }
                    return rules;
                },
                // Converts a simple string to a {string: true} rule, e.g., "required" to {required:true}
                normalizeRule: function(data) {
                    if (typeof data === "string") {
                        var transformed = {};
                        $.each(data.split(/\s/), function() {
                            transformed[this] = true;
                        });
                        data = transformed;
                    }
                    return data;
                },
                // http://docs.jquery.com/Plugins/Validation/Validator/addMethod
                addMethod: function(name, method, message) {
                    $.validator.methods[name] = method;
                    $.validator.messages[name] = message !== undefined ? message : $.validator.messages[name];
                    if (method.length < 3) {
                        $.validator.addClassRules(name, $.validator.normalizeRule(name));
                    }
                },
                methods: {
                    // http://docs.jquery.com/Plugins/Validation/Methods/required
                    required: function(value, element, param) {
                        // check if dependency is met
                        if (!this.depend(param, element)) {
                            return "dependency-mismatch";
                        }
                        if (element.nodeName.toLowerCase() === "select") {
                            // could be an array for select-multiple or a string, both are fine this way
                            var val = $(element).val();
                            return val && val.length > 0;
                        }
                        if (this.checkable(element)) {
                            return this.getLength(value, element) > 0;
                        }
                        return $.trim(value).length > 0;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/remote
                    remote: function(value, element, param) {
                        if (this.optional(element)) {
                            return "dependency-mismatch";
                        }
                        var previous = this.previousValue(element);
                        if (!this.settings.messages[element.name]) {
                            this.settings.messages[element.name] = {};
                        }
                        previous.originalMessage = this.settings.messages[element.name].remote;
                        this.settings.messages[element.name].remote = previous.message;
                        param = typeof param === "string" && {
                            url: param
                        } || param;
                        if (this.pending[element.name]) {
                            return "pending";
                        }
                        if (previous.old === value) {
                            return previous.valid;
                        }
                        previous.old = value;
                        var validator = this;
                        this.startRequest(element);
                        var data = {};
                        data[element.name] = value;
                        $.ajax($.extend(true, {
                            url: param,
                            mode: "abort",
                            port: "validate" + element.name,
                            dataType: "json",
                            data: data,
                            success: function(response) {
                                validator.settings.messages[element.name].remote = previous.originalMessage;
                                var valid = response === true || response === "true";
                                if (valid) {
                                    var submitted = validator.formSubmitted;
                                    validator.prepareElement(element);
                                    validator.formSubmitted = submitted;
                                    validator.successList.push(element);
                                    delete validator.invalid[element.name];
                                    validator.showErrors();
                                } else {
                                    var errors = {};
                                    var message = response || validator.defaultMessage(element, "remote");
                                    errors[element.name] = previous.message = $.isFunction(message) ? message(value) : message;
                                    validator.invalid[element.name] = true;
                                    validator.showErrors(errors);
                                }
                                previous.valid = valid;
                                validator.stopRequest(element, valid);
                            }
                        }, param));
                        return "pending";
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/minlength
                    minlength: function(value, element, param) {
                        var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
                        return this.optional(element) || length >= param;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/maxlength
                    maxlength: function(value, element, param) {
                        var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
                        return this.optional(element) || length <= param;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/rangelength
                    rangelength: function(value, element, param) {
                        var length = $.isArray(value) ? value.length : this.getLength($.trim(value), element);
                        return this.optional(element) || length >= param[0] && length <= param[1];
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/min
                    min: function(value, element, param) {
                        return this.optional(element) || value >= param;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/max
                    max: function(value, element, param) {
                        return this.optional(element) || value <= param;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/range
                    range: function(value, element, param) {
                        return this.optional(element) || value >= param[0] && value <= param[1];
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/email
                    email: function(value, element) {
                        // contributed by Scott Gonzalez: http://projects.scottsplayground.com/email_address_validation/
                        return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i.test(value);
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/url
                    url: function(value, element) {
                        // contributed by Scott Gonzalez: http://projects.scottsplayground.com/iri/
                        return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/date
                    date: function(value, element) {
                        return this.optional(element) || !/Invalid|NaN/.test(new Date(value));
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/dateISO
                    dateISO: function(value, element) {
                        return this.optional(element) || /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/.test(value);
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/number
                    number: function(value, element) {
                        return this.optional(element) || /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(value);
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/digits
                    digits: function(value, element) {
                        return this.optional(element) || /^\d+$/.test(value);
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/creditcard
                    // based on http://en.wikipedia.org/wiki/Luhn
                    creditcard: function(value, element) {
                        if (this.optional(element)) {
                            return "dependency-mismatch";
                        }
                        // accept only spaces, digits and dashes
                        if (/[^0-9 \-]+/.test(value)) {
                            return false;
                        }
                        var nCheck = 0, nDigit = 0, bEven = false;
                        value = value.replace(/\D/g, "");
                        for (var n = value.length - 1; n >= 0; n--) {
                            var cDigit = value.charAt(n);
                            nDigit = parseInt(cDigit, 10);
                            if (bEven) {
                                if ((nDigit *= 2) > 9) {
                                    nDigit -= 9;
                                }
                            }
                            nCheck += nDigit;
                            bEven = !bEven;
                        }
                        return nCheck % 10 === 0;
                    },
                    // http://docs.jquery.com/Plugins/Validation/Methods/equalTo
                    equalTo: function(value, element, param) {
                        // bind to the blur event of the target in order to revalidate whenever the target field is updated
                        // TODO find a way to bind the event just once, avoiding the unbind-rebind overhead
                        var target = $(param);
                        if (this.settings.onfocusout) {
                            target.unbind(".validate-equalTo").bind("blur.validate-equalTo", function() {
                                $(element).valid();
                            });
                        }
                        return value === target.val();
                    }
                }
            });
            // deprecated, use $.validator.format instead
            $.format = $.validator.format;
        })(jQuery);
        // ajax mode: abort
        // usage: $.ajax({ mode: "abort"[, port: "uniqueport"]});
        // if mode:"abort" is used, the previous request on that port (port can be undefined) is aborted via XMLHttpRequest.abort()
        (function($) {
            var pendingRequests = {};
            // Use a prefilter if available (1.5+)
            if ($.ajaxPrefilter) {
                $.ajaxPrefilter(function(settings, _, xhr) {
                    var port = settings.port;
                    if (settings.mode === "abort") {
                        if (pendingRequests[port]) {
                            pendingRequests[port].abort();
                        }
                        pendingRequests[port] = xhr;
                    }
                });
            } else {
                // Proxy ajax
                var ajax = $.ajax;
                $.ajax = function(settings) {
                    var mode = ("mode" in settings ? settings : $.ajaxSettings).mode, port = ("port" in settings ? settings : $.ajaxSettings).port;
                    if (mode === "abort") {
                        if (pendingRequests[port]) {
                            pendingRequests[port].abort();
                        }
                        return pendingRequests[port] = ajax.apply(this, arguments);
                    }
                    return ajax.apply(this, arguments);
                };
            }
        })(jQuery);
        // provides cross-browser focusin and focusout events
        // IE has native support, in other browsers, use event caputuring (neither bubbles)
        // provides delegate(type: String, delegate: Selector, handler: Callback) plugin for easier event delegation
        // handler is only called when $(event.target).is(delegate), in the scope of the jquery-object for event.target
        (function($) {
            // only implement if not provided by jQuery core (since 1.4)
            // TODO verify if jQuery 1.4's implementation is compatible with older jQuery special-event APIs
            if (!jQuery.event.special.focusin && !jQuery.event.special.focusout && document.addEventListener) {
                $.each({
                    focus: "focusin",
                    blur: "focusout"
                }, function(original, fix) {
                    $.event.special[fix] = {
                        setup: function() {
                            this.addEventListener(original, handler, true);
                        },
                        teardown: function() {
                            this.removeEventListener(original, handler, true);
                        },
                        handler: function(e) {
                            var args = arguments;
                            args[0] = $.event.fix(e);
                            args[0].type = fix;
                            return $.event.handle.apply(this, args);
                        }
                    };
                    function handler(e) {
                        e = $.event.fix(e);
                        e.type = fix;
                        return $.event.handle.call(this, e);
                    }
                });
            }
            $.extend($.fn, {
                validateDelegate: function(delegate, type, handler) {
                    return this.bind(type, function(event) {
                        var target = $(event.target);
                        if (target.is(delegate)) {
                            return handler.apply(target, arguments);
                        }
                    });
                }
            });
        })(jQuery);
    };
});

/*
 * jQuery validate.password plug-in 1.0
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validate.password/
 *
 * Copyright (c) 2009 Jörn Zaefferer
 *
 * $Id$
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
define("ucloud/plugins/1.3.3/jquery-validate-password-debug", [], function(require, exports, module) {
    return function($) {
        var LOWER = /[a-z]/, UPPER = /[A-Z]/, DIGIT = /[0-9]/, DIGITS = /[0-9].*[0-9]/, SPECIAL = /[^a-zA-Z0-9]/, SAME = /^(.)\1+$/;
        function rating(rate, message) {
            return {
                rate: rate,
                messageKey: message
            };
        }
        function uncapitalize(str) {
            return str.substring(0, 1).toLowerCase() + str.substring(1);
        }
        var passwordRating = function(password, username) {
            if (!password || password.length < 8) return rating(0, "too-short");
            if (username && password.toLowerCase().match(username.toLowerCase())) return rating(0, "similar-to-username");
            if (SAME.test(password)) return rating(1, "very-weak");
            var lower = LOWER.test(password), upper = UPPER.test(uncapitalize(password)), digit = DIGIT.test(password), digits = DIGITS.test(password), special = SPECIAL.test(password);
            if (lower && upper && digit || lower && digits || upper && digits || special) return rating(4, "strong");
            if (lower && upper || lower && digit || upper && digit) return rating(3, "good");
            return rating(2, "weak");
        };
        passwordRating.messages = {
            "similar-to-username": "密码不能和用户名相同",
            "too-short": "弱:密码为8-16位",
            "very-weak": "太弱:试试字母,数字和标点混合",
            weak: "弱:试试字母,数字和标点混合",
            good: "中:试试字母,数字和标点混合",
            strong: "强:请牢记您的密码"
        };
        $.validator.addMethod("general_password", function(value, element, usernameField) {
            // use untrimmed value
            var password = element.value, // get username for comparison, if specified
            username = $(typeof usernameField != "boolean" ? usernameField : []);
            var rating = passwordRating(password, username.val());
            // update message for this field
            var meter = $(".password-meter", element.form);
            meter.find(".password-meter-bar").removeClass().addClass("password-meter-bar").addClass("password-meter-" + rating.messageKey);
            meter.find(".password-meter-message").removeClass().addClass("password-meter-message").addClass("password-meter-message-" + rating.messageKey).text(passwordRating.messages[rating.messageKey]);
            // display process bar instead of error message
            return rating.rate > 3;
        }, "&nbsp;");
    };
});

define("ucloud/plugins/1.3.3/zxcvbn-validate-password-debug", [ "ucloud/zxcvbn/1.0.1/zxcvbn-debug" ], function(require, exports, module) {
    var zxcvbn = require("ucloud/zxcvbn/1.0.1/zxcvbn-debug");
    return function($) {
        var word_map = [ "weak", "weak", "weak", "good", "strong" ];
        function rating(rate, message) {
            return {
                rate: rate,
                messageKey: message
            };
        }
        var passwordRating = function(password, exclude_regx) {
            /**
             * 检查排除字母项  
             */
            if (exclude_regx && exclude_regx.test(password)) return rating(-1, "exclude-char");
            var result = zxcvbn(password);
            return rating(result.score, word_map[result.score]);
        };
        passwordRating.messages = {
            "exclude-char": "密码不能包含 ",
            weak: "密码强度弱:",
            good: "良好:",
            strong: "强:"
        };
        passwordRating.show_safe_meter = {
            "exclude-char": "inline",
            "too-short": "inline",
            "very-weak": "inline",
            weak: "inline",
            good: "inline",
            strong: "inline"
        };
        $.validator.addMethod("zxpassword", function(value, element, exclude_regx) {
            // use untrimmed value
            var password = element.value;
            var rating = passwordRating(password, exclude_regx.regx);
            // update message for this field
            var meter = $(".password-meter", element.form);
            var rating_message = passwordRating.messages[rating.messageKey];
            if (rating.rate == -1) {
                rating_message += exclude_regx.message;
            }
            meter.find(".password-meter-bar").removeClass().addClass("password-meter-bar").addClass("password-meter-" + rating.messageKey);
            meter.find(".password-meter-message").removeClass().addClass("password-meter-message").addClass("password-meter-message-" + rating.messageKey).text(rating_message);
            meter.find(".password-meter-safe").css("display", passwordRating.show_safe_meter[rating.messageKey]);
            // display process bar instead of error message
            return rating.rate > 2;
        }, "&nbsp;");
    };
});

/*!
 * jQuery Validation Plugin 1.10.0
 *
 * http://bassistance.de/jquery-plugins/jquery-plugin-validation/
 * http://docs.jquery.com/Plugins/Validation
 *
 * Copyright (c) 2006 - 2011 Jörn Zaefferer
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
define("ucloud/plugins/1.3.3/additional-methods-debug", [], function() {
    return function(jQuery) {
        var $ = jQuery;
        function stripHtml(value) {
            // remove html tags and space chars
            return value.replace(/<.[^<>]*?>/g, " ").replace(/&nbsp;|&#160;/gi, " ").replace(/[.(),;:!?%#$'"_+=\/-]*/g, "");
        }
        jQuery.validator.addMethod("maxWords", function(value, element, params) {
            return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length <= params;
        }, jQuery.validator.format("Please enter {0} words or less."));
        jQuery.validator.addMethod("minWords", function(value, element, params) {
            return this.optional(element) || stripHtml(value).match(/\b\w+\b/g).length >= params;
        }, jQuery.validator.format("Please enter at least {0} words."));
        jQuery.validator.addMethod("rangeWords", function(value, element, params) {
            var valueStripped = stripHtml(value);
            var regex = /\b\w+\b/g;
            return this.optional(element) || valueStripped.match(regex).length >= params[0] && valueStripped.match(regex).length <= params[1];
        }, jQuery.validator.format("Please enter between {0} and {1} words."));
        jQuery.validator.addMethod("letterswithbasicpunc", function(value, element) {
            return this.optional(element) || /^[a-z\-.,()'\"\s]+$/i.test(value);
        }, "Letters or punctuation only please");
        jQuery.validator.addMethod("alphanumeric", function(value, element) {
            return this.optional(element) || /^\w+$/i.test(value);
        }, "Letters, numbers, and underscores only please");
        jQuery.validator.addMethod("lettersonly", function(value, element) {
            return this.optional(element) || /^[a-z]+$/i.test(value);
        }, "Letters only please");
        jQuery.validator.addMethod("nowhitespace", function(value, element) {
            return this.optional(element) || /^\S+$/i.test(value);
        }, "No white space please");
        jQuery.validator.addMethod("ziprange", function(value, element) {
            return this.optional(element) || /^90[2-5]\d\{2\}-\d{4}$/.test(value);
        }, "Your ZIP-code must be in the range 902xx-xxxx to 905-xx-xxxx");
        jQuery.validator.addMethod("zipcodeUS", function(value, element) {
            return this.optional(element) || /\d{5}-\d{4}$|^\d{5}$/.test(value);
        }, "The specified US ZIP Code is invalid");
        jQuery.validator.addMethod("integer", function(value, element) {
            return this.optional(element) || /^-?\d+$/.test(value);
        }, "A positive or negative non-decimal number please");
        /**
         * Return true, if the value is a valid vehicle identification number (VIN).
         *
         * Works with all kind of text inputs.
         *
         * @example <input type="text" size="20" name="VehicleID" class="{required:true,vinUS:true}" />
         * @desc Declares a required input element whose value must be a valid vehicle identification number.
         *
         * @name jQuery.validator.methods.vinUS
         * @type Boolean
         * @cat Plugins/Validate/Methods
         */
        jQuery.validator.addMethod("vinUS", function(v) {
            if (v.length != 17) {
                return false;
            }
            var i, n, d, f, cd, cdv;
            var LL = [ "A", "B", "C", "D", "E", "F", "G", "H", "J", "K", "L", "M", "N", "P", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];
            var VL = [ 1, 2, 3, 4, 5, 6, 7, 8, 1, 2, 3, 4, 5, 7, 9, 2, 3, 4, 5, 6, 7, 8, 9 ];
            var FL = [ 8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2 ];
            var rs = 0;
            for (i = 0; i < 17; i++) {
                f = FL[i];
                d = v.slice(i, i + 1);
                if (i == 8) {
                    cdv = d;
                }
                if (!isNaN(d)) {
                    d *= f;
                } else {
                    for (n = 0; n < LL.length; n++) {
                        if (d.toUpperCase() === LL[n]) {
                            d = VL[n];
                            d *= f;
                            if (isNaN(cdv) && n == 8) {
                                cdv = LL[n];
                            }
                            break;
                        }
                    }
                }
                rs += d;
            }
            cd = rs % 11;
            if (cd == 10) {
                cd = "X";
            }
            if (cd == cdv) {
                return true;
            }
            return false;
        }, "The specified vehicle identification number (VIN) is invalid.");
        /**
         * Return true, if the value is a valid date, also making this formal check dd/mm/yyyy.
         *
         * @example jQuery.validator.methods.date("01/01/1900")
         * @result true
         *
         * @example jQuery.validator.methods.date("01/13/1990")
         * @result false
         *
         * @example jQuery.validator.methods.date("01.01.1900")
         * @result false
         *
         * @example <input name="pippo" class="{dateITA:true}" />
         * @desc Declares an optional input element whose value must be a valid date.
         *
         * @name jQuery.validator.methods.dateITA
         * @type Boolean
         * @cat Plugins/Validate/Methods
         */
        jQuery.validator.addMethod("dateITA", function(value, element) {
            var check = false;
            var re = /^\d{1,2}\/\d{1,2}\/\d{4}$/;
            if (re.test(value)) {
                var adata = value.split("/");
                var gg = parseInt(adata[0], 10);
                var mm = parseInt(adata[1], 10);
                var aaaa = parseInt(adata[2], 10);
                var xdata = new Date(aaaa, mm - 1, gg);
                if (xdata.getFullYear() == aaaa && xdata.getMonth() == mm - 1 && xdata.getDate() == gg) check = true; else check = false;
            } else check = false;
            return this.optional(element) || check;
        }, "Please enter a correct date");
        jQuery.validator.addMethod("dateNL", function(value, element) {
            return this.optional(element) || /^\d\d?[\.\/-]\d\d?[\.\/-]\d\d\d?\d?$/.test(value);
        }, "Vul hier een geldige datum in.");
        jQuery.validator.addMethod("time", function(value, element) {
            return this.optional(element) || /^([0-1]\d|2[0-3]):([0-5]\d)$/.test(value);
        }, "Please enter a valid time, between 00:00 and 23:59");
        jQuery.validator.addMethod("time12h", function(value, element) {
            return this.optional(element) || /^((0?[1-9]|1[012])(:[0-5]\d){0,2}(\ [AP]M))$/i.test(value);
        }, "Please enter a valid time, between 00:00 am and 12:00 pm");
        /**
         * matches US phone number format
         *
         * where the area code may not start with 1 and the prefix may not start with 1
         * allows '-' or ' ' as a separator and allows parens around area code
         * some people may want to put a '1' in front of their number
         *
         * 1(212)-999-2345 or
         * 212 999 2344 or
         * 212-999-0983
         *
         * but not
         * 111-123-5434
         * and not
         * 212 123 4567
         */
        jQuery.validator.addMethod("phoneUS", function(phone_number, element) {
            phone_number = phone_number.replace(/\s+/g, "");
            return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(\+?1-?)?(\([2-9]\d{2}\)|[2-9]\d{2})-?[2-9]\d{2}-?\d{4}$/);
        }, "Please specify a valid phone number");
        jQuery.validator.addMethod("phoneUK", function(phone_number, element) {
            phone_number = phone_number.replace(/\(|\)|\s+|-/g, "");
            return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?)|(?:\(?0))(?:(?:\d{5}\)?\s?\d{4,5})|(?:\d{4}\)?\s?(?:\d{5}|\d{3}\s?\d{3}))|(?:\d{3}\)?\s?\d{3}\s?\d{3,4})|(?:\d{2}\)?\s?\d{4}\s?\d{4}))$/);
        }, "Please specify a valid phone number");
        jQuery.validator.addMethod("mobileUK", function(phone_number, element) {
            phone_number = phone_number.replace(/\s+|-/g, "");
            return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)7(?:[45789]\d{2}|624)\s?\d{3}\s?\d{3})$/);
        }, "Please specify a valid mobile number");
        //Matches UK landline + mobile, accepting only 01-3 for landline or 07 for mobile to exclude many premium numbers
        jQuery.validator.addMethod("phonesUK", function(phone_number, element) {
            phone_number = phone_number.replace(/\s+|-/g, "");
            return this.optional(element) || phone_number.length > 9 && phone_number.match(/^(?:(?:(?:00\s?|\+)44\s?|0)(?:1\d{8,9}|[23]\d{9}|7(?:[45789]\d{8}|624\d{6})))$/);
        }, "Please specify a valid uk phone number");
        // On the above three UK functions, do the following server side processing:
        //  Compare with ^((?:00\s?|\+)(44)\s?)?\(?0?(?:\)\s?)?([1-9]\d{1,4}\)?[\d\s]+)
        //  Extract $2 and set $prefix to '+44<space>' if $2 is '44' otherwise set $prefix to '0'
        //  Extract $3 and remove spaces and parentheses. Phone number is combined $2 and $3.
        // A number of very detailed GB telephone number RegEx patterns can also be found at:
        // http://www.aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_UK_Telephone_Numbers
        //Matches UK postcode. based on http://snipplr.com/view/3152/postcode-validation/
        jQuery.validator.addMethod("postcodeUK", function(postcode, element) {
            postcode = postcode.toUpperCase().replace(/\s+/g, "");
            return this.optional(element) || postcode.match(/^([^QZ][^IJZ]{0,1}\d{1,2})(\d[^CIKMOV]{2})$/) || postcode.match(/^([^QV]\d[ABCDEFGHJKSTUW])(\d[^CIKMOV]{2})$/) || postcode.match(/^([^QV][^IJZ]\d[ABEHMNPRVWXY])(\d[^CIKMOV]{2})$/) || postcode.match(/^(GIR)(0AA)$/) || postcode.match(/^(BFPO)(\d{1,4})$/) || postcode.match(/^(BFPO)(C\/O\d{1,3})$/);
        }, "Please specify a valid postcode");
        // TODO check if value starts with <, otherwise don't try stripping anything
        jQuery.validator.addMethod("strippedminlength", function(value, element, param) {
            return jQuery(value).text().length >= param;
        }, jQuery.validator.format("Please enter at least {0} characters"));
        // same as email, but TLD is optional
        jQuery.validator.addMethod("email2", function(value, element, param) {
            return this.optional(element) || /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i.test(value);
        }, jQuery.validator.messages.email);
        // same as url, but TLD is optional
        jQuery.validator.addMethod("url2", function(value, element, param) {
            return this.optional(element) || /^(https?|ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)*(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i.test(value);
        }, jQuery.validator.messages.url);
        // NOTICE: Modified version of Castle.Components.Validator.CreditCardValidator
        // Redistributed under the the Apache License 2.0 at http://www.apache.org/licenses/LICENSE-2.0
        // Valid Types: mastercard, visa, amex, dinersclub, enroute, discover, jcb, unknown, all (overrides all other settings)
        jQuery.validator.addMethod("creditcardtypes", function(value, element, param) {
            if (/[^0-9-]+/.test(value)) {
                return false;
            }
            value = value.replace(/\D/g, "");
            var validTypes = 0;
            if (param.mastercard) validTypes |= 1;
            if (param.visa) validTypes |= 2;
            if (param.amex) validTypes |= 4;
            if (param.dinersclub) validTypes |= 8;
            if (param.enroute) validTypes |= 16;
            if (param.discover) validTypes |= 32;
            if (param.jcb) validTypes |= 64;
            if (param.unknown) validTypes |= 128;
            if (param.all) validTypes = 1 | 2 | 4 | 8 | 16 | 32 | 64 | 128;
            if (validTypes & 1 && /^(5[12345])/.test(value)) {
                //mastercard
                return value.length == 16;
            }
            if (validTypes & 2 && /^(4)/.test(value)) {
                //visa
                return value.length == 16;
            }
            if (validTypes & 4 && /^(3[47])/.test(value)) {
                //amex
                return value.length == 15;
            }
            if (validTypes & 8 && /^(3(0[012345]|[68]))/.test(value)) {
                //dinersclub
                return value.length == 14;
            }
            if (validTypes & 16 && /^(2(014|149))/.test(value)) {
                //enroute
                return value.length == 15;
            }
            if (validTypes & 32 && /^(6011)/.test(value)) {
                //discover
                return value.length == 16;
            }
            if (validTypes & 64 && /^(3)/.test(value)) {
                //jcb
                return value.length == 16;
            }
            if (validTypes & 64 && /^(2131|1800)/.test(value)) {
                //jcb
                return value.length == 15;
            }
            if (validTypes & 128) {
                //unknown
                return true;
            }
            return false;
        }, "Please enter a valid credit card number.");
        jQuery.validator.addMethod("ipv4", function(value, element, param) {
            return this.optional(element) || /^(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)\.(25[0-5]|2[0-4]\d|[01]?\d\d?)$/i.test(value);
        }, "Please enter a valid IP v4 address.");
        jQuery.validator.addMethod("ipv6", function(value, element, param) {
            return this.optional(element) || /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/i.test(value);
        }, "Please enter a valid IP v6 address.");
        /**
         * Return true if the field value matches the given format RegExp
         *
         * @example jQuery.validator.methods.pattern("AR1004",element,/^AR\d{4}$/)
         * @result true
         *
         * @example jQuery.validator.methods.pattern("BR1004",element,/^AR\d{4}$/)
         * @result false
         *
         * @name jQuery.validator.methods.pattern
         * @type Boolean
         * @cat Plugins/Validate/Methods
         */
        jQuery.validator.addMethod("pattern", function(value, element, param) {
            if (this.optional(element)) {
                return true;
            }
            if (typeof param === "string") {
                param = new RegExp("^(?:" + param + ")$");
            }
            return param.test(value);
        }, "Invalid format.");
        /*
         * Lets you say "at least X inputs that match selector Y must be filled."
         *
         * The end result is that neither of these inputs:
         *
         *  <input class="productinfo" name="partnumber">
         *  <input class="productinfo" name="description">
         *
         *  ...will validate unless at least one of them is filled.
         *
         * partnumber:  {require_from_group: [1,".productinfo"]},
         * description: {require_from_group: [1,".productinfo"]}
         *
         */
        jQuery.validator.addMethod("require_from_group", function(value, element, options) {
            var validator = this;
            var selector = options[1];
            var validOrNot = $(selector, element.form).filter(function() {
                return validator.elementValue(this);
            }).length >= options[0];
            if (!$(element).data("being_validated")) {
                var fields = $(selector, element.form);
                fields.data("being_validated", true);
                fields.valid();
                fields.data("being_validated", false);
            }
            return validOrNot;
        }, jQuery.format("Please fill at least {0} of these fields."));
        /*
         * Lets you say "either at least X inputs that match selector Y must be filled,
         * OR they must all be skipped (left blank)."
         *
         * The end result, is that none of these inputs:
         *
         *  <input class="productinfo" name="partnumber">
         *  <input class="productinfo" name="description">
         *  <input class="productinfo" name="color">
         *
         *  ...will validate unless either at least two of them are filled,
         *  OR none of them are.
         *
         * partnumber:  {skip_or_fill_minimum: [2,".productinfo"]},
         *  description: {skip_or_fill_minimum: [2,".productinfo"]},
         * color:       {skip_or_fill_minimum: [2,".productinfo"]}
         *
         */
        jQuery.validator.addMethod("skip_or_fill_minimum", function(value, element, options) {
            var validator = this;
            numberRequired = options[0];
            selector = options[1];
            var numberFilled = $(selector, element.form).filter(function() {
                return validator.elementValue(this);
            }).length;
            var valid = numberFilled >= numberRequired || numberFilled === 0;
            if (!$(element).data("being_validated")) {
                var fields = $(selector, element.form);
                fields.data("being_validated", true);
                fields.valid();
                fields.data("being_validated", false);
            }
            return valid;
        }, jQuery.format("Please either skip these fields or fill at least {0} of them."));
        // Accept a value from a file input based on a required mimetype
        jQuery.validator.addMethod("accept", function(value, element, param) {
            // Split mime on commas incase we have multiple types we can accept
            var typeParam = typeof param === "string" ? param.replace(/,/g, "|") : "image/*", optionalValue = this.optional(element), i, file;
            // Element is optional
            if (optionalValue) {
                return optionalValue;
            }
            if ($(element).attr("type") === "file") {
                // If we are using a wildcard, make it regex friendly
                typeParam = typeParam.replace("*", ".*");
                // Check if the element has a FileList before checking each file
                if (element.files && element.files.length) {
                    for (i = 0; i < element.files.length; i++) {
                        file = element.files[i];
                        // Grab the mimtype from the loaded file, verify it matches
                        if (!file.type.match(new RegExp(".?(" + typeParam + ")$", "i"))) {
                            return false;
                        }
                    }
                }
            }
            // Either return true because we've validated each file, or because the
            // browser does not support element.files and the FileList feature
            return true;
        }, jQuery.format("Please enter a value with a valid mimetype."));
        // Older "accept" file extension method. Old docs: http://docs.jquery.com/Plugins/Validation/Methods/accept
        jQuery.validator.addMethod("extension", function(value, element, param) {
            param = typeof param === "string" ? param.replace(/,/g, "|") : "png|jpe?g|gif";
            return this.optional(element) || value.match(new RegExp(".(" + param + ")$", "i"));
        }, jQuery.format("Please enter a value with a valid extension."));
        /*---------------------------------------------------------------------*/
        /*设置默认属性 */
        function isIP(strIP) {
            if (!strIP) return false;
            var re = /^(\d+)\.(\d+)\.(\d+)\.(\d+)$/g;
            //匹配IP地址的正则表达式
            if (re.test(strIP)) {
                if (RegExp.$1 < 256 && RegExp.$2 < 256 && RegExp.$3 < 256 && RegExp.$4 < 256) return true;
            }
            return false;
        }
        function checkDomain(nname) {
            var arr = new Array(".com", ".net", ".org", ".biz", ".coop", ".info", ".museum", ".name", ".pro", ".edu", ".gov", ".int", ".mil", ".ac", ".ad", ".ae", ".af", ".ag", ".ai", ".al", ".am", ".an", ".ao", ".aq", ".ar", ".as", ".at", ".au", ".aw", ".az", ".ba", ".bb", ".bd", ".be", ".bf", ".bg", ".bh", ".bi", ".bj", ".bm", ".bn", ".bo", ".br", ".bs", ".bt", ".bv", ".bw", ".by", ".bz", ".ca", ".cc", ".cd", ".cf", ".cg", ".ch", ".ci", ".ck", ".cl", ".cm", ".cn", ".co", ".cr", ".cu", ".cv", ".cx", ".cy", ".cz", ".de", ".dj", ".dk", ".dm", ".do", ".dz", ".ec", ".ee", ".eg", ".eh", ".er", ".es", ".et", ".fi", ".fj", ".fk", ".fm", ".fo", ".fr", ".ga", ".gd", ".ge", ".gf", ".gg", ".gh", ".gi", ".gl", ".gm", ".gn", ".gp", ".gq", ".gr", ".gs", ".gt", ".gu", ".gv", ".gy", ".hk", ".hm", ".hn", ".hr", ".ht", ".hu", ".id", ".ie", ".il", ".im", ".in", ".io", ".iq", ".ir", ".is", ".it", ".je", ".jm", ".jo", ".jp", ".ke", ".kg", ".kh", ".ki", ".km", ".kn", ".kp", ".kr", ".kw", ".ky", ".kz", ".la", ".lb", ".lc", ".li", ".lk", ".lr", ".ls", ".lt", ".lu", ".lv", ".ly", ".ma", ".mc", ".md", ".mg", ".mh", ".mk", ".ml", ".mm", ".mn", ".mo", ".mp", ".mq", ".mr", ".ms", ".mt", ".mu", ".mv", ".mw", ".mx", ".my", ".mz", ".na", ".nc", ".ne", ".nf", ".ng", ".ni", ".nl", ".no", ".np", ".nr", ".nu", ".nz", ".om", ".pa", ".pe", ".pf", ".pg", ".ph", ".pk", ".pl", ".pm", ".pn", ".pr", ".ps", ".pt", ".pw", ".py", ".qa", ".re", ".ro", ".rw", ".ru", ".sa", ".sb", ".sc", ".sd", ".se", ".sg", ".sh", ".si", ".sj", ".sk", ".sl", ".sm", ".sn", ".so", ".sr", ".st", ".sv", ".sy", ".sz", ".tc", ".td", ".tf", ".tg", ".th", ".tj", ".tk", ".tm", ".tn", ".to", ".tp", ".tr", ".tt", ".tv", ".tw", ".tz", ".ua", ".ug", ".uk", ".um", ".us", ".uy", ".uz", ".va", ".vc", ".ve", ".vg", ".vi", ".vn", ".vu", ".ws", ".wf", ".ye", ".yt", ".yu", ".za", ".zm", ".zw", ".me");
            var mai = nname;
            var val = true;
            var dot = mai.lastIndexOf(".");
            var dname = mai.substring(0, dot);
            var ext = mai.substring(dot, mai.length);
            if (dot > 2 && dot < 57) {
                for (var i = 0; i < arr.length; i++) {
                    if (ext == arr[i]) {
                        val = true;
                        break;
                    } else {
                        val = false;
                    }
                }
                if (val == false) {
                    return false;
                } else {
                    for (var j = 0; j < dname.length; j++) {
                        var dh = dname.charAt(j);
                        var hh = dh.charCodeAt(0);
                        if (hh > 47 && hh < 59 || hh > 64 && hh < 91 || hh > 96 && hh < 123 || hh == 45 || hh == 46) {
                            if ((j == 0 || j == dname.length - 1) && hh == 45) {
                                return false;
                            }
                        } else {
                            return false;
                        }
                    }
                }
            } else {
                return false;
            }
            return true;
        }
        // 字符验证       
        jQuery.validator.addMethod("stringCheck", function(value, element) {
            return this.optional(element) || /^[\u0391-\uFFE5\w\W\s]+$/.test(value);
        }, "只能包括中文字、英文字母、数字和下划线");
        // 中文字两个字节       
        jQuery.validator.addMethod("byteRangeLength", function(value, element, param) {
            var length = value.length;
            for (var i = 0; i < value.length; i++) {
                if (value.charCodeAt(i) > 127) {
                    length++;
                }
            }
            return this.optional(element) || length >= param[0] && length <= param[1];
        }, "请确保输入的值在3-15个字节之间(一个中文字算2个字节)");
        // 身份证号码验证       
        jQuery.validator.addMethod("isIdCardNo", function(value, element) {
            return this.optional(element) || isIdCardNo(value);
        }, "请正确输入您的身份证号码");
        // 手机号码验证       
        jQuery.validator.addMethod("isMobile", function(value, element) {
            var length = value.length;
            var mobile = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
            var result = this.optional(element) || length == 11 && mobile.test(value);
            return this.optional(element) || length == 11 && mobile.test(value);
        }, "请正确填写您的手机号码");
        // 电话号码验证       
        jQuery.validator.addMethod("isTel", function(value, element) {
            var tel = /^\d{3,4}-?\d{7,9}$/;
            //电话号码格式010-12345678   
            return this.optional(element) || tel.test(value);
        }, "请正确填写您的电话号码");
        // 联系电话(手机/电话皆可)验证   
        jQuery.validator.addMethod("isPhone", function(value, element) {
            var length = value.length;
            var mobile = /^(((13[0-9]{1})|(15[0-9]{1})|(18[0-9]{1}))+\d{8})$/;
            var tel = /^\d{3,4}-?\d{7,9}$/;
            return this.optional(element) || tel.test(value) || mobile.test(value);
        }, "请正确填写您的联系电话");
        // 邮政编码验证       
        jQuery.validator.addMethod("isZipCode", function(value, element) {
            var tel = /^[0-9]{6}$/;
            return this.optional(element) || tel.test(value);
        }, "请正确填写您的邮政编码");
        jQuery.validator.addMethod("isWebsite", function(value, element) {
            var website = /^((https?|ftp|file):\/\/)?[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/;
            return this.optional(element) || website.test(value);
        }, "网址格式不正确");
        jQuery.validator.addMethod("url", function(value, element) {
            var website = /^((https?|ftp|file):\/\/)[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/;
            return this.optional(element) || website.test(value);
        }, "网址格式不正确");
        jQuery.validator.addMethod("iPOrDomain", function(value, element) {
            return this.optional(element) || isIP(value) || checkDomain(value);
        });
        jQuery.validator.addMethod("domain", function(value, element) {
            return this.optional(element) || checkDomain(value);
        });
        jQuery.validator.addMethod("ip", function(value, element) {
            return this.optional(element) || isIP(value);
        });
        jQuery.validator.addMethod("isPort", function(value, element) {
            var port = /^([0-9]|[1-9]\\d|[1-9]\\d{2}|[1-9]\\d{3}|[1-5]\\d{4}|6[0-4]\\d{3}|65[0-4]\\d{2}|655[0-2]\\d|6553[0-5])$/;
            return this.optional(element) || port.test(value);
        }, "请输入正确的端口号");
        jQuery.validator.addMethod("notEqual", function(value, element, param) {
            var target = $(param).unbind(".validate-notEqual").bind("blur.validate-notEqual", function() {
                $(element).valid();
            });
            return value != target.val();
        });
        jQuery.validator.addMethod("more_ip", function(value, element) {
            var url_list = value.split("|");
            for (var i = 0; i < url_list.length; i++) {
                if (!isIP(url_list[i]) && !checkDomain(url_list[i])) {
                    return false;
                }
            }
            return true;
        });
        // 字符验证       
        jQuery.validator.addMethod("simple_string", function(value, element) {
            return this.optional(element) || /^[a-zA-Z]\w+$/.test(value);
        }, "只能包括英文字母、数字和下划线");
        jQuery.validator.addMethod("exclude_word", function(value, element, params) {
            if (!this.optional(element) && params && params.length) {
                for (var i = 0; i < params.length; i++) {
                    if (element.value == params[i]) {
                        return false;
                    }
                }
            }
            return true;
        }, "不能包含此词汇");
    };
});

/**
 * Date.parse with progressive enhancement for ISO 8601 <https://github.com/csnover/js-iso8601>
 * © 2011 Colin Snover <http://zetafleet.com>
 * Released under MIT license.
 */
define("ucloud/plugins/1.3.3/iso8601-debug", [], function(require, exports, module) {
    var origParse = Date.parse, numericKeys = [ 1, 4, 5, 6, 7, 10, 11 ];
    Date.parse = function(date) {
        var timestamp, struct, minutesOffset = 0;
        // ES5 §15.9.4.2 states that the string should attempt to be parsed as a Date Time String Format string
        // before falling back to any implementation-specific date parsing, so that’s what we do, even if native
        // implementations could be faster
        //              1 YYYY                2 MM       3 DD           4 HH    5 mm       6 ss        7 msec        8 Z 9 ±    10 tzHH    11 tzmm
        if (struct = /^(\d{4}|[+\-]\d{6})(?:-(\d{2})(?:-(\d{2}))?)?(?:T(\d{2}):(\d{2})(?::(\d{2})(?:\.(\d{3}))?)?(?:(Z)|([+\-])(\d{2})(?::(\d{2}))?)?)?$/.exec(date)) {
            // avoid NaN timestamps caused by “undefined” values being passed to Date.UTC
            for (var i = 0, k; k = numericKeys[i]; ++i) {
                struct[k] = +struct[k] || 0;
            }
            // allow undefined days and months
            struct[2] = (+struct[2] || 1) - 1;
            struct[3] = +struct[3] || 1;
            if (struct[8] !== "Z" && struct[9] !== undefined) {
                minutesOffset = struct[10] * 60 + struct[11];
                if (struct[9] === "+") {
                    minutesOffset = 0 - minutesOffset;
                }
            }
            timestamp = Date.UTC(struct[1], struct[2], struct[3], struct[4], struct[5] + minutesOffset, struct[6], struct[7]);
        } else {
            timestamp = origParse ? origParse(date) : NaN;
        }
        return timestamp;
    };
});

define("ucloud/plugins/1.3.3/jquery-autocomplete-debug", [], function(require, exports, module) {
    return function($) {
        /*
         * jQuery Autocomplete plugin 1.1
         *
         * Copyright (c) 2009 Jörn Zaefferer
         *
         * Dual licensed under the MIT and GPL licenses:
         *   http://www.opensource.org/licenses/mit-license.php
         *   http://www.gnu.org/licenses/gpl.html
         *
         * Revision: $Id: jquery.autocomplete.js 15 2009-08-22 10:30:27Z joern.zaefferer $
         */
        $.fn.extend({
            autocomplete: function(urlOrData, options) {
                var isUrl = typeof urlOrData == "string";
                options = $.extend({}, $.Autocompleter.defaults, {
                    url: isUrl ? urlOrData : null,
                    data: isUrl ? null : urlOrData,
                    delay: isUrl ? $.Autocompleter.defaults.delay : 10,
                    max: options && !options.scroll ? 10 : 150
                }, options);
                // if highlight is set to false, replace it with a do-nothing function
                options.highlight = options.highlight || function(value) {
                    return value;
                };
                // if the formatMatch option is not specified, then use formatItem for backwards compatibility
                options.formatMatch = options.formatMatch || options.formatItem;
                return this.each(function() {
                    new $.Autocompleter(this, options);
                });
            },
            result: function(handler) {
                return this.bind("result", handler);
            },
            search: function(handler) {
                return this.trigger("search", [ handler ]);
            },
            flushCache: function() {
                return this.trigger("flushCache");
            },
            setOptions: function(options) {
                return this.trigger("setOptions", [ options ]);
            },
            unautocomplete: function() {
                return this.trigger("unautocomplete");
            }
        });
        $.Autocompleter = function(input, options) {
            var KEY = {
                UP: 38,
                DOWN: 40,
                DEL: 46,
                TAB: 9,
                RETURN: 13,
                ESC: 27,
                COMMA: 188,
                PAGEUP: 33,
                PAGEDOWN: 34,
                BACKSPACE: 8
            };
            // Create $ object for input element
            var $input = $(input).attr("autocomplete", "off").addClass(options.inputClass);
            var timeout;
            var previousValue = "";
            var cache = $.Autocompleter.Cache(options);
            var hasFocus = 0;
            var lastKeyPressCode;
            var config = {
                mouseDownOnSelect: false
            };
            var select = $.Autocompleter.Select(options, input, selectCurrent, config);
            var blockSubmit;
            // prevent form submit in opera when selecting with return key
            $.browser.opera && $(input.form).bind("submit.autocomplete", function() {
                if (blockSubmit) {
                    blockSubmit = false;
                    return false;
                }
            });
            // only opera doesn't trigger keydown multiple times while pressed, others don't work with keypress at all
            $input.bind(($.browser.opera ? "keypress" : "keydown") + ".autocomplete", function(event) {
                // a keypress means the input has focus
                // avoids issue where input had focus before the autocomplete was applied
                hasFocus = 1;
                // track last key pressed
                lastKeyPressCode = event.keyCode;
                switch (event.keyCode) {
                  case KEY.UP:
                    event.preventDefault();
                    if (select.visible()) {
                        select.prev();
                    } else {
                        onChange(0, true);
                    }
                    break;

                  case KEY.DOWN:
                    event.preventDefault();
                    if (select.visible()) {
                        select.next();
                    } else {
                        onChange(0, true);
                    }
                    break;

                  case KEY.PAGEUP:
                    event.preventDefault();
                    if (select.visible()) {
                        select.pageUp();
                    } else {
                        onChange(0, true);
                    }
                    break;

                  case KEY.PAGEDOWN:
                    event.preventDefault();
                    if (select.visible()) {
                        select.pageDown();
                    } else {
                        onChange(0, true);
                    }
                    break;

                  // matches also semicolon
                    case options.multiple && $.trim(options.multipleSeparator) == "," && KEY.COMMA:
                  case KEY.TAB:
                  case KEY.RETURN:
                    if (selectCurrent()) {
                        // stop default to prevent a form submit, Opera needs special handling
                        event.preventDefault();
                        blockSubmit = true;
                        return false;
                    }
                    break;

                  case KEY.ESC:
                    select.hide();
                    break;

                  default:
                    clearTimeout(timeout);
                    timeout = setTimeout(onChange, options.delay);
                    break;
                }
            }).focus(function() {
                // track whether the field has focus, we shouldn't process any
                // results if the field no longer has focus
                hasFocus++;
            }).blur(function() {
                hasFocus = 0;
                if (!config.mouseDownOnSelect) {
                    hideResults();
                }
            }).click(function() {
                // show select when clicking in a focused field
                if (++hasFocus > 1 && !select.visible()) {
                    onChange(0, true);
                }
            }).bind("search", function() {
                // TODO why not just specifying both arguments?
                var fn = arguments.length > 1 ? arguments[1] : null;
                function findValueCallback(q, data) {
                    var result;
                    if (data && data.length) {
                        for (var i = 0; i < data.length; i++) {
                            if (data[i].result.toLowerCase() == q.toLowerCase()) {
                                result = data[i];
                                break;
                            }
                        }
                    }
                    if (typeof fn == "function") fn(result); else $input.trigger("result", result && [ result.data, result.value ]);
                }
                $.each(trimWords($input.val()), function(i, value) {
                    request(value, findValueCallback, findValueCallback);
                });
            }).bind("flushCache", function() {
                cache.flush();
            }).bind("setOptions", function() {
                $.extend(options, arguments[1]);
                // if we've updated the data, repopulate
                if ("data" in arguments[1]) cache.populate();
            }).bind("unautocomplete", function() {
                select.unbind();
                $input.unbind();
                $(input.form).unbind(".autocomplete");
            });
            function selectCurrent() {
                var selected = select.selected();
                if (!selected) return false;
                var v = selected.result;
                previousValue = v;
                if (options.multiple) {
                    var words = trimWords($input.val());
                    if (words.length > 1) {
                        var seperator = options.multipleSeparator.length;
                        var cursorAt = $(input).selection().start;
                        var wordAt, progress = 0;
                        $.each(words, function(i, word) {
                            progress += word.length;
                            if (cursorAt <= progress) {
                                wordAt = i;
                                return false;
                            }
                            progress += seperator;
                        });
                        words[wordAt] = v;
                        // TODO this should set the cursor to the right position, but it gets overriden somewhere
                        //$.Autocompleter.Selection(input, progress + seperator, progress + seperator);
                        v = words.join(options.multipleSeparator);
                    }
                    v += options.multipleSeparator;
                }
                $input.val(v);
                hideResultsNow();
                $input.trigger("result", [ selected.data, selected.value ]);
                return true;
            }
            function onChange(crap, skipPrevCheck) {
                if (lastKeyPressCode == KEY.DEL) {
                    select.hide();
                    return;
                }
                var currentValue = $input.val();
                if (!skipPrevCheck && currentValue == previousValue) return;
                previousValue = currentValue;
                currentValue = lastWord(currentValue);
                if (currentValue.length >= options.minChars) {
                    $input.addClass(options.loadingClass);
                    if (!options.matchCase) currentValue = currentValue.toLowerCase();
                    request(currentValue, receiveData, hideResultsNow);
                } else {
                    stopLoading();
                    select.hide();
                }
            }
            function trimWords(value) {
                if (!value) return [ "" ];
                if (!options.multiple) return [ $.trim(value) ];
                return $.map(value.split(options.multipleSeparator), function(word) {
                    return $.trim(value).length ? $.trim(word) : null;
                });
            }
            function lastWord(value) {
                if (!options.multiple) return value;
                var words = trimWords(value);
                if (words.length == 1) return words[0];
                var cursorAt = $(input).selection().start;
                if (cursorAt == value.length) {
                    words = trimWords(value);
                } else {
                    words = trimWords(value.replace(value.substring(cursorAt), ""));
                }
                return words[words.length - 1];
            }
            // fills in the input box w/the first match (assumed to be the best match)
            // q: the term entered
            // sValue: the first matching result
            function autoFill(q, sValue) {
                // autofill in the complete box w/the first match as long as the user hasn't entered in more data
                // if the last user key pressed was backspace, don't autofill
                if (options.autoFill && lastWord($input.val()).toLowerCase() == q.toLowerCase() && lastKeyPressCode != KEY.BACKSPACE) {
                    // fill in the value (keep the case the user has typed)
                    $input.val($input.val() + sValue.substring(lastWord(previousValue).length));
                    // select the portion of the value not typed by the user (so the next character will erase)
                    $(input).selection(previousValue.length, previousValue.length + sValue.length);
                }
            }
            function hideResults() {
                clearTimeout(timeout);
                timeout = setTimeout(hideResultsNow, 200);
            }
            function hideResultsNow() {
                var wasVisible = select.visible();
                select.hide();
                clearTimeout(timeout);
                stopLoading();
                if (options.mustMatch) {
                    // call search and run callback
                    $input.search(function(result) {
                        // if no value found, clear the input box
                        if (!result) {
                            if (options.multiple) {
                                var words = trimWords($input.val()).slice(0, -1);
                                $input.val(words.join(options.multipleSeparator) + (words.length ? options.multipleSeparator : ""));
                            } else {
                                $input.val("");
                                $input.trigger("result", null);
                            }
                        }
                    });
                }
            }
            function receiveData(q, data) {
                if (data && data.length && hasFocus) {
                    stopLoading();
                    select.display(data, q);
                    autoFill(q, data[0].value);
                    select.show();
                } else {
                    hideResultsNow();
                }
            }
            function request(term, success, failure) {
                if (!options.matchCase) term = term.toLowerCase();
                var data = cache.load(term);
                // recieve the cached data
                if (data && data.length) {
                    success(term, data);
                } else if (typeof options.url == "string" && options.url.length > 0) {
                    var extraParams = {
                        timestamp: +new Date()
                    };
                    $.each(options.extraParams, function(key, param) {
                        extraParams[key] = typeof param == "function" ? param() : param;
                    });
                    $.ajax({
                        // try to leverage ajaxQueue plugin to abort previous requests
                        mode: "abort",
                        // limit abortion to this input
                        port: "autocomplete" + input.name,
                        dataType: options.dataType,
                        url: options.url,
                        data: $.extend({
                            q: lastWord(term),
                            limit: options.max
                        }, extraParams),
                        success: function(data) {
                            var parsed = options.parse && options.parse(data) || parse(data);
                            cache.add(term, parsed);
                            success(term, parsed);
                        }
                    });
                } else {
                    // if we have a failure, we need to empty the list -- this prevents the the [TAB] key from selecting the last successful match
                    select.emptyList();
                    failure(term);
                }
            }
            function parse(data) {
                var parsed = [];
                var rows = data.split("\n");
                for (var i = 0; i < rows.length; i++) {
                    var row = $.trim(rows[i]);
                    if (row) {
                        row = row.split("|");
                        parsed[parsed.length] = {
                            data: row,
                            value: row[0],
                            result: options.formatResult && options.formatResult(row, row[0]) || row[0]
                        };
                    }
                }
                return parsed;
            }
            function stopLoading() {
                $input.removeClass(options.loadingClass);
            }
        };
        $.Autocompleter.defaults = {
            inputClass: "ac_input",
            resultsClass: "ac_results",
            loadingClass: "ac_loading",
            minChars: 1,
            delay: 400,
            matchCase: false,
            matchSubset: true,
            matchContains: false,
            cacheLength: 10,
            max: 100,
            mustMatch: false,
            extraParams: {},
            selectFirst: true,
            formatItem: function(row) {
                return row[0];
            },
            formatMatch: null,
            autoFill: false,
            width: 0,
            multiple: false,
            multipleSeparator: ", ",
            highlight: function(value, term) {
                return value.replace(new RegExp("(?![^&;]+;)(?!<[^<>]*)(" + term.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1") + ")(?![^<>]*>)(?![^&;]+;)", "gi"), "<strong>$1</strong>");
            },
            scroll: true,
            scrollHeight: 180
        };
        $.Autocompleter.Cache = function(options) {
            var data = {};
            var length = 0;
            function matchSubset(s, sub) {
                if (!options.matchCase) s = s.toLowerCase();
                var i = s.indexOf(sub);
                if (options.matchContains == "word") {
                    i = s.toLowerCase().search("\\b" + sub.toLowerCase());
                }
                if (i == -1) return false;
                return i == 0 || options.matchContains;
            }
            function add(q, value) {
                if (length > options.cacheLength) {
                    flush();
                }
                if (!data[q]) {
                    length++;
                }
                data[q] = value;
            }
            function populate() {
                if (!options.data) return false;
                // track the matches
                var stMatchSets = {}, nullData = 0;
                // no url was specified, we need to adjust the cache length to make sure it fits the local data store
                if (!options.url) options.cacheLength = 1;
                // track all options for minChars = 0
                stMatchSets[""] = [];
                // loop through the array and create a lookup structure
                for (var i = 0, ol = options.data.length; i < ol; i++) {
                    var rawValue = options.data[i];
                    // if rawValue is a string, make an array otherwise just reference the array
                    rawValue = typeof rawValue == "string" ? [ rawValue ] : rawValue;
                    var value = options.formatMatch(rawValue, i + 1, options.data.length);
                    if (value === false) continue;
                    var firstChar = value.charAt(0).toLowerCase();
                    // if no lookup array for this character exists, look it up now
                    if (!stMatchSets[firstChar]) stMatchSets[firstChar] = [];
                    // if the match is a string
                    var row = {
                        value: value,
                        data: rawValue,
                        result: options.formatResult && options.formatResult(rawValue) || value
                    };
                    // push the current match into the set list
                    stMatchSets[firstChar].push(row);
                    // keep track of minChars zero items
                    if (nullData++ < options.max) {
                        stMatchSets[""].push(row);
                    }
                }
                // add the data items to the cache
                $.each(stMatchSets, function(i, value) {
                    // increase the cache size
                    options.cacheLength++;
                    // add to the cache
                    add(i, value);
                });
            }
            // populate any existing data
            setTimeout(populate, 25);
            function flush() {
                data = {};
                length = 0;
            }
            return {
                flush: flush,
                add: add,
                populate: populate,
                load: function(q) {
                    if (!options.cacheLength || !length) return null;
                    /* 
                     * if dealing w/local data and matchContains than we must make sure
                     * to loop through all the data collections looking for matches
                     */
                    if (!options.url && options.matchContains) {
                        // track all matches
                        var csub = [];
                        // loop through all the data grids for matches
                        for (var k in data) {
                            // don't search through the stMatchSets[""] (minChars: 0) cache
                            // this prevents duplicates
                            if (k.length > 0) {
                                var c = data[k];
                                $.each(c, function(i, x) {
                                    // if we've got a match, add it to the array
                                    if (matchSubset(x.value, q)) {
                                        csub.push(x);
                                    }
                                });
                            }
                        }
                        return csub;
                    } else // if the exact item exists, use it
                    if (data[q]) {
                        return data[q];
                    } else if (options.matchSubset) {
                        for (var i = q.length - 1; i >= options.minChars; i--) {
                            var c = data[q.substr(0, i)];
                            if (c) {
                                var csub = [];
                                $.each(c, function(i, x) {
                                    if (matchSubset(x.value, q)) {
                                        csub[csub.length] = x;
                                    }
                                });
                                return csub;
                            }
                        }
                    }
                    return null;
                }
            };
        };
        $.Autocompleter.Select = function(options, input, select, config) {
            var CLASSES = {
                ACTIVE: "ac_over"
            };
            var listItems, active = -1, data, term = "", needsInit = true, element, list;
            // Create results
            function init() {
                if (!needsInit) return;
                element = $("<div/>").hide().addClass(options.resultsClass).css("position", "absolute").appendTo(document.body);
                list = $("<ul/>").appendTo(element).mouseover(function(event) {
                    if (target(event).nodeName && target(event).nodeName.toUpperCase() == "LI") {
                        active = $("li", list).removeClass(CLASSES.ACTIVE).index(target(event));
                        $(target(event)).addClass(CLASSES.ACTIVE);
                    }
                }).click(function(event) {
                    $(target(event)).addClass(CLASSES.ACTIVE);
                    select();
                    // TODO provide option to avoid setting focus again after selection? useful for cleanup-on-focus
                    input.focus();
                    return false;
                }).mousedown(function() {
                    config.mouseDownOnSelect = true;
                }).mouseup(function() {
                    config.mouseDownOnSelect = false;
                });
                if (options.width > 0) element.css("width", options.width);
                needsInit = false;
            }
            function target(event) {
                var element = event.target;
                while (element && element.tagName != "LI") element = element.parentNode;
                // more fun with IE, sometimes event.target is empty, just ignore it then
                if (!element) return [];
                return element;
            }
            function moveSelect(step) {
                listItems.slice(active, active + 1).removeClass(CLASSES.ACTIVE);
                movePosition(step);
                var activeItem = listItems.slice(active, active + 1).addClass(CLASSES.ACTIVE);
                if (options.scroll) {
                    var offset = 0;
                    listItems.slice(0, active).each(function() {
                        offset += this.offsetHeight;
                    });
                    if (offset + activeItem[0].offsetHeight - list.scrollTop() > list[0].clientHeight) {
                        list.scrollTop(offset + activeItem[0].offsetHeight - list.innerHeight());
                    } else if (offset < list.scrollTop()) {
                        list.scrollTop(offset);
                    }
                }
            }
            function movePosition(step) {
                active += step;
                if (active < 0) {
                    active = listItems.size() - 1;
                } else if (active >= listItems.size()) {
                    active = 0;
                }
            }
            function limitNumberOfItems(available) {
                return options.max && options.max < available ? options.max : available;
            }
            function fillList() {
                list.empty();
                var max = limitNumberOfItems(data.length);
                for (var i = 0; i < max; i++) {
                    if (!data[i]) continue;
                    var formatted = options.formatItem(data[i].data, i + 1, max, data[i].value, term);
                    if (formatted === false) continue;
                    var li = $("<li/>").html(options.highlight(formatted, term)).addClass(i % 2 == 0 ? "ac_even" : "ac_odd").appendTo(list)[0];
                    $.data(li, "ac_data", data[i]);
                }
                listItems = list.find("li");
                if (options.selectFirst) {
                    listItems.slice(0, 1).addClass(CLASSES.ACTIVE);
                    active = 0;
                }
                // apply bgiframe if available
                if ($.fn.bgiframe) list.bgiframe();
            }
            return {
                display: function(d, q) {
                    init();
                    data = d;
                    term = q;
                    fillList();
                },
                next: function() {
                    moveSelect(1);
                },
                prev: function() {
                    moveSelect(-1);
                },
                pageUp: function() {
                    if (active != 0 && active - 8 < 0) {
                        moveSelect(-active);
                    } else {
                        moveSelect(-8);
                    }
                },
                pageDown: function() {
                    if (active != listItems.size() - 1 && active + 8 > listItems.size()) {
                        moveSelect(listItems.size() - 1 - active);
                    } else {
                        moveSelect(8);
                    }
                },
                hide: function() {
                    element && element.hide();
                    listItems && listItems.removeClass(CLASSES.ACTIVE);
                    active = -1;
                },
                visible: function() {
                    return element && element.is(":visible");
                },
                current: function() {
                    return this.visible() && (listItems.filter("." + CLASSES.ACTIVE)[0] || options.selectFirst && listItems[0]);
                },
                show: function() {
                    var offset = $(input).offset();
                    element.css({
                        width: typeof options.width == "string" || options.width > 0 ? options.width : $(input).width(),
                        top: offset.top + input.offsetHeight,
                        left: offset.left
                    }).show();
                    if (options.scroll) {
                        list.scrollTop(0);
                        list.css({
                            maxHeight: options.scrollHeight,
                            overflow: "auto"
                        });
                        if ($.browser.msie && typeof document.body.style.maxHeight === "undefined") {
                            var listHeight = 0;
                            listItems.each(function() {
                                listHeight += this.offsetHeight;
                            });
                            var scrollbarsVisible = listHeight > options.scrollHeight;
                            list.css("height", scrollbarsVisible ? options.scrollHeight : listHeight);
                            if (!scrollbarsVisible) {
                                // IE doesn't recalculate width when scrollbar disappears
                                listItems.width(list.width() - parseInt(listItems.css("padding-left")) - parseInt(listItems.css("padding-right")));
                            }
                        }
                    }
                },
                selected: function() {
                    var selected = listItems && listItems.filter("." + CLASSES.ACTIVE).removeClass(CLASSES.ACTIVE);
                    return selected && selected.length && $.data(selected[0], "ac_data");
                },
                emptyList: function() {
                    list && list.empty();
                },
                unbind: function() {
                    element && element.remove();
                }
            };
        };
        $.fn.selection = function(start, end) {
            if (start !== undefined) {
                return this.each(function() {
                    if (this.createTextRange) {
                        var selRange = this.createTextRange();
                        if (end === undefined || start == end) {
                            selRange.move("character", start);
                            selRange.select();
                        } else {
                            selRange.collapse(true);
                            selRange.moveStart("character", start);
                            selRange.moveEnd("character", end);
                            selRange.select();
                        }
                    } else if (this.setSelectionRange) {
                        this.setSelectionRange(start, end);
                    } else if (this.selectionStart) {
                        this.selectionStart = start;
                        this.selectionEnd = end;
                    }
                });
            }
            var field = this[0];
            if (field.createTextRange) {
                var range = document.selection.createRange(), orig = field.value, teststring = "<->", textLength = range.text.length;
                range.text = teststring;
                var caretAt = field.value.indexOf(teststring);
                field.value = orig;
                this.selection(caretAt, caretAt + textLength);
                return {
                    start: caretAt,
                    end: caretAt + textLength
                };
            } else if (field.selectionStart !== undefined) {
                return {
                    start: field.selectionStart,
                    end: field.selectionEnd
                };
            }
        };
    };
});

define("ucloud/plugins/1.3.3/jquery-dateformat-debug", [], function(require, exports, module) {
    return function($) {
        var jQuery = $;
        !function(jQuery) {
            var daysInWeek = [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ];
            var shortMonthsInYear = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
            var longMonthsInYear = [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ];
            var shortMonthsToNumber = [];
            shortMonthsToNumber["Jan"] = "01";
            shortMonthsToNumber["Feb"] = "02";
            shortMonthsToNumber["Mar"] = "03";
            shortMonthsToNumber["Apr"] = "04";
            shortMonthsToNumber["May"] = "05";
            shortMonthsToNumber["Jun"] = "06";
            shortMonthsToNumber["Jul"] = "07";
            shortMonthsToNumber["Aug"] = "08";
            shortMonthsToNumber["Sep"] = "09";
            shortMonthsToNumber["Oct"] = "10";
            shortMonthsToNumber["Nov"] = "11";
            shortMonthsToNumber["Dec"] = "12";
            jQuery.format = function() {
                function strDay(value) {
                    return daysInWeek[parseInt(value, 10)] || value;
                }
                function strMonth(value) {
                    var monthArrayIndex = parseInt(value, 10) - 1;
                    return shortMonthsInYear[monthArrayIndex] || value;
                }
                function strLongMonth(value) {
                    var monthArrayIndex = parseInt(value, 10) - 1;
                    return longMonthsInYear[monthArrayIndex] || value;
                }
                var parseMonth = function(value) {
                    return shortMonthsToNumber[value] || value;
                };
                var parseTime = function(value) {
                    var retValue = value;
                    var millis = "";
                    if (retValue.indexOf(".") !== -1) {
                        var delimited = retValue.split(".");
                        retValue = delimited[0];
                        millis = delimited[1];
                    }
                    var values3 = retValue.split(":");
                    if (values3.length === 3) {
                        hour = values3[0];
                        minute = values3[1];
                        second = values3[2];
                        return {
                            time: retValue,
                            hour: hour,
                            minute: minute,
                            second: second,
                            millis: millis
                        };
                    } else {
                        return {
                            time: "",
                            hour: "",
                            minute: "",
                            second: "",
                            millis: ""
                        };
                    }
                };
                return {
                    date: function(value, format) {
                        /* 
                         value = new java.util.Date()
                         2009-12-18 10:54:50.546 
                         */
                        try {
                            var date = null;
                            var year = null;
                            var month = null;
                            var dayOfMonth = null;
                            var dayOfWeek = null;
                            var time = null;
                            if (typeof value.getFullYear === "function") {
                                year = value.getFullYear();
                                month = value.getMonth() + 1;
                                dayOfMonth = value.getDate();
                                dayOfWeek = value.getDay();
                                time = parseTime(value.toTimeString());
                            } else if (value.search(/\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.?\d{0,3}[-+]?\d{2}:?\d{2}/) != -1) {
                                /* 2009-04-19T16:11:05+02:00 */
                                var values = value.split(/[T\+-]/);
                                year = values[0];
                                month = values[1];
                                dayOfMonth = values[2];
                                time = parseTime(values[3].split(".")[0]);
                                date = new Date(year, month - 1, dayOfMonth);
                                dayOfWeek = date.getDay();
                            } else {
                                var values = value.split(" ");
                                switch (values.length) {
                                  case 6:
                                    /* Wed Jan 13 10:43:41 CET 2010 */
                                    year = values[5];
                                    month = parseMonth(values[1]);
                                    dayOfMonth = values[2];
                                    time = parseTime(values[3]);
                                    date = new Date(year, month - 1, dayOfMonth);
                                    dayOfWeek = date.getDay();
                                    break;

                                  case 2:
                                    /* 2009-12-18 10:54:50.546 */
                                    var values2 = values[0].split("-");
                                    year = values2[0];
                                    month = values2[1];
                                    dayOfMonth = values2[2];
                                    time = parseTime(values[1]);
                                    date = new Date(year, month - 1, dayOfMonth);
                                    dayOfWeek = date.getDay();
                                    break;

                                  case 7:
                                  /* Tue Mar 01 2011 12:01:42 GMT-0800 (PST) */
                                    case 9:
                                  /*added by Larry, for Fri Apr 08 2011 00:00:00 GMT+0800 (China Standard Time) */
                                    case 10:
                                    /* added by Larry, for Fri Apr 08 2011 00:00:00 GMT+0200 (W. Europe Daylight Time) */
                                    year = values[3];
                                    month = parseMonth(values[1]);
                                    dayOfMonth = values[2];
                                    time = parseTime(values[4]);
                                    date = new Date(year, month - 1, dayOfMonth);
                                    dayOfWeek = date.getDay();
                                    break;

                                  default:
                                    return value;
                                }
                            }
                            var pattern = "";
                            var retValue = "";
                            var unparsedRest = "";
                            /*
                        Issue 1 - variable scope issue in format.date 
                        Thanks jakemonO
                        */
                            for (var i = 0; i < format.length; i++) {
                                var currentPattern = format.charAt(i);
                                pattern += currentPattern;
                                unparsedRest = "";
                                switch (pattern) {
                                  case "ddd":
                                    retValue += strDay(dayOfWeek);
                                    pattern = "";
                                    break;

                                  case "dd":
                                    if (format.charAt(i + 1) == "d") {
                                        break;
                                    }
                                    if (String(dayOfMonth).length === 1) {
                                        dayOfMonth = "0" + dayOfMonth;
                                    }
                                    retValue += dayOfMonth;
                                    pattern = "";
                                    break;

                                  case "d":
                                    if (format.charAt(i + 1) == "d") {
                                        break;
                                    }
                                    retValue += parseInt(dayOfMonth, 10);
                                    pattern = "";
                                    break;

                                  case "MMMM":
                                    retValue += strLongMonth(month);
                                    pattern = "";
                                    break;

                                  case "MMM":
                                    if (format.charAt(i + 1) === "M") {
                                        break;
                                    }
                                    retValue += strMonth(month);
                                    pattern = "";
                                    break;

                                  case "MM":
                                    if (format.charAt(i + 1) == "M") {
                                        break;
                                    }
                                    if (String(month).length === 1) {
                                        month = "0" + month;
                                    }
                                    retValue += month;
                                    pattern = "";
                                    break;

                                  case "yyyy":
                                    retValue += year;
                                    pattern = "";
                                    break;

                                  case "yy":
                                    if (format.charAt(i + 1) == "y" && format.charAt(i + 2) == "y") {
                                        break;
                                    }
                                    retValue += String(year).slice(-2);
                                    pattern = "";
                                    break;

                                  case "HH":
                                    retValue += time.hour;
                                    pattern = "";
                                    break;

                                  case "hh":
                                    /* time.hour is "00" as string == is used instead of === */
                                    var hour = time.hour == 0 ? 12 : time.hour < 13 ? time.hour : time.hour - 12;
                                    hour = String(hour).length == 1 ? "0" + hour : hour;
                                    retValue += hour;
                                    pattern = "";
                                    break;

                                  case "h":
                                    if (format.charAt(i + 1) == "h") {
                                        break;
                                    }
                                    var hour = time.hour == 0 ? 12 : time.hour < 13 ? time.hour : time.hour - 12;
                                    retValue += parseInt(hour, 10);
                                    // Fixing issue https://github.com/phstc/jquery-dateFormat/issues/21
                                    // retValue = parseInt(retValue, 10);
                                    pattern = "";
                                    break;

                                  case "mm":
                                    retValue += time.minute;
                                    pattern = "";
                                    break;

                                  case "ss":
                                    /* ensure only seconds are added to the return string */
                                    retValue += time.second.substring(0, 2);
                                    pattern = "";
                                    break;

                                  case "SSS":
                                    retValue += time.millis.substring(0, 3);
                                    pattern = "";
                                    break;

                                  case "a":
                                    retValue += time.hour >= 12 ? "PM" : "AM";
                                    pattern = "";
                                    break;

                                  case " ":
                                    retValue += currentPattern;
                                    pattern = "";
                                    break;

                                  case "/":
                                    retValue += currentPattern;
                                    pattern = "";
                                    break;

                                  case ":":
                                    retValue += currentPattern;
                                    pattern = "";
                                    break;

                                  default:
                                    if (pattern.length === 2 && pattern.indexOf("y") !== 0 && pattern != "SS") {
                                        retValue += pattern.substring(0, 1);
                                        pattern = pattern.substring(1, 2);
                                    } else if (pattern.length === 3 && pattern.indexOf("yyy") === -1) {
                                        pattern = "";
                                    } else {
                                        unparsedRest = pattern;
                                    }
                                    break;
                                }
                            }
                            retValue += unparsedRest;
                            return retValue;
                        } catch (e) {
                            return value;
                        }
                    }
                };
            }();
        }(jQuery);
        jQuery.format.date.defaultShortDateFormat = "dd/MM/yyyy";
        jQuery.format.date.defaultLongDateFormat = "dd/MM/yyyy hh:mm:ss";
        jQuery(document).ready(function() {
            jQuery(".shortDateFormat").each(function(idx, elem) {
                if (jQuery(elem).is(":input")) {
                    jQuery(elem).val(jQuery.format.date(jQuery(elem).val(), jQuery.format.date.defaultShortDateFormat));
                } else {
                    jQuery(elem).text(jQuery.format.date(jQuery(elem).text(), jQuery.format.date.defaultShortDateFormat));
                }
            });
            jQuery(".longDateFormat").each(function(idx, elem) {
                if (jQuery(elem).is(":input")) {
                    jQuery(elem).val(jQuery.format.date(jQuery(elem).val(), jQuery.format.date.defaultLongDateFormat));
                } else {
                    jQuery(elem).text(jQuery.format.date(jQuery(elem).text(), jQuery.format.date.defaultLongDateFormat));
                }
            });
        });
    };
});

define("ucloud/plugins/1.3.3/jquery-layout-debug", [], function() {
    return function($) {
        var jQuery = $;
        /*

 jquery.layout 1.3.0 - Release Candidate 30.74
 $Date: 2012-10-28 08:00:00 (Sun, 28 Oct 2012) $
 $Rev: 303007 $

 Copyright (c) 2012 
   Fabrizio Balliano (http://www.fabrizioballiano.net)
   Kevin Dalman (http://allpro.net)

 Dual licensed under the GPL (http://www.gnu.org/licenses/gpl.html)
 and MIT (http://www.opensource.org/licenses/mit-license.php) licenses.

 Changelog: http://layout.jquery-dev.net/changelog.cfm#1.3.0.rc30.74

 Docs: http://layout.jquery-dev.net/documentation.html
 Tips: http://layout.jquery-dev.net/tips.html
 Help: http://groups.google.com/group/jquery-ui-layout
*/
        (function(b) {
            var a = Math.min, d = Math.max, c = Math.floor, g = function(j) {
                return "string" === b.type(j);
            }, h = function(j, a) {
                if (b.isArray(a)) for (var d = 0, c = a.length; d < c; d++) {
                    var h = a[d];
                    try {
                        g(h) && (h = eval(h)), b.isFunction(h) && h(j);
                    } catch (p) {}
                }
            };
            b.layout = {
                version: "1.3.rc30.74",
                revision: .033007,
                browser: {
                    mozilla: !!b.browser.mozilla,
                    webkit: !!b.browser.webkit || !!b.browser.safari,
                    msie: !!b.browser.msie,
                    isIE6: b.browser.msie && 6 == b.browser.version,
                    boxModel: !1 !== b.support.boxModel || !b.browser.msie,
                    version: b.browser.version
                },
                effects: {
                    slide: {
                        all: {
                            duration: "fast"
                        },
                        north: {
                            direction: "up"
                        },
                        south: {
                            direction: "down"
                        },
                        east: {
                            direction: "right"
                        },
                        west: {
                            direction: "left"
                        }
                    },
                    drop: {
                        all: {
                            duration: "slow"
                        },
                        north: {
                            direction: "up"
                        },
                        south: {
                            direction: "down"
                        },
                        east: {
                            direction: "right"
                        },
                        west: {
                            direction: "left"
                        }
                    },
                    scale: {
                        all: {
                            duration: "fast"
                        }
                    },
                    blind: {},
                    clip: {},
                    explode: {},
                    fade: {},
                    fold: {},
                    puff: {},
                    size: {
                        all: {
                            easing: "swing"
                        }
                    }
                },
                config: {
                    optionRootKeys: "effects panes north south west east center".split(" "),
                    allPanes: [ "north", "south", "west", "east", "center" ],
                    borderPanes: [ "north", "south", "west", "east" ],
                    oppositeEdge: {
                        north: "south",
                        south: "north",
                        east: "west",
                        west: "east"
                    },
                    offscreenCSS: {
                        left: "-99999px",
                        right: "auto"
                    },
                    offscreenReset: "offscreenReset",
                    hidden: {
                        visibility: "hidden"
                    },
                    visible: {
                        visibility: "visible"
                    },
                    resizers: {
                        cssReq: {
                            position: "absolute",
                            padding: 0,
                            margin: 0,
                            fontSize: "1px",
                            textAlign: "left",
                            overflow: "hidden"
                        },
                        cssDemo: {
                            background: "#DDD",
                            border: "none"
                        }
                    },
                    togglers: {
                        cssReq: {
                            position: "absolute",
                            display: "block",
                            padding: 0,
                            margin: 0,
                            overflow: "hidden",
                            textAlign: "center",
                            fontSize: "1px",
                            cursor: "pointer",
                            zIndex: 1
                        },
                        cssDemo: {
                            background: "#AAA"
                        }
                    },
                    content: {
                        cssReq: {
                            position: "relative"
                        },
                        cssDemo: {
                            overflow: "auto",
                            padding: "10px"
                        },
                        cssDemoPane: {
                            overflow: "hidden",
                            padding: 0
                        }
                    },
                    panes: {
                        cssReq: {
                            position: "absolute",
                            margin: 0
                        },
                        cssDemo: {
                            padding: "10px",
                            background: "#FFF",
                            border: "1px solid #BBB",
                            overflow: "auto"
                        }
                    },
                    north: {
                        side: "top",
                        sizeType: "Height",
                        dir: "horz",
                        cssReq: {
                            top: 0,
                            bottom: "auto",
                            left: 0,
                            right: 0,
                            width: "auto"
                        }
                    },
                    south: {
                        side: "bottom",
                        sizeType: "Height",
                        dir: "horz",
                        cssReq: {
                            top: "auto",
                            bottom: 0,
                            left: 0,
                            right: 0,
                            width: "auto"
                        }
                    },
                    east: {
                        side: "right",
                        sizeType: "Width",
                        dir: "vert",
                        cssReq: {
                            left: "auto",
                            right: 0,
                            top: "auto",
                            bottom: "auto",
                            height: "auto"
                        }
                    },
                    west: {
                        side: "left",
                        sizeType: "Width",
                        dir: "vert",
                        cssReq: {
                            left: 0,
                            right: "auto",
                            top: "auto",
                            bottom: "auto",
                            height: "auto"
                        }
                    },
                    center: {
                        dir: "center",
                        cssReq: {
                            left: "auto",
                            right: "auto",
                            top: "auto",
                            bottom: "auto",
                            height: "auto",
                            width: "auto"
                        }
                    }
                },
                callbacks: {},
                getParentPaneElem: function(j) {
                    j = b(j);
                    if (j = j.data("layout") || j.data("parentLayout")) {
                        j = j.container;
                        if (j.data("layoutPane")) return j;
                        j = j.closest("." + b.layout.defaults.panes.paneClass);
                        if (j.data("layoutPane")) return j;
                    }
                    return null;
                },
                getParentPaneInstance: function(j) {
                    return (j = b.layout.getParentPaneElem(j)) ? j.data("layoutPane") : null;
                },
                getParentLayoutInstance: function(j) {
                    return (j = b.layout.getParentPaneElem(j)) ? j.data("parentLayout") : null;
                },
                getEventObject: function(b) {
                    return "object" === typeof b && b.stopPropagation ? b : null;
                },
                parsePaneName: function(j) {
                    var a = b.layout.getEventObject(j);
                    return a ? (a.stopPropagation(), b(this).data("layoutEdge")) : j;
                },
                plugins: {
                    draggable: !!b.fn.draggable,
                    effects: {
                        core: !!b.effects,
                        slide: b.effects && (b.effects.slide || b.effects.effect && b.effects.effect.slide)
                    }
                },
                onCreate: [],
                onLoad: [],
                onReady: [],
                onDestroy: [],
                onUnload: [],
                afterOpen: [],
                afterClose: [],
                scrollbarWidth: function() {
                    return window.scrollbarWidth || b.layout.getScrollbarSize("width");
                },
                scrollbarHeight: function() {
                    return window.scrollbarHeight || b.layout.getScrollbarSize("height");
                },
                getScrollbarSize: function(j) {
                    var a = b('<div style="position: absolute; top: -10000px; left: -10000px; width: 100px; height: 100px; overflow: scroll;"></div>').appendTo("body"), d = {
                        width: a.css("width") - a[0].clientWidth,
                        height: a.height() - a[0].clientHeight
                    };
                    a.remove();
                    window.scrollbarWidth = d.width;
                    window.scrollbarHeight = d.height;
                    return j.match(/^(width|height)$/) ? d[j] : d;
                },
                showInvisibly: function(b, a) {
                    if (b && b.length && (a || "none" === b.css("display"))) {
                        var d = b[0].style, d = {
                            display: d.display || "",
                            visibility: d.visibility || ""
                        };
                        b.css({
                            display: "block",
                            visibility: "hidden"
                        });
                        return d;
                    }
                    return {};
                },
                getElementDimensions: function(a, c) {
                    var g = {
                        css: {},
                        inset: {}
                    }, h = g.css, F = {
                        bottom: 0
                    }, p = b.layout.cssNum, A = a.offset(), x, D, z;
                    g.offsetLeft = A.left;
                    g.offsetTop = A.top;
                    c || (c = {});
                    b.each([ "Left", "Right", "Top", "Bottom" ], function(d, p) {
                        x = h["border" + p] = b.layout.borderWidth(a, p);
                        D = h["padding" + p] = b.layout.cssNum(a, "padding" + p);
                        z = p.toLowerCase();
                        g.inset[z] = 0 <= c[z] ? c[z] : D;
                        F[z] = g.inset[z] + x;
                    });
                    h.width = a.css("width");
                    h.height = a.height();
                    h.top = p(a, "top", !0);
                    h.bottom = p(a, "bottom", !0);
                    h.left = p(a, "left", !0);
                    h.right = p(a, "right", !0);
                    g.outerWidth = a.outerWidth();
                    g.outerHeight = a.outerHeight();
                    g.innerWidth = d(0, g.outerWidth - F.left - F.right);
                    g.innerHeight = d(0, g.outerHeight - F.top - F.bottom);
                    g.layoutWidth = a.innerWidth();
                    g.layoutHeight = a.innerHeight();
                    return g;
                },
                getElementStyles: function(b, a) {
                    var d = {}, c = b[0].style, g = a.split(","), p = [ "Top", "Bottom", "Left", "Right" ], h = [ "Color", "Style", "Width" ], x, D, z, T, C, t;
                    for (T = 0; T < g.length; T++) if (x = g[T], x.match(/(border|padding|margin)$/)) for (C = 0; 4 > C; C++) if (D = p[C], 
                    "border" === x) for (t = 0; 3 > t; t++) z = h[t], d[x + D + z] = c[x + D + z]; else d[x + D] = c[x + D]; else d[x] = c[x];
                    return d;
                },
                cssWidth: function(a, c) {
                    if (0 >= c) return 0;
                    if (!b.layout.browser.boxModel) return c;
                    var g = b.layout.borderWidth, h = b.layout.cssNum, g = c - g(a, "Left") - g(a, "Right") - h(a, "paddingLeft") - h(a, "paddingRight");
                    return d(0, g);
                },
                cssHeight: function(a, c) {
                    if (0 >= c) return 0;
                    if (!b.layout.browser.boxModel) return c;
                    var g = b.layout.borderWidth, h = b.layout.cssNum, g = c - g(a, "Top") - g(a, "Bottom") - h(a, "paddingTop") - h(a, "paddingBottom");
                    return d(0, g);
                },
                cssNum: function(a, d, c) {
                    a.jquery || (a = b(a));
                    var g = b.layout.showInvisibly(a), d = b.css(a[0], d, !0), c = c && "auto" == d ? d : Math.round(parseFloat(d) || 0);
                    a.css(g);
                    return c;
                },
                borderWidth: function(a, d) {
                    a.jquery && (a = a[0]);
                    var c = "border" + d.substr(0, 1).toUpperCase() + d.substr(1);
                    return "none" === b.css(a, c + "Style", !0) ? 0 : Math.round(parseFloat(b.css(a, c + "Width", !0)) || 0);
                },
                isMouseOverElem: function(a, d) {
                    var c = b(d || this), g = c.offset(), h = g.top, g = g.left, p = g + c.outerWidth(), c = h + c.outerHeight(), A = a.pageX, x = a.pageY;
                    return b.layout.browser.msie && 0 > A && 0 > x || A >= g && A <= p && x >= h && x <= c;
                },
                msg: function(a, d, c, g) {
                    b.isPlainObject(a) && window.debugData ? ("string" === typeof d ? (g = c, c = d) : "object" === typeof c && (g = c, 
                    c = null), c = c || "log( <object> )", g = b.extend({
                        sort: !1,
                        returnHTML: !1,
                        display: !1
                    }, g), !0 === d || g.display ? debugData(a, c, g) : window.console && console.log(debugData(a, c, g))) : d ? alert(a) : window.console ? console.log(a) : (d = b("#layoutLogger"), 
                    d.length || (d = b('<div id="layoutLogger" style="position: ' + (b.support.fixedPosition ? "fixed" : "absolute") + '; top: 5px; z-index: 999999; max-width: 25%; overflow: hidden; border: 1px solid #000; border-radius: 5px; background: #FBFBFB; box-shadow: 0 2px 10px rgba(0,0,0,0.3);"><div style="font-size: 13px; font-weight: bold; padding: 5px 10px; background: #F6F6F6; border-radius: 5px 5px 0 0; cursor: move;"><span style="float: right; padding-left: 7px; cursor: pointer;" title="Remove Console" onclick="$(this).closest(\'#layoutLogger\').remove()">X</span>Layout console.log</div><ul style="font-size: 13px; font-weight: none; list-style: none; margin: 0; padding: 0 0 2px;"></ul></div>').appendTo("body"), 
                    d.css("left", b(window).width() - d.outerWidth() - 5), b.ui.draggable && d.draggable({
                        handle: ":first-child"
                    })), d.children("ul").append('<li style="padding: 4px 10px; margin: 0; border-top: 1px solid #CCC;">' + a.replace(/\</g, "&lt;").replace(/\>/g, "&gt;") + "</li>"));
                }
            };
            b.layout.defaults = {
                name: "",
                containerClass: "ui-layout-container",
                inset: null,
                scrollToBookmarkOnLoad: !0,
                resizeWithWindow: !0,
                resizeWithWindowDelay: 200,
                resizeWithWindowMaxDelay: 0,
                maskPanesEarly: !1,
                onresizeall_start: null,
                onresizeall_end: null,
                onload_start: null,
                onload_end: null,
                onunload_start: null,
                onunload_end: null,
                initPanes: !0,
                showErrorMessages: !0,
                showDebugMessages: !1,
                zIndex: null,
                zIndexes: {
                    pane_normal: 0,
                    content_mask: 1,
                    resizer_normal: 2,
                    pane_sliding: 100,
                    pane_animate: 1e3,
                    resizer_drag: 1e4
                },
                errors: {
                    pane: "pane",
                    selector: "selector",
                    addButtonError: "Error Adding Button \n\nInvalid ",
                    containerMissing: "UI Layout Initialization Error\n\nThe specified layout-container does not exist.",
                    centerPaneMissing: "UI Layout Initialization Error\n\nThe center-pane element does not exist.\n\nThe center-pane is a required element.",
                    noContainerHeight: "UI Layout Initialization Warning\n\nThe layout-container \"CONTAINER\" has no height.\n\nTherefore the layout is 0-height and hence 'invisible'!",
                    callbackError: "UI Layout Callback Error\n\nThe EVENT callback is not a valid function."
                },
                panes: {
                    applyDemoStyles: !1,
                    closable: !0,
                    resizable: !0,
                    slidable: !0,
                    initClosed: !1,
                    initHidden: !1,
                    contentSelector: ".ui-layout-content",
                    contentIgnoreSelector: ".ui-layout-ignore",
                    findNestedContent: !1,
                    paneClass: "ui-layout-pane",
                    resizerClass: "ui-layout-resizer",
                    togglerClass: "ui-layout-toggler",
                    buttonClass: "ui-layout-button",
                    minSize: 0,
                    maxSize: 0,
                    spacing_open: 6,
                    spacing_closed: 6,
                    togglerLength_open: 50,
                    togglerLength_closed: 50,
                    togglerAlign_open: "center",
                    togglerAlign_closed: "center",
                    togglerContent_open: "",
                    togglerContent_closed: "",
                    resizerDblClickToggle: !0,
                    autoResize: !0,
                    autoReopen: !0,
                    resizerDragOpacity: 1,
                    maskContents: !1,
                    maskObjects: !1,
                    maskZindex: null,
                    resizingGrid: !1,
                    livePaneResizing: !1,
                    liveContentResizing: !1,
                    liveResizingTolerance: 1,
                    sliderCursor: "pointer",
                    slideTrigger_open: "click",
                    slideTrigger_close: "mouseleave",
                    slideDelay_open: 300,
                    slideDelay_close: 300,
                    hideTogglerOnSlide: !1,
                    preventQuickSlideClose: b.layout.browser.webkit,
                    preventPrematureSlideClose: !1,
                    tips: {
                        Open: "Open",
                        Close: "Close",
                        Resize: "Resize",
                        Slide: "Slide Open",
                        Pin: "Pin",
                        Unpin: "Un-Pin",
                        noRoomToOpen: "Not enough room to show this panel.",
                        minSizeWarning: "Panel has reached its minimum size",
                        maxSizeWarning: "Panel has reached its maximum size"
                    },
                    showOverflowOnHover: !1,
                    enableCursorHotkey: !0,
                    customHotkeyModifier: "SHIFT",
                    fxName: "slide",
                    fxSpeed: null,
                    fxSettings: {},
                    fxOpacityFix: !0,
                    animatePaneSizing: !1,
                    children: null,
                    containerSelector: "",
                    initChildren: !0,
                    destroyChildren: !0,
                    resizeChildren: !0,
                    triggerEventsOnLoad: !1,
                    triggerEventsDuringLiveResize: !0,
                    onshow_start: null,
                    onshow_end: null,
                    onhide_start: null,
                    onhide_end: null,
                    onopen_start: null,
                    onopen_end: null,
                    onclose_start: null,
                    onclose_end: null,
                    onresize_start: null,
                    onresize_end: null,
                    onsizecontent_start: null,
                    onsizecontent_end: null,
                    onswap_start: null,
                    onswap_end: null,
                    ondrag_start: null,
                    ondrag_end: null
                },
                north: {
                    paneSelector: ".ui-layout-north",
                    size: "auto",
                    resizerCursor: "n-resize",
                    customHotkey: ""
                },
                south: {
                    paneSelector: ".ui-layout-south",
                    size: "auto",
                    resizerCursor: "s-resize",
                    customHotkey: ""
                },
                east: {
                    paneSelector: ".ui-layout-east",
                    size: 200,
                    resizerCursor: "e-resize",
                    customHotkey: ""
                },
                west: {
                    paneSelector: ".ui-layout-west",
                    size: 200,
                    resizerCursor: "w-resize",
                    customHotkey: ""
                },
                center: {
                    paneSelector: ".ui-layout-center",
                    minWidth: 0,
                    minHeight: 0
                }
            };
            b.layout.optionsMap = {
                layout: "name instanceKey stateManagement effects inset zIndexes errors zIndex scrollToBookmarkOnLoad showErrorMessages maskPanesEarly outset resizeWithWindow resizeWithWindowDelay resizeWithWindowMaxDelay onresizeall onresizeall_start onresizeall_end onload onunload".split(" "),
                center: "paneClass contentSelector contentIgnoreSelector findNestedContent applyDemoStyles triggerEventsOnLoad showOverflowOnHover maskContents maskObjects liveContentResizing containerSelector children initChildren resizeChildren destroyChildren onresize onresize_start onresize_end onsizecontent onsizecontent_start onsizecontent_end".split(" "),
                noDefault: [ "paneSelector", "resizerCursor", "customHotkey" ]
            };
            b.layout.transformData = function(a, d) {
                var c = d ? {
                    panes: {},
                    center: {}
                } : {}, g, h, p, A, x, D, z;
                if ("object" !== typeof a) return c;
                for (h in a) {
                    g = c;
                    x = a[h];
                    p = h.split("__");
                    z = p.length - 1;
                    for (D = 0; D <= z; D++) A = p[D], D === z ? g[A] = b.isPlainObject(x) ? b.layout.transformData(x) : x : (g[A] || (g[A] = {}), 
                    g = g[A]);
                }
                return c;
            };
            b.layout.backwardCompatibility = {
                map: {
                    applyDefaultStyles: "applyDemoStyles",
                    childOptions: "children",
                    initChildLayout: "initChildren",
                    destroyChildLayout: "destroyChildren",
                    resizeChildLayout: "resizeChildren",
                    resizeNestedLayout: "resizeChildren",
                    resizeWhileDragging: "livePaneResizing",
                    resizeContentWhileDragging: "liveContentResizing",
                    triggerEventsWhileDragging: "triggerEventsDuringLiveResize",
                    maskIframesOnResize: "maskContents",
                    useStateCookie: "stateManagement.enabled",
                    "cookie.autoLoad": "stateManagement.autoLoad",
                    "cookie.autoSave": "stateManagement.autoSave",
                    "cookie.keys": "stateManagement.stateKeys",
                    "cookie.name": "stateManagement.cookie.name",
                    "cookie.domain": "stateManagement.cookie.domain",
                    "cookie.path": "stateManagement.cookie.path",
                    "cookie.expires": "stateManagement.cookie.expires",
                    "cookie.secure": "stateManagement.cookie.secure",
                    noRoomToOpenTip: "tips.noRoomToOpen",
                    togglerTip_open: "tips.Close",
                    togglerTip_closed: "tips.Open",
                    resizerTip: "tips.Resize",
                    sliderTip: "tips.Slide"
                },
                renameOptions: function(a) {
                    function d(b, c) {
                        for (var g = b.split("."), h = g.length - 1, p = {
                            branch: a,
                            key: g[h]
                        }, t = 0, q; t < h; t++) q = g[t], p.branch = void 0 == p.branch[q] ? c ? p.branch[q] = {} : {} : p.branch[q];
                        return p;
                    }
                    var c = b.layout.backwardCompatibility.map, g, h, p, A;
                    for (A in c) g = d(A), p = g.branch[g.key], void 0 !== p && (h = d(c[A], !0), h.branch[h.key] = p, 
                    delete g.branch[g.key]);
                },
                renameAllOptions: function(a) {
                    var d = b.layout.backwardCompatibility.renameOptions;
                    d(a);
                    a.defaults && ("object" !== typeof a.panes && (a.panes = {}), b.extend(!0, a.panes, a.defaults), 
                    delete a.defaults);
                    a.panes && d(a.panes);
                    b.each(b.layout.config.allPanes, function(b, c) {
                        a[c] && d(a[c]);
                    });
                    return a;
                }
            };
            b.fn.layout = function(j) {
                function B(e) {
                    if (!e) return !0;
                    var u = e.keyCode;
                    if (33 > u) return !0;
                    var n = {
                        38: "north",
                        40: "south",
                        37: "west",
                        39: "east"
                    }, a = e.shiftKey, f = e.ctrlKey, l, i, d, k;
                    f && 37 <= u && 40 >= u && t[n[u]].enableCursorHotkey ? k = n[u] : (f || a) && b.each(p.borderPanes, function(e, b) {
                        l = t[b];
                        i = l.customHotkey;
                        d = l.customHotkeyModifier;
                        if (a && "SHIFT" == d || f && "CTRL" == d || f && a) if (i && u === (isNaN(i) || 9 >= i ? i.toUpperCase().charCodeAt(0) : i)) return k = b, 
                        !1;
                    });
                    if (!k || !w[k] || !t[k].closable || q[k].isHidden) return !0;
                    ja(k);
                    e.stopPropagation();
                    return e.returnValue = !1;
                }
                function J(e) {
                    if (I()) {
                        this && this.tagName && (e = this);
                        var u;
                        g(e) ? u = w[e] : b(e).data("layoutRole") ? u = b(e) : b(e).parents().each(function() {
                            if (b(this).data("layoutRole")) return u = b(this), !1;
                        });
                        if (u && u.length) {
                            var n = u.data("layoutEdge"), e = q[n];
                            e.cssSaved && G(n);
                            if (e.isSliding || e.isResizing || e.isClosed) e.cssSaved = !1; else {
                                var a = {
                                    zIndex: t.zIndexes.resizer_normal + 1
                                }, f = {}, l = u.css("overflow"), i = u.css("overflowX"), d = u.css("overflowY");
                                "visible" != l && (f.overflow = l, a.overflow = "visible");
                                i && !i.match(/(visible|auto)/) && (f.overflowX = i, a.overflowX = "visible");
                                d && !d.match(/(visible|auto)/) && (f.overflowY = i, a.overflowY = "visible");
                                e.cssSaved = f;
                                u.css(a);
                                b.each(p.allPanes, function(e, b) {
                                    b != n && G(b);
                                });
                            }
                        }
                    }
                }
                function G(e) {
                    if (I()) {
                        this && this.tagName && (e = this);
                        var u;
                        g(e) ? u = w[e] : b(e).data("layoutRole") ? u = b(e) : b(e).parents().each(function() {
                            if (b(this).data("layoutRole")) return u = b(this), !1;
                        });
                        if (u && u.length) {
                            var e = u.data("layoutEdge"), e = q[e], n = e.cssSaved || {};
                            !e.isSliding && !e.isResizing && u.css("zIndex", t.zIndexes.pane_normal);
                            u.css(n);
                            e.cssSaved = !1;
                        }
                    }
                }
                var F = b.layout.browser, p = b.layout.config, A = b.layout.cssWidth, x = b.layout.cssHeight, D = b.layout.getElementDimensions, z = b.layout.getElementStyles, T = b.layout.getEventObject, C = b.layout.parsePaneName, t = b.extend(!0, {}, b.layout.defaults);
                t.effects = b.extend(!0, {}, b.layout.effects);
                var q = {
                    id: "layout" + b.now(),
                    initialized: !1,
                    paneResizing: !1,
                    panesSliding: {},
                    container: {
                        innerWidth: 0,
                        innerHeight: 0,
                        outerWidth: 0,
                        outerHeight: 0,
                        layoutWidth: 0,
                        layoutHeight: 0
                    },
                    north: {
                        childIdx: 0
                    },
                    south: {
                        childIdx: 0
                    },
                    east: {
                        childIdx: 0
                    },
                    west: {
                        childIdx: 0
                    },
                    center: {
                        childIdx: 0
                    }
                }, X = {
                    north: null,
                    south: null,
                    east: null,
                    west: null,
                    center: null
                }, N = {
                    data: {},
                    set: function(e, b, n) {
                        N.clear(e);
                        N.data[e] = setTimeout(b, n);
                    },
                    clear: function(e) {
                        var b = N.data;
                        b[e] && (clearTimeout(b[e]), delete b[e]);
                    }
                }, Y = function(e, u, n) {
                    var a = t;
                    (a.showErrorMessages && !n || n && a.showDebugMessages) && b.layout.msg(a.name + " / " + e, !1 !== u);
                    return !1;
                }, E = function(e, u, n) {
                    var a = u && g(u), f = a ? q[u] : q, l = a ? t[u] : t, i = t.name, d = e + (e.match(/_/) ? "" : "_end"), k = d.match(/_end$/) ? d.substr(0, d.length - 4) : "", r = l[d] || l[k], c = "NC", h = [];
                    !a && "boolean" === b.type(u) && (n = u, u = "");
                    if (r) try {
                        g(r) && (r.match(/,/) ? (h = r.split(","), r = eval(h[0])) : r = eval(r)), b.isFunction(r) && (c = h.length ? r(h[1]) : a ? r(u, w[u], f, l, i) : r(y, f, l, i));
                    } catch (p) {
                        Y(t.errors.callbackError.replace(/EVENT/, b.trim((u || "") + " " + d)), !1), "string" === b.type(p) && string.length && Y("Exception:  " + p, !1);
                    }
                    !n && !1 !== c && (a ? (n = w[u], l = t[u], f = q[u], n.triggerHandler("layoutpane" + d, [ u, n, f, l, i ]), 
                    k && n.triggerHandler("layoutpane" + k, [ u, n, f, l, i ])) : (m.triggerHandler("layout" + d, [ y, f, l, i ]), 
                    k && m.triggerHandler("layout" + k, [ y, f, l, i ])));
                    a && "onresize_end" === e && Za(u + "", !0);
                    return c;
                }, $a = function(e) {
                    if (!F.mozilla) {
                        var b = w[e];
                        "IFRAME" === q[e].tagName ? b.css(p.hidden).css(p.visible) : b.find("IFRAME").css(p.hidden).css(p.visible);
                    }
                }, ua = function(e) {
                    var b = w[e], e = p[e].dir, b = {
                        minWidth: 1001 - A(b, 1e3),
                        minHeight: 1001 - x(b, 1e3)
                    };
                    "horz" === e && (b.minSize = b.minHeight);
                    "vert" === e && (b.minSize = b.minWidth);
                    return b;
                }, ba = function(e, u, n) {
                    n || (n = p[e].dir);
                    g(u) && u.match(/%/) && (u = "100%" === u ? -1 : parseInt(u, 10) / 100);
                    if (0 === u) return 0;
                    if (1 <= u) return parseInt(u, 10);
                    var a = t, f = 0;
                    "horz" == n ? f = v.innerHeight - (w.north ? a.north.spacing_open : 0) - (w.south ? a.south.spacing_open : 0) : "vert" == n && (f = v.innerWidth - (w.west ? a.west.spacing_open : 0) - (w.east ? a.east.spacing_open : 0));
                    if (-1 === u) return f;
                    if (0 < u) return c(f * u);
                    if ("center" == e) return 0;
                    var n = "horz" === n ? "height" : "width", a = w[e], e = "height" === n ? Q[e] : !1, f = b.layout.showInvisibly(a), l = a.css(n), i = e ? e.css(n) : 0;
                    a.css(n, "auto");
                    e && e.css(n, "auto");
                    u = "height" === n ? a.outerHeight() : a.outerWidth();
                    a.css(n, l).css(f);
                    e && e.css(n, i);
                    return u;
                }, ca = function(e, b) {
                    var n = w[e], a = t[e], f = q[e], l = b ? a.spacing_open : 0, a = b ? a.spacing_closed : 0;
                    return !n || f.isHidden ? 0 : f.isClosed || f.isSliding && b ? a : "horz" === p[e].dir ? n.outerHeight() + l : n.outerWidth() + l;
                }, U = function(e, b) {
                    if (I()) {
                        var n = t[e], K = q[e], f = p[e], l = f.dir;
                        f.sizeType.toLowerCase();
                        var f = void 0 != b ? b : K.isSliding, i = n.spacing_open, c = p.oppositeEdge[e], k = q[c], r = w[c], g = !r || !1 === k.isVisible || k.isSliding ? 0 : "horz" == l ? r.outerHeight() : r.outerWidth(), c = (!r || k.isHidden ? 0 : t[c][!1 !== k.isClosed ? "spacing_closed" : "spacing_open"]) || 0, k = "horz" == l ? v.innerHeight : v.innerWidth, r = ua("center"), r = "horz" == l ? d(t.center.minHeight, r.minHeight) : d(t.center.minWidth, r.minWidth), f = k - i - (f ? 0 : ba("center", r, l) + g + c), l = K.minSize = d(ba(e, n.minSize), ua(e).minSize), f = K.maxSize = a(n.maxSize ? ba(e, n.maxSize) : 1e5, f), K = K.resizerPosition = {}, i = v.inset.top, g = v.inset.left, c = v.innerWidth, k = v.innerHeight, n = n.spacing_open;
                        switch (e) {
                          case "north":
                            K.min = i + l;
                            K.max = i + f;
                            break;

                          case "west":
                            K.min = g + l;
                            K.max = g + f;
                            break;

                          case "south":
                            K.min = i + k - f - n;
                            K.max = i + k - l - n;
                            break;

                          case "east":
                            K.min = g + c - f - n, K.max = g + c - l - n;
                        }
                    }
                }, Ha = function(e, u) {
                    var n = b(e), a = n.data("layoutRole"), f = n.data("layoutEdge"), l = t[f][a + "Class"], f = "-" + f, i = n.hasClass(l + "-closed") ? "-closed" : "-open", d = "-closed" === i ? "-open" : "-closed", i = l + "-hover " + (l + f + "-hover ") + (l + i + "-hover ") + (l + f + i + "-hover ");
                    u && (i += l + d + "-hover " + (l + f + d + "-hover "));
                    "resizer" == a && n.hasClass(l + "-sliding") && (i += l + "-sliding-hover " + (l + f + "-sliding-hover "));
                    return b.trim(i);
                }, Ia = function(e, u) {
                    var n = b(u || this);
                    e && "toggler" === n.data("layoutRole") && e.stopPropagation();
                    n.addClass(Ha(n));
                }, Z = function(e, u) {
                    var n = b(u || this);
                    n.removeClass(Ha(n, !0));
                }, ab = function() {
                    var e = b(this).data("layoutEdge"), u = q[e];
                    !u.isClosed && !u.isResizing && !q.paneResizing && (b.fn.disableSelection && b("body").disableSelection(), 
                    t.maskPanesEarly && qa(e, {
                        resizing: !0
                    }));
                }, bb = function(e, u) {
                    var n = u || this, a = b(n).data("layoutEdge"), f = a + "ResizerLeave";
                    N.clear(a + "_openSlider");
                    N.clear(f);
                    u ? q.paneResizing || (b.fn.enableSelection && b("body").enableSelection(), t.maskPanesEarly && va()) : N.set(f, function() {
                        bb(e, n);
                    }, 200);
                }, I = function() {
                    return q.initialized || q.creatingLayout ? !0 : wa();
                }, wa = function(e) {
                    var a = t;
                    if (!m.is(":visible")) return !e && F.webkit && "BODY" === m[0].tagName && setTimeout(function() {
                        wa(!0);
                    }, 50), !1;
                    if (!cb("center").length) return Y(a.errors.centerPaneMissing);
                    q.creatingLayout = !0;
                    b.extend(v, D(m, a.inset));
                    C(void 0);
                    b.each(p.allPanes, function(e, b) {
                        db(b, !0);
                    });
                    Ja();
                    b.each(p.borderPanes, function(e, b) {
                        w[b] && q[b].isVisible && (U(b), da(b));
                    });
                    ea("center");
                    b.each(p.allPanes, function(e, b) {
                        eb(b);
                    });
                    a.scrollToBookmarkOnLoad && (e = self.location, e.hash && e.replace(e.hash));
                    y.hasParentLayout ? a.resizeWithWindow = !1 : a.resizeWithWindow && b(window).bind("resize." + L, vb);
                    delete q.creatingLayout;
                    q.initialized = !0;
                    h(y, b.layout.onReady);
                    E("onload_end");
                    return !0;
                }, Ka = function(e, a) {
                    var n = C.call(this, e), d = w[n];
                    if (d) {
                        var f = Q[n], l = q[n], i = t[n], c = t.stateManagement || {}, i = a ? i.children = a : i.children;
                        if (b.isPlainObject(i)) i = [ i ]; else if (!i || !b.isArray(i)) return;
                        b.each(i, function(e, a) {
                            b.isPlainObject(a) && (a.containerSelector ? d.find(a.containerSelector) : f || d).each(function() {
                                var e = b(this), u = e.data("layout");
                                if (!u) {
                                    fb({
                                        container: e,
                                        options: a
                                    }, l);
                                    if (c.includeChildren && q.stateData[n]) {
                                        var u = (q.stateData[n].children || {})[a.instanceKey], f = a.stateManagement || (a.stateManagement = {
                                            autoLoad: !0
                                        });
                                        !0 === f.autoLoad && u && (f.autoSave = !1, f.includeChildren = !0, f.autoLoad = b.extend(!0, {}, u));
                                    }
                                    (u = e.layout(a)) && xa(n, u);
                                }
                            });
                        });
                    }
                }, fb = function(e, b) {
                    var a = e.container, d = e.options, f = d.stateManagement, l = d.instanceKey || a.data("layoutInstanceKey");
                    l || (l = (f && f.cookie ? f.cookie.name : "") || d.name);
                    l = l ? l.replace(/[^\w-]/gi, "_").replace(/_{2,}/g, "_") : "layout" + ++b.childIdx;
                    d.instanceKey = l;
                    a.data("layoutInstanceKey", l);
                    return l;
                }, xa = function(e, a) {
                    var n = w[e], d = X[e], f = q[e];
                    b.isPlainObject(d) && (b.each(d, function(e, b) {
                        b.destroyed && delete d[e];
                    }), b.isEmptyObject(d) && (d = X[e] = null));
                    !a && !d && (a = n.data("layout"));
                    a && (a.hasParentLayout = !0, n = a.options, fb(a, f), d || (d = X[e] = {}), d[n.instanceKey] = a.container.data("layout"));
                    y[e].children = X[e];
                    a || Ka(e);
                }, vb = function() {
                    var e = t, b = Number(e.resizeWithWindowDelay);
                    10 > b && (b = 100);
                    N.clear("winResize");
                    N.set("winResize", function() {
                        N.clear("winResize");
                        N.clear("winResizeRepeater");
                        var b = D(m, e.inset);
                        (b.innerWidth !== v.innerWidth || b.innerHeight !== v.innerHeight) && ka();
                    }, b);
                    N.data.winResizeRepeater || gb();
                }, gb = function() {
                    var e = Number(t.resizeWithWindowMaxDelay);
                    0 < e && N.set("winResizeRepeater", function() {
                        gb();
                        ka();
                    }, e);
                }, hb = function() {
                    E("onunload_start");
                    h(y, b.layout.onUnload);
                    E("onunload_end");
                }, ib = function(e) {
                    e = e ? e.split(",") : p.borderPanes;
                    b.each(e, function(e, a) {
                        var d = t[a];
                        if (d.enableCursorHotkey || d.customHotkey) return b(document).bind("keydown." + L, B), 
                        !1;
                    });
                }, cb = function(e) {
                    e = t[e].paneSelector;
                    if ("#" === e.substr(0, 1)) return m.find(e).eq(0);
                    var b = m.children(e).eq(0);
                    return b.length ? b : m.children("form:first").children(e).eq(0);
                }, db = function(e, b) {
                    if (b || I()) {
                        var n = t[e], c = q[e], f = p[e], l = f.dir, i = "center" === e, g = {}, k = w[e], r, h;
                        k ? La(e, !1, !0, !1) : Q[e] = !1;
                        k = w[e] = cb(e);
                        if (k.length) {
                            k.data("layoutCSS") || k.data("layoutCSS", z(k, "position,top,left,bottom,right,width,height,overflow,zIndex,display,backgroundColor,padding,margin,border"));
                            y[e] = {
                                name: e,
                                pane: w[e],
                                content: Q[e],
                                options: t[e],
                                state: q[e],
                                children: X[e]
                            };
                            k.data({
                                parentLayout: y,
                                layoutPane: y[e],
                                layoutEdge: e,
                                layoutRole: "pane"
                            }).css(f.cssReq).css("zIndex", t.zIndexes.pane_normal).css(n.applyDemoStyles ? f.cssDemo : {}).addClass(n.paneClass + " " + n.paneClass + "-" + e).bind("mouseenter." + L, Ia).bind("mouseleave." + L, Z);
                            f = {
                                hide: "",
                                show: "",
                                toggle: "",
                                close: "",
                                open: "",
                                slideOpen: "",
                                slideClose: "",
                                slideToggle: "",
                                size: "sizePane",
                                sizePane: "sizePane",
                                sizeContent: "",
                                sizeHandles: "",
                                enableClosable: "",
                                disableClosable: "",
                                enableSlideable: "",
                                disableSlideable: "",
                                enableResizable: "",
                                disableResizable: "",
                                swapPanes: "swapPanes",
                                swap: "swapPanes",
                                move: "swapPanes",
                                removePane: "removePane",
                                remove: "removePane",
                                createChildren: "",
                                resizeChildren: "",
                                resizeAll: "resizeAll",
                                resizeLayout: "resizeAll"
                            };
                            for (h in f) k.bind("layoutpane" + h.toLowerCase() + "." + L, y[f[h] || h]);
                            Ma(e, !1);
                            i || (r = c.size = ba(e, n.size), i = ba(e, n.minSize) || 1, h = ba(e, n.maxSize) || 1e5, 
                            0 < r && (r = d(a(r, h), i)), c.autoResize = n.autoResize, c.isClosed = !1, c.isSliding = !1, 
                            c.isResizing = !1, c.isHidden = !1, c.pins || (c.pins = []));
                            c.tagName = k[0].tagName;
                            c.edge = e;
                            c.noRoom = !1;
                            c.isVisible = !0;
                            jb(e);
                            "horz" === l ? g.height = x(k, r) : "vert" === l && (g.width = A(k, r));
                            k.css(g);
                            "horz" != l && ea(e, !0);
                            q.initialized && (Ja(e), ib(e));
                            n.initClosed && n.closable && !n.initHidden ? fa(e, !0, !0) : n.initHidden || n.initClosed ? Na(e) : c.noRoom || k.css("display", "block");
                            k.css("visibility", "visible");
                            n.showOverflowOnHover && k.hover(J, G);
                            q.initialized && eb(e);
                        } else w[e] = !1;
                    }
                }, eb = function(e) {
                    var b = w[e], a = q[e], d = t[e];
                    b && (b.data("layout") && xa(e, b.data("layout")), a.isVisible && (q.initialized ? ka() : la(e), 
                    d.triggerEventsOnLoad ? E("onresize_end", e) : Za(e, !0)), d.initChildren && d.children && Ka(e));
                }, jb = function(e) {
                    e = e ? e.split(",") : p.borderPanes;
                    b.each(e, function(e, b) {
                        var a = w[b], f = H[b], d = q[b], i = p[b].side, c = {};
                        if (a) {
                            switch (b) {
                              case "north":
                                c.top = v.inset.top;
                                c.left = v.inset.left;
                                c.right = v.inset.right;
                                break;

                              case "south":
                                c.bottom = v.inset.bottom;
                                c.left = v.inset.left;
                                c.right = v.inset.right;
                                break;

                              case "west":
                                c.left = v.inset.left;
                                break;

                              case "east":
                                c.right = v.inset.right;
                            }
                            a.css(c);
                            f && d.isClosed ? f.css(i, v.inset[i]) : f && !d.isHidden && f.css(i, v.inset[i] + ca(b));
                        }
                    });
                }, Ja = function(e) {
                    e = e ? e.split(",") : p.borderPanes;
                    b.each(e, function(e, a) {
                        var d = w[a];
                        H[a] = !1;
                        P[a] = !1;
                        if (d) {
                            var f = t[a], d = q[a], l = "#" === f.paneSelector.substr(0, 1) ? f.paneSelector.substr(1) : "", c = f.resizerClass, g = f.togglerClass, k = "-" + a, r = y[a], h = r.resizer = H[a] = b("<div></div>"), r = r.toggler = f.closable ? P[a] = b("<div></div>") : !1;
                            !d.isVisible && f.slidable && h.attr("title", f.tips.Slide).css("cursor", f.sliderCursor);
                            h.attr("id", l ? l + "-resizer" : "").data({
                                parentLayout: y,
                                layoutPane: y[a],
                                layoutEdge: a,
                                layoutRole: "resizer"
                            }).css(p.resizers.cssReq).css("zIndex", t.zIndexes.resizer_normal).css(f.applyDemoStyles ? p.resizers.cssDemo : {}).addClass(c + " " + c + k).hover(Ia, Z).hover(ab, bb).appendTo(m);
                            f.resizerDblClickToggle && h.bind("dblclick." + L, ja);
                            r && (r.attr("id", l ? l + "-toggler" : "").data({
                                parentLayout: y,
                                layoutPane: y[a],
                                layoutEdge: a,
                                layoutRole: "toggler"
                            }).css(p.togglers.cssReq).css(f.applyDemoStyles ? p.togglers.cssDemo : {}).addClass(g + " " + g + k).hover(Ia, Z).bind("mouseenter", ab).appendTo(h), 
                            f.togglerContent_open && b("<span>" + f.togglerContent_open + "</span>").data({
                                layoutEdge: a,
                                layoutRole: "togglerContent"
                            }).data("layoutRole", "togglerContent").data("layoutEdge", a).addClass("content content-open").css("display", "none").appendTo(r), 
                            f.togglerContent_closed && b("<span>" + f.togglerContent_closed + "</span>").data({
                                layoutEdge: a,
                                layoutRole: "togglerContent"
                            }).addClass("content content-closed").css("display", "none").appendTo(r), kb(a));
                            var f = a, j = b.layout.plugins.draggable, f = f ? f.split(",") : p.borderPanes;
                            b.each(f, function(e, a) {
                                var f = t[a];
                                if (!j || !w[a] || !f.resizable) return f.resizable = !1, !0;
                                var u = q[a], n = t.zIndexes, d = p[a], l = "horz" == d.dir ? "top" : "left", c = H[a], i = f.resizerClass, g = 0, k, r, h = i + "-drag", K = i + "-" + a + "-drag", ub = i + "-dragging", ta = i + "-" + a + "-dragging", v = i + "-dragging-limit", x = i + "-" + a + "-dragging-limit", A = !1;
                                u.isClosed || c.attr("title", f.tips.Resize).css("cursor", f.resizerCursor);
                                c.draggable({
                                    containment: m[0],
                                    axis: "horz" == d.dir ? "y" : "x",
                                    delay: 0,
                                    distance: 1,
                                    grid: f.resizingGrid,
                                    helper: "clone",
                                    opacity: f.resizerDragOpacity,
                                    addClasses: !1,
                                    zIndex: n.resizer_drag,
                                    start: function(e, n) {
                                        f = t[a];
                                        u = q[a];
                                        r = f.livePaneResizing;
                                        if (!1 === E("ondrag_start", a)) return !1;
                                        u.isResizing = !0;
                                        q.paneResizing = a;
                                        N.clear(a + "_closeSlider");
                                        U(a);
                                        k = u.resizerPosition;
                                        g = n.position[l];
                                        c.addClass(h + " " + K);
                                        A = !1;
                                        b("body").disableSelection();
                                        qa(a, {
                                            resizing: !0
                                        });
                                    },
                                    drag: function(e, b) {
                                        A || (b.helper.addClass(ub + " " + ta).css({
                                            right: "auto",
                                            bottom: "auto"
                                        }).children().css("visibility", "hidden"), A = !0, u.isSliding && w[a].css("zIndex", n.pane_sliding));
                                        var d = 0;
                                        b.position[l] < k.min ? (b.position[l] = k.min, d = -1) : b.position[l] > k.max && (b.position[l] = k.max, 
                                        d = 1);
                                        d ? (b.helper.addClass(v + " " + x), window.defaultStatus = 0 < d && a.match(/(north|west)/) || 0 > d && a.match(/(south|east)/) ? f.tips.maxSizeWarning : f.tips.minSizeWarning) : (b.helper.removeClass(v + " " + x), 
                                        window.defaultStatus = "");
                                        r && Math.abs(b.position[l] - g) >= f.liveResizingTolerance && (g = b.position[l], 
                                        aa(e, b, a));
                                    },
                                    stop: function(e, f) {
                                        b("body").enableSelection();
                                        window.defaultStatus = "";
                                        c.removeClass(h + " " + K);
                                        u.isResizing = !1;
                                        q.paneResizing = !1;
                                        aa(e, f, a, !0);
                                    }
                                });
                            });
                            var aa = function(b, e, a, f) {
                                var u = e.position, n = p[a], b = t[a], e = q[a], d;
                                switch (a) {
                                  case "north":
                                    d = u.top;
                                    break;

                                  case "west":
                                    d = u.left;
                                    break;

                                  case "south":
                                    d = v.layoutHeight - u.top - b.spacing_open;
                                    break;

                                  case "east":
                                    d = v.layoutWidth - u.left - b.spacing_open;
                                }
                                d -= v.inset[n.side];
                                f ? (!1 !== E("ondrag_end", a) && ya(a, d, !1, !0), va(!0), e.isSliding && qa(a, {
                                    resizing: !0
                                })) : Math.abs(d - e.size) < b.liveResizingTolerance || (ya(a, d, !1, !0), $.each(lb));
                            };
                            d.isVisible ? Oa(a) : (Pa(a), ia(a, !0));
                        }
                    });
                    ma();
                }, Ma = function(b, a) {
                    if (I()) {
                        var n = t[b], d = n.contentSelector, f = y[b], l = w[b], c;
                        d && (c = f.content = Q[b] = n.findNestedContent ? l.find(d).eq(0) : l.children(d).eq(0));
                        c && c.length ? (c.data("layoutRole", "content"), c.data("layoutCSS") || c.data("layoutCSS", z(c, "height")), 
                        c.css(p.content.cssReq), n.applyDemoStyles && (c.css(p.content.cssDemo), l.css(p.content.cssDemoPane)), 
                        l.css("overflowX").match(/(scroll|auto)/) && l.css("overflow", "hidden"), q[b].content = {}, 
                        !1 !== a && la(b)) : f.content = Q[b] = !1;
                    }
                }, lb = function() {
                    var e = b(this), a = e.data("layoutMask"), a = q[a];
                    "IFRAME" == a.tagName && a.isVisible && e.css({
                        top: a.offsetTop,
                        left: a.offsetLeft,
                        width: a.outerWidth,
                        height: a.outerHeight
                    });
                }, qa = function(e, a) {
                    var n = p[e], d = [ "center" ], f = t.zIndexes, c = b.extend({
                        objectsOnly: !1,
                        animation: !1,
                        resizing: !0,
                        sliding: q[e].isSliding
                    }, a), i, g;
                    c.resizing && d.push(e);
                    c.sliding && d.push(p.oppositeEdge[e]);
                    "horz" === n.dir && (d.push("west"), d.push("east"));
                    b.each(d, function(e, a) {
                        g = q[a];
                        i = t[a];
                        if (g.isVisible && (i.maskObjects || !c.objectsOnly && i.maskContents)) {
                            for (var n = b([]), u, d = 0, h = $.length; d < h; d++) u = $.eq(d), u.data("layoutMask") === a && (n = n.add(u));
                            if (!n.length) {
                                n = w[a];
                                u = q[a];
                                var d = t[a], h = t.zIndexes, K = b([]), p, j, v, x, A;
                                if (d.maskContents || d.maskObjects) for (A = 0; A < (d.maskObjects ? 2 : 1); A++) p = d.maskObjects && 0 == A, 
                                j = document.createElement(p ? "iframe" : "div"), v = b(j).data("layoutMask", a), 
                                j.className = "ui-layout-mask ui-layout-mask-" + a, x = j.style, x.display = "block", 
                                x.position = "absolute", x.background = "#FFF", p && (j.frameborder = 0, j.src = "about:blank", 
                                x.opacity = 0, x.filter = "Alpha(Opacity='0')", x.border = 0), "IFRAME" == u.tagName ? (x.zIndex = h.pane_normal + 1, 
                                m.append(j)) : (v.addClass("ui-layout-mask-inside-pane"), x.zIndex = d.maskZindex || h.content_mask, 
                                x.top = 0, x.left = 0, x.width = "100%", x.height = "100%", n.append(j)), K = K.add(j), 
                                $ = $.add(j);
                                n = K;
                            }
                            n.each(function() {
                                lb.call(this);
                                this.style.zIndex = g.isSliding ? f.pane_sliding + 1 : f.pane_normal + 1;
                                this.style.display = "block";
                            });
                        }
                    });
                }, va = function(e) {
                    if (e || !q.paneResizing) $.hide(); else if (!e && !b.isEmptyObject(q.panesSliding)) for (var e = $.length - 1, a, n; 0 <= e; e--) n = $.eq(e), 
                    a = n.data("layoutMask"), t[a].maskObjects || n.hide();
                }, La = function(e, a, n, d) {
                    if (I()) {
                        var e = C.call(this, e), f = w[e], c = Q[e], i = H[e], g = P[e];
                        f && b.isEmptyObject(f.data()) && (f = !1);
                        c && b.isEmptyObject(c.data()) && (c = !1);
                        i && b.isEmptyObject(i.data()) && (i = !1);
                        g && b.isEmptyObject(g.data()) && (g = !1);
                        f && f.stop(!0, !0);
                        var k = t[e], r = X[e], h = b.isPlainObject(r) && !b.isEmptyObject(r), d = void 0 !== d ? d : k.destroyChildren;
                        h && d && (b.each(r, function(b, e) {
                            e.destroyed || e.destroy(!0);
                            e.destroyed && delete r[b];
                        }), b.isEmptyObject(r) && (r = X[e] = null, h = !1));
                        f && a && !h ? f.remove() : f && f[0] && (a = k.paneClass, d = a + "-" + e, a = [ a, a + "-open", a + "-closed", a + "-sliding", d, d + "-open", d + "-closed", d + "-sliding" ], 
                        b.merge(a, Ha(f, !0)), f.removeClass(a.join(" ")).removeData("parentLayout").removeData("layoutPane").removeData("layoutRole").removeData("layoutEdge").removeData("autoHidden").unbind("." + L), 
                        h && c ? (c.width(c.width()), b.each(r, function(b, e) {
                            e.resizeAll();
                        })) : c && c.css(c.data("layoutCSS")).removeData("layoutCSS").removeData("layoutRole"), 
                        f.data("layout") || f.css(f.data("layoutCSS")).removeData("layoutCSS"));
                        g && g.remove();
                        i && i.remove();
                        y[e] = w[e] = Q[e] = H[e] = P[e] = !1;
                        n || ka();
                    }
                }, za = function(b) {
                    var a = w[b], d = a[0].style;
                    t[b].useOffscreenClose ? (a.data(p.offscreenReset) || a.data(p.offscreenReset, {
                        left: d.left,
                        right: d.right
                    }), a.css(p.offscreenCSS)) : a.hide().removeData(p.offscreenReset);
                }, mb = function(b) {
                    var a = w[b], b = t[b], d = p.offscreenCSS, c = a.data(p.offscreenReset), f = a[0].style;
                    a.show().removeData(p.offscreenReset);
                    b.useOffscreenClose && c && (f.left == d.left && (f.left = c.left), f.right == d.right && (f.right = c.right));
                }, Na = function(b, a) {
                    if (I()) {
                        var d = C.call(this, b), c = t[d], f = q[d], l = H[d];
                        w[d] && !f.isHidden && !(q.initialized && !1 === E("onhide_start", d)) && (f.isSliding = !1, 
                        delete q.panesSliding[d], l && l.hide(), !q.initialized || f.isClosed ? (f.isClosed = !0, 
                        f.isHidden = !0, f.isVisible = !1, q.initialized || za(d), ea("horz" === p[d].dir ? "" : "center"), 
                        (q.initialized || c.triggerEventsOnLoad) && E("onhide_end", d)) : (f.isHiding = !0, 
                        fa(d, !1, a)));
                    }
                }, Aa = function(b, a, d, c) {
                    if (I()) {
                        var b = C.call(this, b), f = q[b];
                        w[b] && f.isHidden && !1 !== E("onshow_start", b) && (f.isShowing = !0, f.isSliding = !1, 
                        delete q.panesSliding[b], !1 === a ? fa(b, !0) : na(b, !1, d, c));
                    }
                }, ja = function(b, a) {
                    if (I()) {
                        var d = T(b), c = C.call(this, b), f = q[c];
                        d && d.stopImmediatePropagation();
                        f.isHidden ? Aa(c) : f.isClosed ? na(c, !!a) : fa(c);
                    }
                }, fa = function(b, a, d, c) {
                    function f() {
                        k.isMoving = !1;
                        ia(l, !0);
                        var b = p.oppositeEdge[l];
                        q[b].noRoom && (U(b), da(b));
                        if (!c && (q.initialized || g.triggerEventsOnLoad)) h || E("onclose_end", l), h && E("onshow_end", l), 
                        j && E("onhide_end", l);
                    }
                    var l = C.call(this, b);
                    if (!q.initialized && w[l]) b = q[l], za(l), b.isClosed = !0, b.isVisible = !1; else if (I()) {
                        var i = w[l], g = t[l], k = q[l], r, h, j;
                        m.queue(function(b) {
                            if (!i || !g.closable && !k.isShowing && !k.isHiding || !a && k.isClosed && !k.isShowing) return b();
                            var e = !k.isShowing && !1 === E("onclose_start", l);
                            h = k.isShowing;
                            j = k.isHiding;
                            delete k.isShowing;
                            delete k.isHiding;
                            if (e) return b();
                            r = !d && !k.isClosed && "none" != g.fxName_close;
                            k.isMoving = !0;
                            k.isClosed = !0;
                            k.isVisible = !1;
                            j ? k.isHidden = !0 : h && (k.isHidden = !1);
                            k.isSliding ? ra(l, !1) : ea("horz" === p[l].dir ? "" : "center", !1);
                            Pa(l);
                            r ? (Ba(l, !0), i.hide(g.fxName_close, g.fxSettings_close, g.fxSpeed_close, function() {
                                Ba(l, !1);
                                k.isClosed && f();
                                b();
                            })) : (za(l), f(), b());
                        });
                    }
                }, Pa = function(a) {
                    var d = H[a], c = P[a], g = t[a], f = p[a].side, l = g.resizerClass, i = g.togglerClass, h = "-" + a;
                    d.css(f, v.inset[f]).removeClass(l + "-open " + l + h + "-open").removeClass(l + "-sliding " + l + h + "-sliding").addClass(l + "-closed " + l + h + "-closed");
                    g.resizable && b.layout.plugins.draggable && d.draggable("disable").removeClass("ui-state-disabled").css("cursor", "default").attr("title", "");
                    c && (c.removeClass(i + "-open " + i + h + "-open").addClass(i + "-closed " + i + h + "-closed").attr("title", g.tips.Open), 
                    c.children(".content-open").hide(), c.children(".content-closed").css("display", "block"));
                    Qa(a, !1);
                    q.initialized && ma();
                }, na = function(b, a, d, c) {
                    function f() {
                        k.isMoving = !1;
                        $a(l);
                        k.isSliding || ea("vert" == p[l].dir ? "center" : "", !1);
                        Oa(l);
                    }
                    if (I()) {
                        var l = C.call(this, b), g = w[l], h = t[l], k = q[l], r, j;
                        m.queue(function(b) {
                            if (!g || !h.resizable && !h.closable && !k.isShowing || k.isVisible && !k.isSliding) return b();
                            if (k.isHidden && !k.isShowing) b(), Aa(l, !0); else {
                                k.autoResize && k.size != h.size ? ga(l, h.size, !0, !0, !0) : U(l, a);
                                var e = E("onopen_start", l);
                                if ("abort" === e) return b();
                                "NC" !== e && U(l, a);
                                if (k.minSize > k.maxSize) return Qa(l, !1), !c && h.tips.noRoomToOpen && alert(h.tips.noRoomToOpen), 
                                b();
                                a ? ra(l, !0) : k.isSliding ? ra(l, !1) : h.slidable && ia(l, !1);
                                k.noRoom = !1;
                                da(l);
                                j = k.isShowing;
                                delete k.isShowing;
                                r = !d && k.isClosed && "none" != h.fxName_open;
                                k.isMoving = !0;
                                k.isVisible = !0;
                                k.isClosed = !1;
                                j && (k.isHidden = !1);
                                r ? (Ba(l, !0), g.show(h.fxName_open, h.fxSettings_open, h.fxSpeed_open, function() {
                                    Ba(l, !1);
                                    k.isVisible && f();
                                    b();
                                })) : (mb(l), f(), b());
                            }
                        });
                    }
                }, Oa = function(a, d) {
                    var c = w[a], g = H[a], f = P[a], l = t[a], i = q[a], h = p[a].side, k = l.resizerClass, r = l.togglerClass, j = "-" + a;
                    g.css(h, v.inset[h] + ca(a)).removeClass(k + "-closed " + k + j + "-closed").addClass(k + "-open " + k + j + "-open");
                    i.isSliding ? g.addClass(k + "-sliding " + k + j + "-sliding") : g.removeClass(k + "-sliding " + k + j + "-sliding");
                    Z(0, g);
                    l.resizable && b.layout.plugins.draggable ? g.draggable("enable").css("cursor", l.resizerCursor).attr("title", l.tips.Resize) : i.isSliding || g.css("cursor", "default");
                    f && (f.removeClass(r + "-closed " + r + j + "-closed").addClass(r + "-open " + r + j + "-open").attr("title", l.tips.Close), 
                    Z(0, f), f.children(".content-closed").hide(), f.children(".content-open").css("display", "block"));
                    Qa(a, !i.isSliding);
                    b.extend(i, D(c));
                    q.initialized && (ma(), la(a, !0));
                    if (!d && (q.initialized || l.triggerEventsOnLoad) && c.is(":visible")) E("onopen_end", a), 
                    i.isShowing && E("onshow_end", a), q.initialized && E("onresize_end", a);
                }, nb = function(b) {
                    function a() {
                        f.isClosed ? f.isMoving || na(c, !0) : ra(c, !0);
                    }
                    if (I()) {
                        var d = T(b), c = C.call(this, b), f = q[c], b = t[c].slideDelay_open;
                        d && d.stopImmediatePropagation();
                        f.isClosed && d && "mouseenter" === d.type && 0 < b ? N.set(c + "_openSlider", a, b) : a();
                    }
                }, Ra = function(a) {
                    function c() {
                        f.isClosed ? ra(g, !1) : f.isMoving || fa(g);
                    }
                    if (I()) {
                        var n = T(a), g = C.call(this, a), a = t[g], f = q[g], l = f.isMoving ? 1e3 : 300;
                        !f.isClosed && !f.isResizing && ("click" === a.slideTrigger_close ? c() : a.preventQuickSlideClose && f.isMoving || a.preventPrematureSlideClose && n && b.layout.isMouseOverElem(n, w[g]) || (n ? N.set(g + "_closeSlider", c, d(a.slideDelay_close, l)) : c()));
                    }
                }, Ba = function(b, a) {
                    var d = w[b], c = q[b], f = t[b], g = t.zIndexes;
                    a ? (qa(b, {
                        animation: !0,
                        objectsOnly: !0
                    }), d.css({
                        zIndex: g.pane_animate
                    }), "south" == b ? d.css({
                        top: v.inset.top + v.innerHeight - d.outerHeight()
                    }) : "east" == b && d.css({
                        left: v.inset.left + v.innerWidth - d.outerWidth()
                    })) : (va(), d.css({
                        zIndex: c.isSliding ? g.pane_sliding : g.pane_normal
                    }), "south" == b ? d.css({
                        top: "auto"
                    }) : "east" == b && !d.css("left").match(/\-99999/) && d.css({
                        left: "auto"
                    }), F.msie && f.fxOpacityFix && "slide" != f.fxName_open && d.css("filter") && 1 == d.css("opacity") && d[0].style.removeAttribute("filter"));
                }, ia = function(b, a) {
                    var d = t[b], c = H[b], f = d.slideTrigger_open.toLowerCase();
                    if (c && (!a || d.slidable)) {
                        f.match(/mouseover/) ? f = d.slideTrigger_open = "mouseenter" : f.match(/(click|dblclick|mouseenter)/) || (f = d.slideTrigger_open = "click");
                        if (d.resizerDblClickToggle && f.match(/click/)) c[a ? "unbind" : "bind"]("dblclick." + L, ja);
                        c[a ? "bind" : "unbind"](f + "." + L, nb).css("cursor", a ? d.sliderCursor : "default").attr("title", a ? d.tips.Slide : "");
                    }
                }, ra = function(b, a) {
                    function d(a) {
                        N.clear(b + "_closeSlider");
                        a.stopPropagation();
                    }
                    var c = t[b], f = q[b], g = t.zIndexes, i = c.slideTrigger_close.toLowerCase(), h = a ? "bind" : "unbind", k = w[b], r = H[b];
                    N.clear(b + "_closeSlider");
                    a ? (f.isSliding = !0, q.panesSliding[b] = !0, ia(b, !1)) : (f.isSliding = !1, delete q.panesSliding[b]);
                    k.css("zIndex", a ? g.pane_sliding : g.pane_normal);
                    r.css("zIndex", a ? g.pane_sliding + 2 : g.resizer_normal);
                    i.match(/(click|mouseleave)/) || (i = c.slideTrigger_close = "mouseleave");
                    r[h](i, Ra);
                    "mouseleave" === i && (k[h]("mouseleave." + L, Ra), r[h]("mouseenter." + L, d), 
                    k[h]("mouseenter." + L, d));
                    a ? "click" === i && !c.resizable && (r.css("cursor", a ? c.sliderCursor : "default"), 
                    r.attr("title", a ? c.tips.Close : "")) : N.clear(b + "_closeSlider");
                }, da = function(a, d, c, g) {
                    var d = t[a], f = q[a], l = p[a], i = w[a], h = H[a], k = "vert" === l.dir, r = !1;
                    if ("center" === a || k && f.noVerticalRoom) (r = 0 <= f.maxHeight) && f.noRoom ? (mb(a), 
                    h && h.show(), f.isVisible = !0, f.noRoom = !1, k && (f.noVerticalRoom = !1), $a(a)) : !r && !f.noRoom && (za(a), 
                    h && h.hide(), f.isVisible = !1, f.noRoom = !0);
                    "center" !== a && (f.minSize <= f.maxSize ? (f.size > f.maxSize ? ga(a, f.maxSize, c, !0, g) : f.size < f.minSize ? ga(a, f.minSize, c, !0, g) : h && f.isVisible && i.is(":visible") && (c = f.size + v.inset[l.side], 
                    b.layout.cssNum(h, l.side) != c && h.css(l.side, c)), f.noRoom && (f.wasOpen && d.closable ? d.autoReopen ? na(a, !1, !0, !0) : f.noRoom = !1 : Aa(a, f.wasOpen, !0, !0))) : f.noRoom || (f.noRoom = !0, 
                    f.wasOpen = !f.isClosed && !f.isSliding, f.isClosed || (d.closable ? fa(a, !0, !0) : Na(a, !0))));
                }, ya = function(b, a, d, c, f) {
                    if (I()) {
                        var b = C.call(this, b), g = t[b], h = q[b], f = f || g.livePaneResizing && !h.isResizing;
                        h.autoResize = !1;
                        ga(b, a, d, c, f);
                    }
                }, ga = function(e, c, g, h, f) {
                    function l() {
                        for (var a = "width" === aa ? r.outerWidth() : r.outerHeight(), a = [ {
                            pane: i,
                            count: 1,
                            target: c,
                            actual: a,
                            correct: c === a,
                            attempt: c,
                            cssSize: z
                        } ], e = a[0], h = {}, l = "Inaccurate size after resizing the " + i + "-pane."; !e.correct; ) {
                            h = {
                                pane: i,
                                count: e.count + 1,
                                target: c
                            };
                            h.attempt = e.actual > c ? d(0, e.attempt - (e.actual - c)) : d(0, e.attempt + (c - e.actual));
                            h.cssSize = ("horz" == p[i].dir ? x : A)(w[i], h.attempt);
                            r.css(aa, h.cssSize);
                            h.actual = "width" == aa ? r.outerWidth() : r.outerHeight();
                            h.correct = c === h.actual;
                            1 === a.length && (Y(l, !1, !0), Y(e, !1, !0));
                            Y(h, !1, !0);
                            if (3 < a.length) break;
                            a.push(h);
                            e = a[a.length - 1];
                        }
                        k.size = c;
                        b.extend(k, D(r));
                        k.isVisible && r.is(":visible") && (ta && ta.css(Ya, c + v.inset[Ya]), la(i));
                        !g && !B && q.initialized && k.isVisible && E("onresize_end", i);
                        g || (k.isSliding || ea("horz" == p[i].dir ? "" : "center", B, f), ma());
                        e = p.oppositeEdge[i];
                        c < F && q[e].noRoom && (U(e), da(e, !1, g));
                        1 < a.length && Y(l + "\nSee the Error Console for details.", !0, !0);
                    }
                    if (I()) {
                        var i = C.call(this, e), j = t[i], k = q[i], r = w[i], ta = H[i], Ya = p[i].side, aa = p[i].sizeType.toLowerCase(), B = k.isResizing && !j.triggerEventsDuringLiveResize, y = !0 !== h && j.animatePaneSizing, F, z;
                        m.queue(function(e) {
                            U(i);
                            F = k.size;
                            c = ba(i, c);
                            c = d(c, ba(i, j.minSize));
                            c = a(c, k.maxSize);
                            if (c < k.minSize) e(), da(i, !1, g); else {
                                if (!f && c === F) return e();
                                k.newSize = c;
                                !g && q.initialized && k.isVisible && E("onresize_start", i);
                                z = ("horz" == p[i].dir ? x : A)(w[i], c);
                                if (y && r.is(":visible")) {
                                    var h = b.layout.effects.size[i] || b.layout.effects.size.all, h = j.fxSettings_size.easing || h.easing, v = t.zIndexes, m = {};
                                    m[aa] = z + "px";
                                    k.isMoving = !0;
                                    r.css({
                                        zIndex: v.pane_animate
                                    }).show().animate(m, j.fxSpeed_size, h, function() {
                                        r.css({
                                            zIndex: k.isSliding ? v.pane_sliding : v.pane_normal
                                        });
                                        k.isMoving = !1;
                                        delete k.newSize;
                                        l();
                                        e();
                                    });
                                } else r.css(aa, z), delete k.newSize, r.is(":visible") ? l() : (k.size = c, b.extend(k, D(r))), 
                                e();
                            }
                        });
                    }
                }, ea = function(a, c, g) {
                    a = (a ? a : "east,west,center").split(",");
                    b.each(a, function(a, e) {
                        if (w[e]) {
                            var h = t[e], i = q[e], j = w[e], k = !0, r = {}, p = b.layout.showInvisibly(j), m = {
                                top: ca("north", !0),
                                bottom: ca("south", !0),
                                left: ca("west", !0),
                                right: ca("east", !0),
                                width: 0,
                                height: 0
                            };
                            m.width = v.innerWidth - m.left - m.right;
                            m.height = v.innerHeight - m.bottom - m.top;
                            m.top += v.inset.top;
                            m.bottom += v.inset.bottom;
                            m.left += v.inset.left;
                            m.right += v.inset.right;
                            b.extend(i, D(j));
                            if ("center" === e) {
                                if (!g && i.isVisible && m.width === i.outerWidth && m.height === i.outerHeight) return j.css(p), 
                                !0;
                                b.extend(i, ua(e), {
                                    maxWidth: m.width,
                                    maxHeight: m.height
                                });
                                r = m;
                                i.newWidth = r.width;
                                i.newHeight = r.height;
                                r.width = A(j, r.width);
                                r.height = x(j, r.height);
                                k = 0 <= r.width && 0 <= r.height;
                                if (!q.initialized && h.minWidth > m.width) {
                                    var h = h.minWidth - i.outerWidth, m = t.east.minSize || 0, B = t.west.minSize || 0, y = q.east.size, z = q.west.size, C = y, G = z;
                                    0 < h && q.east.isVisible && y > m && (C = d(y - m, y - h), h -= y - C);
                                    0 < h && q.west.isVisible && z > B && (G = d(z - B, z - h), h -= z - G);
                                    if (0 === h) {
                                        y && y != m && ga("east", C, !0, !0, g);
                                        z && z != B && ga("west", G, !0, !0, g);
                                        ea("center", c, g);
                                        j.css(p);
                                        return;
                                    }
                                }
                            } else {
                                i.isVisible && !i.noVerticalRoom && b.extend(i, D(j), ua(e));
                                if (!g && !i.noVerticalRoom && m.height === i.outerHeight) return j.css(p), !0;
                                r.top = m.top;
                                r.bottom = m.bottom;
                                i.newSize = m.height;
                                r.height = x(j, m.height);
                                i.maxHeight = r.height;
                                k = 0 <= i.maxHeight;
                                k || (i.noVerticalRoom = !0);
                            }
                            k ? (!c && q.initialized && E("onresize_start", e), j.css(r), "center" !== e && ma(e), 
                            i.noRoom && !i.isClosed && !i.isHidden && da(e), i.isVisible && (b.extend(i, D(j)), 
                            q.initialized && la(e))) : !i.noRoom && i.isVisible && da(e);
                            j.css(p);
                            delete i.newSize;
                            delete i.newWidth;
                            delete i.newHeight;
                            if (!i.isVisible) return !0;
                            "center" === e && (i = F.isIE6 || !F.boxModel, w.north && (i || "IFRAME" == q.north.tagName) && w.north.css("width", A(w.north, v.innerWidth)), 
                            w.south && (i || "IFRAME" == q.south.tagName) && w.south.css("width", A(w.south, v.innerWidth)));
                            !c && q.initialized && E("onresize_end", e);
                        }
                    });
                }, ka = function(a) {
                    C(a);
                    if (m.is(":visible")) if (q.initialized) {
                        if (!0 === a && b.isPlainObject(t.outset) && m.css(t.outset), b.extend(v, D(m, t.inset)), 
                        v.outerHeight) {
                            !0 === a && jb();
                            if (!1 === E("onresizeall_start")) return !1;
                            var d, c, g;
                            b.each([ "south", "north", "east", "west" ], function(b, a) {
                                w[a] && (c = t[a], g = q[a], g.autoResize && g.size != c.size ? ga(a, c.size, !0, !0, !0) : (U(a), 
                                da(a, !1, !0, !0)));
                            });
                            ea("", !0, !0);
                            ma();
                            b.each(p.allPanes, function(a, b) {
                                (d = w[b]) && q[b].isVisible && E("onresize_end", b);
                            });
                            E("onresizeall_end");
                        }
                    } else wa();
                }, Za = function(a, d) {
                    var c = C.call(this, a);
                    t[c].resizeChildren && (d || xa(c), c = X[c], b.isPlainObject(c) && b.each(c, function(b, a) {
                        a.resizeAll();
                    }));
                }, la = function(a, c) {
                    if (I()) {
                        var h = C.call(this, a), h = h ? h.split(",") : p.allPanes;
                        b.each(h, function(a, e) {
                            function h(a) {
                                return d(j.css.paddingBottom, parseInt(a.css("marginBottom"), 10) || 0);
                            }
                            function i() {
                                var a = t[e].contentIgnoreSelector, a = k.nextAll().not(".ui-layout-mask").not(a || ":lt(0)"), b = a.filter(":visible"), d = b.filter(":last");
                                m = {
                                    top: k[0].offsetTop,
                                    height: k.outerHeight(),
                                    numFooters: a.length,
                                    hiddenFooters: a.length - b.length,
                                    spaceBelow: 0
                                };
                                m.spaceAbove = m.top;
                                m.bottom = m.top + m.height;
                                m.spaceBelow = d.length ? d[0].offsetTop + d.outerHeight() - m.bottom + h(d) : h(k);
                            }
                            var n = w[e], k = Q[e], r = t[e], j = q[e], m = j.content;
                            if (!n || !k || !n.is(":visible")) return !0;
                            if (!k.length && (Ma(e, !1), !k)) return;
                            if (!1 !== E("onsizecontent_start", e)) {
                                if (!j.isMoving && !j.isResizing || r.liveContentResizing || c || void 0 == m.top) i(), 
                                0 < m.hiddenFooters && "hidden" === n.css("overflow") && (n.css("overflow", "visible"), 
                                i(), n.css("overflow", "hidden"));
                                n = j.innerHeight - (m.spaceAbove - j.css.paddingTop) - (m.spaceBelow - j.css.paddingBottom);
                                if (!k.is(":visible") || m.height != n) {
                                    var v = k, r = v;
                                    g(v) ? r = w[v] : v.jquery || (r = b(v));
                                    v = x(r, n);
                                    r.css({
                                        height: v,
                                        visibility: "visible"
                                    });
                                    0 < v && 0 < r.innerWidth() ? r.data("autoHidden") && (r.show().data("autoHidden", !1), 
                                    F.mozilla || r.css(p.hidden).css(p.visible)) : r.data("autoHidden") || r.hide().data("autoHidden", !0);
                                    m.height = n;
                                }
                                q.initialized && E("onsizecontent_end", e);
                            }
                        });
                    }
                }, ma = function(a) {
                    a = (a = C.call(this, a)) ? a.split(",") : p.borderPanes;
                    b.each(a, function(a, e) {
                        var d = t[e], f = q[e], h = w[e], i = H[e], j = P[e], k;
                        if (h && i) {
                            var r = p[e].dir, m = f.isClosed ? "_closed" : "_open", B = d["spacing" + m], y = d["togglerAlign" + m], m = d["togglerLength" + m], z;
                            if (0 === B) i.hide(); else {
                                !f.noRoom && !f.isHidden && i.show();
                                "horz" === r ? (z = v.innerWidth, f.resizerLength = z, h = b.layout.cssNum(h, "left"), 
                                i.css({
                                    width: A(i, z),
                                    height: x(i, B),
                                    left: -9999 < h ? h : v.inset.left
                                })) : (z = h.outerHeight(), f.resizerLength = z, i.css({
                                    height: x(i, z),
                                    width: A(i, B),
                                    top: v.inset.top + ca("north", !0)
                                }));
                                Z(d, i);
                                if (j) {
                                    if (0 === m || f.isSliding && d.hideTogglerOnSlide) {
                                        j.hide();
                                        return;
                                    }
                                    j.show();
                                    if (!(0 < m) || "100%" === m || m > z) m = z, y = 0; else if (g(y)) switch (y) {
                                      case "top":
                                      case "left":
                                        y = 0;
                                        break;

                                      case "bottom":
                                      case "right":
                                        y = z - m;
                                        break;

                                      default:
                                        y = c((z - m) / 2);
                                    } else h = parseInt(y, 10), y = 0 <= y ? h : z - m + h;
                                    if ("horz" === r) {
                                        var D = A(j, m);
                                        j.css({
                                            width: D,
                                            height: x(j, B),
                                            left: y,
                                            top: 0
                                        });
                                        j.children(".content").each(function() {
                                            k = b(this);
                                            k.css("marginLeft", c((D - k.outerWidth()) / 2));
                                        });
                                    } else {
                                        var C = x(j, m);
                                        j.css({
                                            height: C,
                                            width: A(j, B),
                                            top: y,
                                            left: 0
                                        });
                                        j.children(".content").each(function() {
                                            k = b(this);
                                            k.css("marginTop", c((C - k.outerHeight()) / 2));
                                        });
                                    }
                                    Z(0, j);
                                }
                                if (!q.initialized && (d.initHidden || f.noRoom)) i.hide(), j && j.hide();
                            }
                        }
                    });
                }, kb = function(a) {
                    if (I()) {
                        var b = C.call(this, a), a = P[b], d = t[b];
                        a && (d.closable = !0, a.bind("click." + L, function(a) {
                            a.stopPropagation();
                            ja(b);
                        }).css("visibility", "visible").css("cursor", "pointer").attr("title", q[b].isClosed ? d.tips.Open : d.tips.Close).show());
                    }
                }, Qa = function(a, d) {
                    b.layout.plugins.buttons && b.each(q[a].pins, function(c, g) {
                        b.layout.buttons.setPinState(y, b(g), a, d);
                    });
                }, m = b(this).eq(0);
                if (!m.length) return Y(t.errors.containerMissing);
                if (m.data("layoutContainer") && m.data("layout")) return m.data("layout");
                var w = {}, Q = {}, H = {}, P = {}, $ = b([]), v = q.container, L = q.id, y = {
                    options: t,
                    state: q,
                    container: m,
                    panes: w,
                    contents: Q,
                    resizers: H,
                    togglers: P,
                    hide: Na,
                    show: Aa,
                    toggle: ja,
                    open: na,
                    close: fa,
                    slideOpen: nb,
                    slideClose: Ra,
                    slideToggle: function(a) {
                        a = C.call(this, a);
                        ja(a, !0);
                    },
                    setSizeLimits: U,
                    _sizePane: ga,
                    sizePane: ya,
                    sizeContent: la,
                    swapPanes: function(a, c) {
                        function g(a) {
                            var d = w[a], c = Q[a];
                            return !d ? !1 : {
                                pane: a,
                                P: d ? d[0] : !1,
                                C: c ? c[0] : !1,
                                state: b.extend(!0, {}, q[a]),
                                options: b.extend(!0, {}, t[a])
                            };
                        }
                        function h(a, c) {
                            if (a) {
                                var e = a.P, f = a.C, g = a.pane, i = p[c], j = b.extend(!0, {}, q[c]), n = t[c], l = {
                                    resizerCursor: n.resizerCursor
                                };
                                b.each([ "fxName", "fxSpeed", "fxSettings" ], function(a, b) {
                                    l[b + "_open"] = n[b + "_open"];
                                    l[b + "_close"] = n[b + "_close"];
                                    l[b + "_size"] = n[b + "_size"];
                                });
                                w[c] = b(e).data({
                                    layoutPane: y[c],
                                    layoutEdge: c
                                }).css(p.hidden).css(i.cssReq);
                                Q[c] = f ? b(f) : !1;
                                t[c] = b.extend(!0, {}, a.options, l);
                                q[c] = b.extend(!0, {}, a.state);
                                e.className = e.className.replace(RegExp(n.paneClass + "-" + g, "g"), n.paneClass + "-" + c);
                                Ja(c);
                                i.dir != p[g].dir ? (e = m[c] || 0, U(c), e = d(e, q[c].minSize), ya(c, e, !0, !0)) : H[c].css(i.side, v.inset[i.side] + (q[c].isVisible ? ca(c) : 0));
                                a.state.isVisible && !j.isVisible ? Oa(c, !0) : (Pa(c), ia(c, !0));
                                a = null;
                            }
                        }
                        if (I()) {
                            var f = C.call(this, a);
                            q[f].edge = c;
                            q[c].edge = f;
                            if (!1 === E("onswap_start", f) || !1 === E("onswap_start", c)) q[f].edge = f, q[c].edge = c; else {
                                var j = g(f), i = g(c), m = {};
                                m[f] = j ? j.state.size : 0;
                                m[c] = i ? i.state.size : 0;
                                w[f] = !1;
                                w[c] = !1;
                                q[f] = {};
                                q[c] = {};
                                P[f] && P[f].remove();
                                P[c] && P[c].remove();
                                H[f] && H[f].remove();
                                H[c] && H[c].remove();
                                H[f] = H[c] = P[f] = P[c] = !1;
                                h(j, c);
                                h(i, f);
                                j = i = m = null;
                                w[f] && w[f].css(p.visible);
                                w[c] && w[c].css(p.visible);
                                ka();
                                E("onswap_end", f);
                                E("onswap_end", c);
                            }
                        }
                    },
                    showMasks: qa,
                    hideMasks: va,
                    initContent: Ma,
                    addPane: db,
                    removePane: La,
                    createChildren: Ka,
                    refreshChildren: xa,
                    enableClosable: kb,
                    disableClosable: function(a, b) {
                        if (I()) {
                            var c = C.call(this, a), d = P[c];
                            d && (t[c].closable = !1, q[c].isClosed && na(c, !1, !0), d.unbind("." + L).css("visibility", b ? "hidden" : "visible").css("cursor", "default").attr("title", ""));
                        }
                    },
                    enableSlidable: function(a) {
                        if (I()) {
                            var a = C.call(this, a), b = H[a];
                            b && b.data("draggable") && (t[a].slidable = !0, q[a].isClosed && ia(a, !0));
                        }
                    },
                    disableSlidable: function(a) {
                        if (I()) {
                            var a = C.call(this, a), b = H[a];
                            b && (t[a].slidable = !1, q[a].isSliding ? fa(a, !1, !0) : (ia(a, !1), b.css("cursor", "default").attr("title", ""), 
                            Z(null, b[0])));
                        }
                    },
                    enableResizable: function(a) {
                        if (I()) {
                            var a = C.call(this, a), b = H[a], c = t[a];
                            b && b.data("draggable") && (c.resizable = !0, b.draggable("enable"), q[a].isClosed || b.css("cursor", c.resizerCursor).attr("title", c.tips.Resize));
                        }
                    },
                    disableResizable: function(a) {
                        if (I()) {
                            var a = C.call(this, a), b = H[a];
                            b && b.data("draggable") && (t[a].resizable = !1, b.draggable("disable").css("cursor", "default").attr("title", ""), 
                            Z(null, b[0]));
                        }
                    },
                    allowOverflow: J,
                    resetOverflow: G,
                    destroy: function(a, c) {
                        b(window).unbind("." + L);
                        b(document).unbind("." + L);
                        "object" === typeof a ? C(a) : c = a;
                        m.clearQueue().removeData("layout").removeData("layoutContainer").removeClass(t.containerClass).unbind("." + L);
                        $.remove();
                        b.each(p.allPanes, function(a, b) {
                            La(b, !1, !0, c);
                        });
                        m.data("layoutCSS") && !m.data("layoutRole") && m.css(m.data("layoutCSS")).removeData("layoutCSS");
                        "BODY" === v.tagName && (m = b("html")).data("layoutCSS") && m.css(m.data("layoutCSS")).removeData("layoutCSS");
                        h(y, b.layout.onDestroy);
                        hb();
                        for (var d in y) d.match(/^(container|options)$/) || delete y[d];
                        y.destroyed = !0;
                        return y;
                    },
                    initPanes: I,
                    resizeAll: ka,
                    runCallbacks: E,
                    hasParentLayout: !1,
                    children: X,
                    north: !1,
                    south: !1,
                    west: !1,
                    east: !1,
                    center: !1
                }, Sa;
                var R, Ta, O, Ca, ha, oa, S, j = b.layout.transformData(j, !0), j = b.layout.backwardCompatibility.renameAllOptions(j);
                if (!b.isEmptyObject(j.panes)) {
                    R = b.layout.optionsMap.noDefault;
                    ha = 0;
                    for (oa = R.length; ha < oa; ha++) O = R[ha], delete j.panes[O];
                    R = b.layout.optionsMap.layout;
                    ha = 0;
                    for (oa = R.length; ha < oa; ha++) O = R[ha], delete j.panes[O];
                }
                R = b.layout.optionsMap.layout;
                var wb = b.layout.config.optionRootKeys;
                for (O in j) Ca = j[O], 0 > b.inArray(O, wb) && 0 > b.inArray(O, R) && (j.panes[O] || (j.panes[O] = b.isPlainObject(Ca) ? b.extend(!0, {}, Ca) : Ca), 
                delete j[O]);
                b.extend(!0, t, j);
                b.each(p.allPanes, function(a, c) {
                    p[c] = b.extend(!0, {}, p.panes, p[c]);
                    Ta = t.panes;
                    S = t[c];
                    if ("center" === c) {
                        R = b.layout.optionsMap.center;
                        a = 0;
                        for (oa = R.length; a < oa; a++) if (O = R[a], !j.center[O] && (j.panes[O] || !S[O])) S[O] = Ta[O];
                    } else {
                        S = t[c] = b.extend(!0, {}, Ta, S);
                        var d = t[c], g = t.panes;
                        d.fxSettings || (d.fxSettings = {});
                        g.fxSettings || (g.fxSettings = {});
                        b.each([ "_open", "_close", "_size" ], function(a, e) {
                            var h = "fxName" + e, j = "fxSpeed" + e, k = "fxSettings" + e, m = d[h] = d[h] || g[h] || d.fxName || g.fxName || "none", p = b.effects && (b.effects[m] || b.effects.effect && b.effects.effect[m]);
                            if ("none" === m || !t.effects[m] || !p) m = d[h] = "none";
                            m = t.effects[m] || {};
                            h = m.all || null;
                            m = m[c] || null;
                            d[j] = d[j] || g[j] || d.fxSpeed || g.fxSpeed || null;
                            d[k] = b.extend(!0, {}, h, m, g.fxSettings, d.fxSettings, g[k], d[k]);
                        });
                        delete d.fxName;
                        delete d.fxSpeed;
                        delete d.fxSettings;
                        S.resizerClass || (S.resizerClass = "ui-layout-resizer");
                        S.togglerClass || (S.togglerClass = "ui-layout-toggler");
                    }
                    S.paneClass || (S.paneClass = "ui-layout-pane");
                });
                var Da = j.zIndex, sa = t.zIndexes;
                0 < Da && (sa.pane_normal = Da, sa.content_mask = d(Da + 1, sa.content_mask), sa.resizer_normal = d(Da + 2, sa.resizer_normal));
                delete t.panes;
                var xb = t, ob = q;
                ob.creatingLayout = !0;
                h(y, b.layout.onCreate);
                if (!1 === E("onload_start")) Sa = "cancel"; else {
                    var Ua = m[0], V = b("html"), pb = v.tagName = Ua.tagName, qb = v.id = Ua.id, rb = v.className = Ua.className, M = t, Ea = M.name, Va = {}, Fa = m.data("parentLayout"), Ga = m.data("layoutEdge"), Wa = Fa && Ga, pa = b.layout.cssNum, Xa, W;
                    v.selector = m.selector.split(".slice")[0];
                    v.ref = (M.name ? M.name + " layout / " : "") + pb + (qb ? "#" + qb : rb ? ".[" + rb + "]" : "");
                    v.isBody = "BODY" === pb;
                    !Wa && !v.isBody && (Xa = m.closest("." + b.layout.defaults.panes.paneClass), Fa = Xa.data("parentLayout"), 
                    Ga = Xa.data("layoutEdge"), Wa = Fa && Ga);
                    m.data({
                        layout: y,
                        layoutContainer: L
                    }).addClass(M.containerClass);
                    var sb = {
                        destroy: "",
                        initPanes: "",
                        resizeAll: "resizeAll",
                        resize: "resizeAll"
                    };
                    for (Ea in sb) m.bind("layout" + Ea.toLowerCase() + "." + L, y[sb[Ea] || Ea]);
                    Wa && (y.hasParentLayout = !0, Fa.refreshChildren(Ga, y));
                    m.data("layoutCSS") || (v.isBody ? (m.data("layoutCSS", b.extend(z(m, "position,margin,padding,border"), {
                        height: m.css("height"),
                        overflow: m.css("overflow"),
                        overflowX: m.css("overflowX"),
                        overflowY: m.css("overflowY")
                    })), V.data("layoutCSS", b.extend(z(V, "padding"), {
                        height: "auto",
                        overflow: V.css("overflow"),
                        overflowX: V.css("overflowX"),
                        overflowY: V.css("overflowY")
                    }))) : m.data("layoutCSS", z(m, "position,margin,padding,border,top,bottom,left,right,width,height,overflow,overflowX,overflowY")));
                    try {
                        Va = {
                            overflow: "hidden",
                            overflowX: "hidden",
                            overflowY: "hidden"
                        };
                        m.css(Va);
                        M.inset && !b.isPlainObject(M.inset) && (W = parseInt(M.inset, 10) || 0, M.inset = {
                            top: W,
                            bottom: W,
                            left: W,
                            right: W
                        });
                        if (v.isBody) M.outset ? b.isPlainObject(M.outset) || (W = parseInt(M.outset, 10) || 0, 
                        M.outset = {
                            top: W,
                            bottom: W,
                            left: W,
                            right: W
                        }) : M.outset = {
                            top: pa(V, "paddingTop"),
                            bottom: pa(V, "paddingBottom"),
                            left: pa(V, "paddingLeft"),
                            right: pa(V, "paddingRight")
                        }, V.css(Va).css({
                            height: "100%",
                            border: "none",
                            padding: 0,
                            margin: 0
                        }), F.isIE6 ? (m.css({
                            width: "100%",
                            height: "100%",
                            border: "none",
                            padding: 0,
                            margin: 0,
                            position: "relative"
                        }), M.inset || (M.inset = D(m).inset)) : (m.css({
                            width: "auto",
                            height: "auto",
                            margin: 0,
                            position: "absolute"
                        }), m.css(M.outset)), b.extend(v, D(m, M.inset)); else {
                            var tb = m.css("position");
                            (!tb || !tb.match(/(fixed|absolute|relative)/)) && m.css("position", "relative");
                            m.is(":visible") && (b.extend(v, D(m, M.inset)), 1 > v.innerHeight && Y(M.errors.noContainerHeight.replace(/CONTAINER/, v.ref)));
                        }
                        pa(m, "minWidth") && m.parent().css("overflowX", "auto");
                        pa(m, "minHeight") && m.parent().css("overflowY", "auto");
                    } catch (yb) {}
                    ib();
                    b(window).bind("unload." + L, hb);
                    h(y, b.layout.onLoad);
                    xb.initPanes && wa();
                    delete ob.creatingLayout;
                    Sa = q.initialized;
                }
                return "cancel" === Sa ? null : y;
            };
            b(function() {
                var a = b.layout.browser;
                a.msie && (a.boxModel = b.support.boxModel);
            });
        })(jQuery);
        (function(b) {
            b.ui || (b.ui = {});
            b.ui.cookie = {
                acceptsCookies: !!navigator.cookieEnabled,
                read: function(a) {
                    for (var d = document.cookie, d = d ? d.split(";") : [], c, g = 0, h = d.length; g < h; g++) if (c = b.trim(d[g]).split("="), 
                    c[0] == a) return decodeURIComponent(c[1]);
                    return null;
                },
                write: function(a, b, c) {
                    var g = "", h = "", j = !1, c = c || {}, B = c.expires;
                    if (B && B.toUTCString) h = B; else if (null === B || "number" === typeof B) h = new Date(), 
                    0 < B ? h.setDate(h.getDate() + B) : (h.setFullYear(1970), j = !0);
                    h && (g += ";expires=" + h.toUTCString());
                    c.path && (g += ";path=" + c.path);
                    c.domain && (g += ";domain=" + c.domain);
                    c.secure && (g += ";secure");
                    document.cookie = a + "=" + (j ? "" : encodeURIComponent(b)) + g;
                },
                clear: function(a) {
                    b.ui.cookie.write(a, "", {
                        expires: -1
                    });
                }
            };
            b.cookie || (b.cookie = function(a, d, c) {
                var g = b.ui.cookie;
                if (null === d) g.clear(a); else {
                    if (void 0 === d) return g.read(a);
                    g.write(a, d, c);
                }
            });
            b.layout.plugins.stateManagement = !0;
            b.layout.config.optionRootKeys.push("stateManagement");
            b.layout.defaults.stateManagement = {
                enabled: !1,
                autoSave: !0,
                autoLoad: !0,
                animateLoad: !0,
                includeChildren: !0,
                stateKeys: "north.size,south.size,east.size,west.size,north.isClosed,south.isClosed,east.isClosed,west.isClosed,north.isHidden,south.isHidden,east.isHidden,west.isHidden",
                cookie: {
                    name: "",
                    domain: "",
                    path: "",
                    expires: "",
                    secure: !1
                }
            };
            b.layout.optionsMap.layout.push("stateManagement");
            b.layout.state = {
                saveCookie: function(a, d, c) {
                    var g = a.options, h = g.stateManagement, c = b.extend(!0, {}, h.cookie, c || null), a = a.state.stateData = a.readState(d || h.stateKeys);
                    b.ui.cookie.write(c.name || g.name || "Layout", b.layout.state.encodeJSON(a), c);
                    return b.extend(!0, {}, a);
                },
                deleteCookie: function(a) {
                    a = a.options;
                    b.ui.cookie.clear(a.stateManagement.cookie.name || a.name || "Layout");
                },
                readCookie: function(a) {
                    a = a.options;
                    return (a = b.ui.cookie.read(a.stateManagement.cookie.name || a.name || "Layout")) ? b.layout.state.decodeJSON(a) : {};
                },
                loadCookie: function(a) {
                    var d = b.layout.state.readCookie(a);
                    d && (a.state.stateData = b.extend(!0, {}, d), a.loadState(d));
                    return d;
                },
                loadState: function(a, d, c) {
                    if (b.isPlainObject(d) && !b.isEmptyObject(d)) if (d = a.state.stateData = b.layout.transformData(d), 
                    c = b.extend({
                        animateLoad: !1,
                        includeChildren: a.options.stateManagement.includeChildren
                    }, c), a.state.initialized) {
                        var g = !c.animateLoad, h, j, B, J;
                        b.each(b.layout.config.borderPanes, function(c, x) {
                            p = d[x];
                            b.isPlainObject(p) && (s = p.size, h = p.initClosed, j = p.initHidden, ar = p.autoResize, 
                            B = a.state[x], J = B.isVisible, ar && (B.autoResize = ar), J || a._sizePane(x, s, !1, !1, !1), 
                            !0 === j ? a.hide(x, g) : !0 === h ? a.close(x, !1, g) : !1 === h ? a.open(x, !1, g) : !1 === j && a.show(x, !1, g), 
                            J && a._sizePane(x, s, !1, !1, g));
                        });
                        if (c.includeChildren) {
                            var G, F;
                            b.each(a.children, function(a, c) {
                                (G = d[a] ? d[a].children : 0) && c && b.each(c, function(a, b) {
                                    F = G[a];
                                    b && F && b.loadState(F);
                                });
                            });
                        }
                    } else {
                        var p = b.extend(!0, {}, d);
                        b.each(b.layout.config.allPanes, function(a, b) {
                            p[b] && delete p[b].children;
                        });
                        b.extend(!0, a.options, p);
                    }
                },
                readState: function(a, d) {
                    "string" === b.type(d) && (d = {
                        keys: d
                    });
                    d || (d = {});
                    var c = a.options.stateManagement, g = d.includeChildren, g = void 0 !== g ? g : c.includeChildren, c = d.stateKeys || c.stateKeys, h = {
                        isClosed: "initClosed",
                        isHidden: "initHidden"
                    }, j = a.state, B = b.layout.config.allPanes, J = {}, G, F, p, A, x, D;
                    b.isArray(c) && (c = c.join(","));
                    for (var c = c.replace(/__/g, ".").split(","), z = 0, T = c.length; z < T; z++) G = c[z].split("."), 
                    F = G[0], G = G[1], 0 > b.inArray(F, B) || (p = j[F][G], void 0 != p && ("isClosed" == G && j[F].isSliding && (p = !0), 
                    (J[F] || (J[F] = {}))[h[G] ? h[G] : G] = p));
                    g && b.each(B, function(c, d) {
                        x = a.children[d];
                        A = j.stateData[d];
                        b.isPlainObject(x) && !b.isEmptyObject(x) && (D = J[d] || (J[d] = {}), D.children || (D.children = {}), 
                        b.each(x, function(a, c) {
                            c.state.initialized ? D.children[a] = b.layout.state.readState(c) : A && A.children && A.children[a] && (D.children[a] = b.extend(!0, {}, A.children[a]));
                        }));
                    });
                    return J;
                },
                encodeJSON: function(a) {
                    function d(a) {
                        var g = [], h = 0, j, B, J, G = b.isArray(a);
                        for (j in a) B = a[j], J = typeof B, "string" == J ? B = '"' + B + '"' : "object" == J && (B = d(B)), 
                        g[h++] = (!G ? '"' + j + '":' : "") + B;
                        return (G ? "[" : "{") + g.join(",") + (G ? "]" : "}");
                    }
                    return d(a);
                },
                decodeJSON: function(a) {
                    try {
                        return b.parseJSON ? b.parseJSON(a) : window.eval("(" + a + ")") || {};
                    } catch (d) {
                        return {};
                    }
                },
                _create: function(a) {
                    var d = b.layout.state, c = a.options.stateManagement;
                    b.extend(a, {
                        readCookie: function() {
                            return d.readCookie(a);
                        },
                        deleteCookie: function() {
                            d.deleteCookie(a);
                        },
                        saveCookie: function(b, c) {
                            return d.saveCookie(a, b, c);
                        },
                        loadCookie: function() {
                            return d.loadCookie(a);
                        },
                        loadState: function(b, c) {
                            d.loadState(a, b, c);
                        },
                        readState: function(b) {
                            return d.readState(a, b);
                        },
                        encodeJSON: d.encodeJSON,
                        decodeJSON: d.decodeJSON
                    });
                    a.state.stateData = {};
                    if (c.autoLoad) if (b.isPlainObject(c.autoLoad)) b.isEmptyObject(c.autoLoad) || a.loadState(c.autoLoad); else if (c.enabled) if (b.isFunction(c.autoLoad)) {
                        var g = {};
                        try {
                            g = c.autoLoad(a, a.state, a.options, a.options.name || "");
                        } catch (h) {}
                        g && b.isPlainObject(g) && !b.isEmptyObject(g) && a.loadState(g);
                    } else a.loadCookie();
                },
                _unload: function(a) {
                    var d = a.options.stateManagement;
                    if (d.enabled && d.autoSave) if (b.isFunction(d.autoSave)) try {
                        d.autoSave(a, a.state, a.options, a.options.name || "");
                    } catch (c) {} else a.saveCookie();
                }
            };
            b.layout.onCreate.push(b.layout.state._create);
            b.layout.onUnload.push(b.layout.state._unload);
            b.layout.plugins.buttons = !0;
            b.layout.defaults.autoBindCustomButtons = !1;
            b.layout.optionsMap.layout.push("autoBindCustomButtons");
            b.layout.buttons = {
                init: function(a) {
                    var d = a.options.name || "", c;
                    b.each("toggle open close pin toggle-slide open-slide".split(" "), function(g, h) {
                        b.each(b.layout.config.borderPanes, function(g, B) {
                            b(".ui-layout-button-" + h + "-" + B).each(function() {
                                c = b(this).data("layoutName") || b(this).attr("layoutName");
                                (void 0 == c || c === d) && a.bindButton(this, h, B);
                            });
                        });
                    });
                },
                get: function(a, d, c, g) {
                    var h = b(d), a = a.options, j = a.errors.addButtonError;
                    h.length ? 0 > b.inArray(c, b.layout.config.borderPanes) ? (b.layout.msg(j + " " + a.errors.pane + ": " + c, !0), 
                    h = b("")) : (d = a[c].buttonClass + "-" + g, h.addClass(d + " " + d + "-" + c).data("layoutName", a.name)) : b.layout.msg(j + " " + a.errors.selector + ": " + d, !0);
                    return h;
                },
                bind: function(a, d, c, g) {
                    var h = b.layout.buttons;
                    switch (c.toLowerCase()) {
                      case "toggle":
                        h.addToggle(a, d, g);
                        break;

                      case "open":
                        h.addOpen(a, d, g);
                        break;

                      case "close":
                        h.addClose(a, d, g);
                        break;

                      case "pin":
                        h.addPin(a, d, g);
                        break;

                      case "toggle-slide":
                        h.addToggle(a, d, g, !0);
                        break;

                      case "open-slide":
                        h.addOpen(a, d, g, !0);
                    }
                    return a;
                },
                addToggle: function(a, d, c, g) {
                    b.layout.buttons.get(a, d, c, "toggle").click(function(b) {
                        a.toggle(c, !!g);
                        b.stopPropagation();
                    });
                    return a;
                },
                addOpen: function(a, d, c, g) {
                    b.layout.buttons.get(a, d, c, "open").attr("title", a.options[c].tips.Open).click(function(b) {
                        a.open(c, !!g);
                        b.stopPropagation();
                    });
                    return a;
                },
                addClose: function(a, d, c) {
                    b.layout.buttons.get(a, d, c, "close").attr("title", a.options[c].tips.Close).click(function(b) {
                        a.close(c);
                        b.stopPropagation();
                    });
                    return a;
                },
                addPin: function(a, d, c) {
                    var g = b.layout.buttons, h = g.get(a, d, c, "pin");
                    if (h.length) {
                        var j = a.state[c];
                        h.click(function(d) {
                            g.setPinState(a, b(this), c, j.isSliding || j.isClosed);
                            j.isSliding || j.isClosed ? a.open(c) : a.close(c);
                            d.stopPropagation();
                        });
                        g.setPinState(a, h, c, !j.isClosed && !j.isSliding);
                        j.pins.push(d);
                    }
                    return a;
                },
                setPinState: function(a, b, c, g) {
                    var h = b.attr("pin");
                    if (!(h && g === ("down" == h))) {
                        var a = a.options[c], h = a.buttonClass + "-pin", j = h + "-" + c, c = h + "-up " + j + "-up", h = h + "-down " + j + "-down";
                        b.attr("pin", g ? "down" : "up").attr("title", g ? a.tips.Unpin : a.tips.Pin).removeClass(g ? c : h).addClass(g ? h : c);
                    }
                },
                syncPinBtns: function(a, d, c) {
                    b.each(a.state[d].pins, function(g, h) {
                        b.layout.buttons.setPinState(a, b(h), d, c);
                    });
                },
                _load: function(a) {
                    var d = b.layout.buttons;
                    b.extend(a, {
                        bindButton: function(b, c, j) {
                            return d.bind(a, b, c, j);
                        },
                        addToggleBtn: function(b, c, j) {
                            return d.addToggle(a, b, c, j);
                        },
                        addOpenBtn: function(b, c, j) {
                            return d.addOpen(a, b, c, j);
                        },
                        addCloseBtn: function(b, c) {
                            return d.addClose(a, b, c);
                        },
                        addPinBtn: function(b, c) {
                            return d.addPin(a, b, c);
                        }
                    });
                    for (var c = 0; 4 > c; c++) a.state[b.layout.config.borderPanes[c]].pins = [];
                    a.options.autoBindCustomButtons && d.init(a);
                },
                _unload: function() {}
            };
            b.layout.onLoad.push(b.layout.buttons._load);
            b.layout.plugins.browserZoom = !0;
            b.layout.defaults.browserZoomCheckInterval = 1e3;
            b.layout.optionsMap.layout.push("browserZoomCheckInterval");
            b.layout.browserZoom = {
                _init: function(a) {
                    !1 !== b.layout.browserZoom.ratio() && b.layout.browserZoom._setTimer(a);
                },
                _setTimer: function(a) {
                    if (!a.destroyed) {
                        var d = a.options, c = a.state, g = a.hasParentLayout ? 5e3 : Math.max(d.browserZoomCheckInterval, 100);
                        setTimeout(function() {
                            if (!a.destroyed && d.resizeWithWindow) {
                                var g = b.layout.browserZoom.ratio();
                                g !== c.browserZoom && (c.browserZoom = g, a.resizeAll());
                                b.layout.browserZoom._setTimer(a);
                            }
                        }, g);
                    }
                },
                ratio: function() {
                    function a(a, b) {
                        return (100 * (parseInt(a, 10) / parseInt(b, 10))).toFixed();
                    }
                    var d = window, c = screen, g = document, h = g.documentElement || g.body, j = b.layout.browser, B = j.version, J, G, F;
                    return j.msie && 8 < B || !j.msie ? !1 : c.deviceXDPI && c.systemXDPI ? a(c.deviceXDPI, c.systemXDPI) : j.webkit && (J = g.body.getBoundingClientRect) ? a(J.left - J.right, g.body.offsetWidth) : j.webkit && (G = d.outerWidth) ? a(G, d.innerWidth) : (G = c.width) && (F = h.clientWidth) ? a(G, F) : !1;
                }
            };
            b.layout.onReady.push(b.layout.browserZoom._init);
        })(jQuery);
    };
});

define("ucloud/plugins/1.3.3/jquery-pager-debug", [], function() {
    return function($) {
        var jQuery = $;
        /*
         * jQuery pager plugin
         * Version 1.0 (12/22/2008)
         * @requires jQuery v1.2.6 or later
         *
         * Example at: http://jonpauldavies.github.com/JQuery/Pager/PagerDemo.html
         *
         * Copyright (c) 2008-2009 Jon Paul Davies
         * Dual licensed under the MIT and GPL licenses:
         * http://www.opensource.org/licenses/mit-license.php
         * http://www.gnu.org/licenses/gpl.html
         *
         * Read the related blog post and contact the author at http://www.j-dee.com/2008/12/22/jquery-pager-plugin/
         *
         * This version is far from perfect and doesn't manage it's own state, therefore contributions are more than welcome!
         *
         * Usage: .pager({ pagenumber: 1, pagecount: 15, buttonClickCallback: PagerClickTest });
         *
         * Where pagenumber is the visible page number
         *       pagecount is the total number of pages to display
         *       buttonClickCallback is the method to fire when a pager button is clicked.
         *
         * buttonClickCallback signiture is PagerClickTest = function(pageclickednumber)
         * Where pageclickednumber is the number of the page clicked in the control.
         *
         * The included Pager.CSS file is a dependancy but can obviously tweaked to your wishes
         * Tested in IE6 IE7 Firefox & Safari. Any browser strangeness, please report.
         */
        (function($) {
            $.fn.pager = function(options) {
                var opts = $.extend({}, $.fn.pager.defaults, options);
                return this.each(function() {
                    // empty out the destination element and then render out the pager with the supplied options
                    $(this).empty().append(renderpager(parseInt(options.pagenumber), parseInt(options.pagecount), options.buttonClickCallback));
                    // specify correct cursor activity
                    $(".pages li").mouseover(function() {
                        document.body.style.cursor = "pointer";
                    }).mouseout(function() {
                        document.body.style.cursor = "auto";
                    });
                });
            };
            // render and return the pager with the supplied options
            function renderpager(pagenumber, pagecount, buttonClickCallback) {
                // setup $pager to hold render
                var $pager = $("<ul></ul>");
                // add in the previous and next buttons
                if (pagenumber != 1) {
                    $pager.append(renderButton("first", pagenumber, pagecount, buttonClickCallback));
                }
                // if(pagenumber >= 2)
                //     $pager.append(renderButton('prev', pagenumber, pagecount, buttonClickCallback));
                // pager currently only handles 10 viewable pages ( could be easily parameterized, maybe in next version ) so handle edge cases
                var startPoint = 1;
                var endPoint = 4;
                if (pagenumber > 2) {
                    startPoint = pagenumber - 2;
                    endPoint = pagenumber + 2;
                }
                if (endPoint > pagecount) {
                    startPoint = pagecount - 4;
                    endPoint = pagecount;
                }
                if (startPoint < 1) {
                    startPoint = 1;
                }
                // loop thru visible pages and render buttons
                for (var page = startPoint; page <= endPoint; page++) {
                    var currentButton = $('<li><a page="' + page + '" href="#">' + page + "</a></li>");
                    if (page == pagenumber) {
                        currentButton.addClass("active");
                    }
                    currentButton.appendTo($pager);
                }
                // render in the next and last buttons before returning the whole rendered control back.
                if (pagenumber < pagecount) {
                    //$pager.append(renderButton('next', pagenumber, pagecount, buttonClickCallback)).
                    $pager.append(renderButton("last", pagenumber, pagecount, buttonClickCallback));
                }
                $pager.find("a").click(function(e) {
                    e.preventDefault();
                    if (!$(this).parent("li").hasClass("active")) {
                        buttonClickCallback($(this).attr("page"));
                    }
                });
                return $pager;
            }
            // renders and returns a 'specialized' button, ie 'next', 'previous' etc. rather than a page number button
            function renderButton(buttonLabel, pagenumber, pagecount, buttonClickCallback) {
                var $Button = $('<li ><a href="#">' + buttonLabel + "</a></li>");
                var destPage = 1;
                // work out destination page for required button type
                switch (buttonLabel) {
                  case "first":
                    destPage = 1;
                    break;

                  case "prev":
                    destPage = pagenumber - 1;
                    break;

                  case "next":
                    destPage = pagenumber + 1;
                    break;

                  case "last":
                    destPage = pagecount;
                    break;
                }
                // disable and 'grey' out buttons if not needed.
                if (buttonLabel == "first" || buttonLabel == "prev") {
                    $Button.find("a").attr("page", destPage);
                } else {
                    $Button.find("a").attr("page", destPage);
                }
                return $Button;
            }
            // pager defaults. hardly worth bothering with in this case but used as placeholder for expansion in the next version
            $.fn.pager.defaults = {
                pagenumber: 1,
                pagecount: 1
            };
        })(jQuery);
    };
});

define("ucloud/plugins/1.3.3/jquery-ui-debug", [], function() {
    return function($) {
        var jQuery = $;
        /*! jQuery UI - v1.10.2 - 2013-03-14
* http://jqueryui.com
* Includes: jquery.ui.core.js, jquery.ui.widget.js, jquery.ui.mouse.js, jquery.ui.draggable.js, jquery.ui.droppable.js, jquery.ui.resizable.js, jquery.ui.selectable.js, jquery.ui.sortable.js, jquery.ui.effect.js, jquery.ui.accordion.js, jquery.ui.autocomplete.js, jquery.ui.button.js, jquery.ui.datepicker.js, jquery.ui.dialog.js, jquery.ui.effect-blind.js, jquery.ui.effect-bounce.js, jquery.ui.effect-clip.js, jquery.ui.effect-drop.js, jquery.ui.effect-explode.js, jquery.ui.effect-fade.js, jquery.ui.effect-fold.js, jquery.ui.effect-highlight.js, jquery.ui.effect-pulsate.js, jquery.ui.effect-scale.js, jquery.ui.effect-shake.js, jquery.ui.effect-slide.js, jquery.ui.effect-transfer.js, jquery.ui.menu.js, jquery.ui.position.js, jquery.ui.progressbar.js, jquery.ui.slider.js, jquery.ui.spinner.js, jquery.ui.tabs.js, jquery.ui.tooltip.js
* Copyright 2013 jQuery Foundation and other contributors; Licensed MIT */
        (function($, undefined) {
            var uuid = 0, runiqueId = /^ui-id-\d+$/;
            // $.ui might exist from components with no dependencies, e.g., $.ui.position
            $.ui = $.ui || {};
            $.extend($.ui, {
                version: "1.10.2",
                keyCode: {
                    BACKSPACE: 8,
                    COMMA: 188,
                    DELETE: 46,
                    DOWN: 40,
                    END: 35,
                    ENTER: 13,
                    ESCAPE: 27,
                    HOME: 36,
                    LEFT: 37,
                    NUMPAD_ADD: 107,
                    NUMPAD_DECIMAL: 110,
                    NUMPAD_DIVIDE: 111,
                    NUMPAD_ENTER: 108,
                    NUMPAD_MULTIPLY: 106,
                    NUMPAD_SUBTRACT: 109,
                    PAGE_DOWN: 34,
                    PAGE_UP: 33,
                    PERIOD: 190,
                    RIGHT: 39,
                    SPACE: 32,
                    TAB: 9,
                    UP: 38
                }
            });
            // plugins
            $.fn.extend({
                focus: function(orig) {
                    return function(delay, fn) {
                        return typeof delay === "number" ? this.each(function() {
                            var elem = this;
                            setTimeout(function() {
                                $(elem).focus();
                                if (fn) {
                                    fn.call(elem);
                                }
                            }, delay);
                        }) : orig.apply(this, arguments);
                    };
                }($.fn.focus),
                scrollParent: function() {
                    var scrollParent;
                    if ($.ui.ie && /(static|relative)/.test(this.css("position")) || /absolute/.test(this.css("position"))) {
                        scrollParent = this.parents().filter(function() {
                            return /(relative|absolute|fixed)/.test($.css(this, "position")) && /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
                        }).eq(0);
                    } else {
                        scrollParent = this.parents().filter(function() {
                            return /(auto|scroll)/.test($.css(this, "overflow") + $.css(this, "overflow-y") + $.css(this, "overflow-x"));
                        }).eq(0);
                    }
                    return /fixed/.test(this.css("position")) || !scrollParent.length ? $(document) : scrollParent;
                },
                zIndex: function(zIndex) {
                    if (zIndex !== undefined) {
                        return this.css("zIndex", zIndex);
                    }
                    if (this.length) {
                        var elem = $(this[0]), position, value;
                        while (elem.length && elem[0] !== document) {
                            // Ignore z-index if position is set to a value where z-index is ignored by the browser
                            // This makes behavior of this function consistent across browsers
                            // WebKit always returns auto if the element is positioned
                            position = elem.css("position");
                            if (position === "absolute" || position === "relative" || position === "fixed") {
                                // IE returns 0 when zIndex is not specified
                                // other browsers return a string
                                // we ignore the case of nested elements with an explicit value of 0
                                // <div style="z-index: -10;"><div style="z-index: 0;"></div></div>
                                value = parseInt(elem.css("zIndex"), 10);
                                if (!isNaN(value) && value !== 0) {
                                    return value;
                                }
                            }
                            elem = elem.parent();
                        }
                    }
                    return 0;
                },
                uniqueId: function() {
                    return this.each(function() {
                        if (!this.id) {
                            this.id = "ui-id-" + ++uuid;
                        }
                    });
                },
                removeUniqueId: function() {
                    return this.each(function() {
                        if (runiqueId.test(this.id)) {
                            $(this).removeAttr("id");
                        }
                    });
                }
            });
            // selectors
            function focusable(element, isTabIndexNotNaN) {
                var map, mapName, img, nodeName = element.nodeName.toLowerCase();
                if ("area" === nodeName) {
                    map = element.parentNode;
                    mapName = map.name;
                    if (!element.href || !mapName || map.nodeName.toLowerCase() !== "map") {
                        return false;
                    }
                    img = $("img[usemap=#" + mapName + "]")[0];
                    return !!img && visible(img);
                }
                return (/input|select|textarea|button|object/.test(nodeName) ? !element.disabled : "a" === nodeName ? element.href || isTabIndexNotNaN : isTabIndexNotNaN) && // the element and all of its ancestors must be visible
                visible(element);
            }
            function visible(element) {
                return $.expr.filters.visible(element) && !$(element).parents().addBack().filter(function() {
                    return $.css(this, "visibility") === "hidden";
                }).length;
            }
            $.extend($.expr[":"], {
                data: $.expr.createPseudo ? $.expr.createPseudo(function(dataName) {
                    return function(elem) {
                        return !!$.data(elem, dataName);
                    };
                }) : // support: jQuery <1.8
                function(elem, i, match) {
                    return !!$.data(elem, match[3]);
                },
                focusable: function(element) {
                    return focusable(element, !isNaN($.attr(element, "tabindex")));
                },
                tabbable: function(element) {
                    var tabIndex = $.attr(element, "tabindex"), isTabIndexNaN = isNaN(tabIndex);
                    return (isTabIndexNaN || tabIndex >= 0) && focusable(element, !isTabIndexNaN);
                }
            });
            // support: jQuery <1.8
            if (!$("<a>").outerWidth(1).jquery) {
                $.each([ "Width", "Height" ], function(i, name) {
                    var side = name === "Width" ? [ "Left", "Right" ] : [ "Top", "Bottom" ], type = name.toLowerCase(), orig = {
                        innerWidth: $.fn.innerWidth,
                        innerHeight: $.fn.innerHeight,
                        outerWidth: $.fn.outerWidth,
                        outerHeight: $.fn.outerHeight
                    };
                    function reduce(elem, size, border, margin) {
                        $.each(side, function() {
                            size -= parseFloat($.css(elem, "padding" + this)) || 0;
                            if (border) {
                                size -= parseFloat($.css(elem, "border" + this + "Width")) || 0;
                            }
                            if (margin) {
                                size -= parseFloat($.css(elem, "margin" + this)) || 0;
                            }
                        });
                        return size;
                    }
                    $.fn["inner" + name] = function(size) {
                        if (size === undefined) {
                            return orig["inner" + name].call(this);
                        }
                        return this.each(function() {
                            $(this).css(type, reduce(this, size) + "px");
                        });
                    };
                    $.fn["outer" + name] = function(size, margin) {
                        if (typeof size !== "number") {
                            return orig["outer" + name].call(this, size);
                        }
                        return this.each(function() {
                            $(this).css(type, reduce(this, size, true, margin) + "px");
                        });
                    };
                });
            }
            // support: jQuery <1.8
            if (!$.fn.addBack) {
                $.fn.addBack = function(selector) {
                    return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
                };
            }
            // support: jQuery 1.6.1, 1.6.2 (http://bugs.jquery.com/ticket/9413)
            if ($("<a>").data("a-b", "a").removeData("a-b").data("a-b")) {
                $.fn.removeData = function(removeData) {
                    return function(key) {
                        if (arguments.length) {
                            return removeData.call(this, $.camelCase(key));
                        } else {
                            return removeData.call(this);
                        }
                    };
                }($.fn.removeData);
            }
            // deprecated
            $.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
            $.support.selectstart = "onselectstart" in document.createElement("div");
            $.fn.extend({
                disableSelection: function() {
                    return this.bind(($.support.selectstart ? "selectstart" : "mousedown") + ".ui-disableSelection", function(event) {
                        event.preventDefault();
                    });
                },
                enableSelection: function() {
                    return this.unbind(".ui-disableSelection");
                }
            });
            $.extend($.ui, {
                // $.ui.plugin is deprecated.  Use the proxy pattern instead.
                plugin: {
                    add: function(module, option, set) {
                        var i, proto = $.ui[module].prototype;
                        for (i in set) {
                            proto.plugins[i] = proto.plugins[i] || [];
                            proto.plugins[i].push([ option, set[i] ]);
                        }
                    },
                    call: function(instance, name, args) {
                        var i, set = instance.plugins[name];
                        if (!set || !instance.element[0].parentNode || instance.element[0].parentNode.nodeType === 11) {
                            return;
                        }
                        for (i = 0; i < set.length; i++) {
                            if (instance.options[set[i][0]]) {
                                set[i][1].apply(instance.element, args);
                            }
                        }
                    }
                },
                // only used by resizable
                hasScroll: function(el, a) {
                    //If overflow is hidden, the element might have extra content, but the user wants to hide it
                    if ($(el).css("overflow") === "hidden") {
                        return false;
                    }
                    var scroll = a && a === "left" ? "scrollLeft" : "scrollTop", has = false;
                    if (el[scroll] > 0) {
                        return true;
                    }
                    // TODO: determine which cases actually cause this to happen
                    // if the element doesn't have the scroll set, see if it's possible to
                    // set the scroll
                    el[scroll] = 1;
                    has = el[scroll] > 0;
                    el[scroll] = 0;
                    return has;
                }
            });
        })(jQuery);
        (function($, undefined) {
            var uuid = 0, slice = Array.prototype.slice, _cleanData = $.cleanData;
            $.cleanData = function(elems) {
                for (var i = 0, elem; (elem = elems[i]) != null; i++) {
                    try {
                        $(elem).triggerHandler("remove");
                    } catch (e) {}
                }
                _cleanData(elems);
            };
            $.widget = function(name, base, prototype) {
                var fullName, existingConstructor, constructor, basePrototype, // proxiedPrototype allows the provided prototype to remain unmodified
                // so that it can be used as a mixin for multiple widgets (#8876)
                proxiedPrototype = {}, namespace = name.split(".")[0];
                name = name.split(".")[1];
                fullName = namespace + "-" + name;
                if (!prototype) {
                    prototype = base;
                    base = $.Widget;
                }
                // create selector for plugin
                $.expr[":"][fullName.toLowerCase()] = function(elem) {
                    return !!$.data(elem, fullName);
                };
                $[namespace] = $[namespace] || {};
                existingConstructor = $[namespace][name];
                constructor = $[namespace][name] = function(options, element) {
                    // allow instantiation without "new" keyword
                    if (!this._createWidget) {
                        return new constructor(options, element);
                    }
                    // allow instantiation without initializing for simple inheritance
                    // must use "new" keyword (the code above always passes args)
                    if (arguments.length) {
                        this._createWidget(options, element);
                    }
                };
                // extend with the existing constructor to carry over any static properties
                $.extend(constructor, existingConstructor, {
                    version: prototype.version,
                    // copy the object used to create the prototype in case we need to
                    // redefine the widget later
                    _proto: $.extend({}, prototype),
                    // track widgets that inherit from this widget in case this widget is
                    // redefined after a widget inherits from it
                    _childConstructors: []
                });
                basePrototype = new base();
                // we need to make the options hash a property directly on the new instance
                // otherwise we'll modify the options hash on the prototype that we're
                // inheriting from
                basePrototype.options = $.widget.extend({}, basePrototype.options);
                $.each(prototype, function(prop, value) {
                    if (!$.isFunction(value)) {
                        proxiedPrototype[prop] = value;
                        return;
                    }
                    proxiedPrototype[prop] = function() {
                        var _super = function() {
                            return base.prototype[prop].apply(this, arguments);
                        }, _superApply = function(args) {
                            return base.prototype[prop].apply(this, args);
                        };
                        return function() {
                            var __super = this._super, __superApply = this._superApply, returnValue;
                            this._super = _super;
                            this._superApply = _superApply;
                            returnValue = value.apply(this, arguments);
                            this._super = __super;
                            this._superApply = __superApply;
                            return returnValue;
                        };
                    }();
                });
                constructor.prototype = $.widget.extend(basePrototype, {
                    // TODO: remove support for widgetEventPrefix
                    // always use the name + a colon as the prefix, e.g., draggable:start
                    // don't prefix for widgets that aren't DOM-based
                    widgetEventPrefix: existingConstructor ? basePrototype.widgetEventPrefix : name
                }, proxiedPrototype, {
                    constructor: constructor,
                    namespace: namespace,
                    widgetName: name,
                    widgetFullName: fullName
                });
                // If this widget is being redefined then we need to find all widgets that
                // are inheriting from it and redefine all of them so that they inherit from
                // the new version of this widget. We're essentially trying to replace one
                // level in the prototype chain.
                if (existingConstructor) {
                    $.each(existingConstructor._childConstructors, function(i, child) {
                        var childPrototype = child.prototype;
                        // redefine the child widget using the same prototype that was
                        // originally used, but inherit from the new version of the base
                        $.widget(childPrototype.namespace + "." + childPrototype.widgetName, constructor, child._proto);
                    });
                    // remove the list of existing child constructors from the old constructor
                    // so the old child constructors can be garbage collected
                    delete existingConstructor._childConstructors;
                } else {
                    base._childConstructors.push(constructor);
                }
                $.widget.bridge(name, constructor);
            };
            $.widget.extend = function(target) {
                var input = slice.call(arguments, 1), inputIndex = 0, inputLength = input.length, key, value;
                for (;inputIndex < inputLength; inputIndex++) {
                    for (key in input[inputIndex]) {
                        value = input[inputIndex][key];
                        if (input[inputIndex].hasOwnProperty(key) && value !== undefined) {
                            // Clone objects
                            if ($.isPlainObject(value)) {
                                target[key] = $.isPlainObject(target[key]) ? $.widget.extend({}, target[key], value) : // Don't extend strings, arrays, etc. with objects
                                $.widget.extend({}, value);
                            } else {
                                target[key] = value;
                            }
                        }
                    }
                }
                return target;
            };
            $.widget.bridge = function(name, object) {
                var fullName = object.prototype.widgetFullName || name;
                $.fn[name] = function(options) {
                    var isMethodCall = typeof options === "string", args = slice.call(arguments, 1), returnValue = this;
                    // allow multiple hashes to be passed on init
                    options = !isMethodCall && args.length ? $.widget.extend.apply(null, [ options ].concat(args)) : options;
                    if (isMethodCall) {
                        this.each(function() {
                            var methodValue, instance = $.data(this, fullName);
                            if (!instance) {
                                return $.error("cannot call methods on " + name + " prior to initialization; " + "attempted to call method '" + options + "'");
                            }
                            if (!$.isFunction(instance[options]) || options.charAt(0) === "_") {
                                return $.error("no such method '" + options + "' for " + name + " widget instance");
                            }
                            methodValue = instance[options].apply(instance, args);
                            if (methodValue !== instance && methodValue !== undefined) {
                                returnValue = methodValue && methodValue.jquery ? returnValue.pushStack(methodValue.get()) : methodValue;
                                return false;
                            }
                        });
                    } else {
                        this.each(function() {
                            var instance = $.data(this, fullName);
                            if (instance) {
                                instance.option(options || {})._init();
                            } else {
                                $.data(this, fullName, new object(options, this));
                            }
                        });
                    }
                    return returnValue;
                };
            };
            $.Widget = function() {};
            $.Widget._childConstructors = [];
            $.Widget.prototype = {
                widgetName: "widget",
                widgetEventPrefix: "",
                defaultElement: "<div>",
                options: {
                    disabled: false,
                    // callbacks
                    create: null
                },
                _createWidget: function(options, element) {
                    element = $(element || this.defaultElement || this)[0];
                    this.element = $(element);
                    this.uuid = uuid++;
                    this.eventNamespace = "." + this.widgetName + this.uuid;
                    this.options = $.widget.extend({}, this.options, this._getCreateOptions(), options);
                    this.bindings = $();
                    this.hoverable = $();
                    this.focusable = $();
                    if (element !== this) {
                        $.data(element, this.widgetFullName, this);
                        this._on(true, this.element, {
                            remove: function(event) {
                                if (event.target === element) {
                                    this.destroy();
                                }
                            }
                        });
                        this.document = $(element.style ? // element within the document
                        element.ownerDocument : // element is window or document
                        element.document || element);
                        this.window = $(this.document[0].defaultView || this.document[0].parentWindow);
                    }
                    this._create();
                    this._trigger("create", null, this._getCreateEventData());
                    this._init();
                },
                _getCreateOptions: $.noop,
                _getCreateEventData: $.noop,
                _create: $.noop,
                _init: $.noop,
                destroy: function() {
                    this._destroy();
                    // we can probably remove the unbind calls in 2.0
                    // all event bindings should go through this._on()
                    this.element.unbind(this.eventNamespace).removeData(this.widgetName).removeData(this.widgetFullName).removeData($.camelCase(this.widgetFullName));
                    this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled " + "ui-state-disabled");
                    // clean up events and states
                    this.bindings.unbind(this.eventNamespace);
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus");
                },
                _destroy: $.noop,
                widget: function() {
                    return this.element;
                },
                option: function(key, value) {
                    var options = key, parts, curOption, i;
                    if (arguments.length === 0) {
                        // don't return a reference to the internal hash
                        return $.widget.extend({}, this.options);
                    }
                    if (typeof key === "string") {
                        // handle nested keys, e.g., "foo.bar" => { foo: { bar: ___ } }
                        options = {};
                        parts = key.split(".");
                        key = parts.shift();
                        if (parts.length) {
                            curOption = options[key] = $.widget.extend({}, this.options[key]);
                            for (i = 0; i < parts.length - 1; i++) {
                                curOption[parts[i]] = curOption[parts[i]] || {};
                                curOption = curOption[parts[i]];
                            }
                            key = parts.pop();
                            if (value === undefined) {
                                return curOption[key] === undefined ? null : curOption[key];
                            }
                            curOption[key] = value;
                        } else {
                            if (value === undefined) {
                                return this.options[key] === undefined ? null : this.options[key];
                            }
                            options[key] = value;
                        }
                    }
                    this._setOptions(options);
                    return this;
                },
                _setOptions: function(options) {
                    var key;
                    for (key in options) {
                        this._setOption(key, options[key]);
                    }
                    return this;
                },
                _setOption: function(key, value) {
                    this.options[key] = value;
                    if (key === "disabled") {
                        this.widget().toggleClass(this.widgetFullName + "-disabled ui-state-disabled", !!value).attr("aria-disabled", value);
                        this.hoverable.removeClass("ui-state-hover");
                        this.focusable.removeClass("ui-state-focus");
                    }
                    return this;
                },
                enable: function() {
                    return this._setOption("disabled", false);
                },
                disable: function() {
                    return this._setOption("disabled", true);
                },
                _on: function(suppressDisabledCheck, element, handlers) {
                    var delegateElement, instance = this;
                    // no suppressDisabledCheck flag, shuffle arguments
                    if (typeof suppressDisabledCheck !== "boolean") {
                        handlers = element;
                        element = suppressDisabledCheck;
                        suppressDisabledCheck = false;
                    }
                    // no element argument, shuffle and use this.element
                    if (!handlers) {
                        handlers = element;
                        element = this.element;
                        delegateElement = this.widget();
                    } else {
                        // accept selectors, DOM elements
                        element = delegateElement = $(element);
                        this.bindings = this.bindings.add(element);
                    }
                    $.each(handlers, function(event, handler) {
                        function handlerProxy() {
                            // allow widgets to customize the disabled handling
                            // - disabled as an array instead of boolean
                            // - disabled class as method for disabling individual parts
                            if (!suppressDisabledCheck && (instance.options.disabled === true || $(this).hasClass("ui-state-disabled"))) {
                                return;
                            }
                            return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                        }
                        // copy the guid so direct unbinding works
                        if (typeof handler !== "string") {
                            handlerProxy.guid = handler.guid = handler.guid || handlerProxy.guid || $.guid++;
                        }
                        var match = event.match(/^(\w+)\s*(.*)$/), eventName = match[1] + instance.eventNamespace, selector = match[2];
                        if (selector) {
                            delegateElement.delegate(selector, eventName, handlerProxy);
                        } else {
                            element.bind(eventName, handlerProxy);
                        }
                    });
                },
                _off: function(element, eventName) {
                    eventName = (eventName || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
                    element.unbind(eventName).undelegate(eventName);
                },
                _delay: function(handler, delay) {
                    function handlerProxy() {
                        return (typeof handler === "string" ? instance[handler] : handler).apply(instance, arguments);
                    }
                    var instance = this;
                    return setTimeout(handlerProxy, delay || 0);
                },
                _hoverable: function(element) {
                    this.hoverable = this.hoverable.add(element);
                    this._on(element, {
                        mouseenter: function(event) {
                            $(event.currentTarget).addClass("ui-state-hover");
                        },
                        mouseleave: function(event) {
                            $(event.currentTarget).removeClass("ui-state-hover");
                        }
                    });
                },
                _focusable: function(element) {
                    this.focusable = this.focusable.add(element);
                    this._on(element, {
                        focusin: function(event) {
                            $(event.currentTarget).addClass("ui-state-focus");
                        },
                        focusout: function(event) {
                            $(event.currentTarget).removeClass("ui-state-focus");
                        }
                    });
                },
                _trigger: function(type, event, data) {
                    var prop, orig, callback = this.options[type];
                    data = data || {};
                    event = $.Event(event);
                    event.type = (type === this.widgetEventPrefix ? type : this.widgetEventPrefix + type).toLowerCase();
                    // the original event may come from any element
                    // so we need to reset the target on the new event
                    event.target = this.element[0];
                    // copy original event properties over to the new event
                    orig = event.originalEvent;
                    if (orig) {
                        for (prop in orig) {
                            if (!(prop in event)) {
                                event[prop] = orig[prop];
                            }
                        }
                    }
                    this.element.trigger(event, data);
                    return !($.isFunction(callback) && callback.apply(this.element[0], [ event ].concat(data)) === false || event.isDefaultPrevented());
                }
            };
            $.each({
                show: "fadeIn",
                hide: "fadeOut"
            }, function(method, defaultEffect) {
                $.Widget.prototype["_" + method] = function(element, options, callback) {
                    if (typeof options === "string") {
                        options = {
                            effect: options
                        };
                    }
                    var hasOptions, effectName = !options ? method : options === true || typeof options === "number" ? defaultEffect : options.effect || defaultEffect;
                    options = options || {};
                    if (typeof options === "number") {
                        options = {
                            duration: options
                        };
                    }
                    hasOptions = !$.isEmptyObject(options);
                    options.complete = callback;
                    if (options.delay) {
                        element.delay(options.delay);
                    }
                    if (hasOptions && $.effects && $.effects.effect[effectName]) {
                        element[method](options);
                    } else if (effectName !== method && element[effectName]) {
                        element[effectName](options.duration, options.easing, callback);
                    } else {
                        element.queue(function(next) {
                            $(this)[method]();
                            if (callback) {
                                callback.call(element[0]);
                            }
                            next();
                        });
                    }
                };
            });
        })(jQuery);
        (function($, undefined) {
            var mouseHandled = false;
            $(document).mouseup(function() {
                mouseHandled = false;
            });
            $.widget("ui.mouse", {
                version: "1.10.2",
                options: {
                    cancel: "input,textarea,button,select,option",
                    distance: 1,
                    delay: 0
                },
                _mouseInit: function() {
                    var that = this;
                    this.element.bind("mousedown." + this.widgetName, function(event) {
                        return that._mouseDown(event);
                    }).bind("click." + this.widgetName, function(event) {
                        if (true === $.data(event.target, that.widgetName + ".preventClickEvent")) {
                            $.removeData(event.target, that.widgetName + ".preventClickEvent");
                            event.stopImmediatePropagation();
                            return false;
                        }
                    });
                    this.started = false;
                },
                // TODO: make sure destroying one instance of mouse doesn't mess with
                // other instances of mouse
                _mouseDestroy: function() {
                    this.element.unbind("." + this.widgetName);
                    if (this._mouseMoveDelegate) {
                        $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
                    }
                },
                _mouseDown: function(event) {
                    // don't let more than one widget handle mouseStart
                    if (mouseHandled) {
                        return;
                    }
                    // we may have missed mouseup (out of window)
                    this._mouseStarted && this._mouseUp(event);
                    this._mouseDownEvent = event;
                    var that = this, btnIsLeft = event.which === 1, // event.target.nodeName works around a bug in IE 8 with
                    // disabled inputs (#7620)
                    elIsCancel = typeof this.options.cancel === "string" && event.target.nodeName ? $(event.target).closest(this.options.cancel).length : false;
                    if (!btnIsLeft || elIsCancel || !this._mouseCapture(event)) {
                        return true;
                    }
                    this.mouseDelayMet = !this.options.delay;
                    if (!this.mouseDelayMet) {
                        this._mouseDelayTimer = setTimeout(function() {
                            that.mouseDelayMet = true;
                        }, this.options.delay);
                    }
                    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                        this._mouseStarted = this._mouseStart(event) !== false;
                        if (!this._mouseStarted) {
                            event.preventDefault();
                            return true;
                        }
                    }
                    // Click event may never have fired (Gecko & Opera)
                    if (true === $.data(event.target, this.widgetName + ".preventClickEvent")) {
                        $.removeData(event.target, this.widgetName + ".preventClickEvent");
                    }
                    // these delegates are required to keep context
                    this._mouseMoveDelegate = function(event) {
                        return that._mouseMove(event);
                    };
                    this._mouseUpDelegate = function(event) {
                        return that._mouseUp(event);
                    };
                    $(document).bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName, this._mouseUpDelegate);
                    event.preventDefault();
                    mouseHandled = true;
                    return true;
                },
                _mouseMove: function(event) {
                    // IE mouseup check - mouseup happened when mouse was out of window
                    if ($.ui.ie && (!document.documentMode || document.documentMode < 9) && !event.button) {
                        return this._mouseUp(event);
                    }
                    if (this._mouseStarted) {
                        this._mouseDrag(event);
                        return event.preventDefault();
                    }
                    if (this._mouseDistanceMet(event) && this._mouseDelayMet(event)) {
                        this._mouseStarted = this._mouseStart(this._mouseDownEvent, event) !== false;
                        this._mouseStarted ? this._mouseDrag(event) : this._mouseUp(event);
                    }
                    return !this._mouseStarted;
                },
                _mouseUp: function(event) {
                    $(document).unbind("mousemove." + this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
                    if (this._mouseStarted) {
                        this._mouseStarted = false;
                        if (event.target === this._mouseDownEvent.target) {
                            $.data(event.target, this.widgetName + ".preventClickEvent", true);
                        }
                        this._mouseStop(event);
                    }
                    return false;
                },
                _mouseDistanceMet: function(event) {
                    return Math.max(Math.abs(this._mouseDownEvent.pageX - event.pageX), Math.abs(this._mouseDownEvent.pageY - event.pageY)) >= this.options.distance;
                },
                _mouseDelayMet: function() {
                    return this.mouseDelayMet;
                },
                // These are placeholder methods, to be overriden by extending plugin
                _mouseStart: function() {},
                _mouseDrag: function() {},
                _mouseStop: function() {},
                _mouseCapture: function() {
                    return true;
                }
            });
        })(jQuery);
        (function($, undefined) {
            $.widget("ui.draggable", $.ui.mouse, {
                version: "1.10.2",
                widgetEventPrefix: "drag",
                options: {
                    addClasses: true,
                    appendTo: "parent",
                    axis: false,
                    connectToSortable: false,
                    containment: false,
                    cursor: "auto",
                    cursorAt: false,
                    grid: false,
                    handle: false,
                    helper: "original",
                    iframeFix: false,
                    opacity: false,
                    refreshPositions: false,
                    revert: false,
                    revertDuration: 500,
                    scope: "default",
                    scroll: true,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    snap: false,
                    snapMode: "both",
                    snapTolerance: 20,
                    stack: false,
                    zIndex: false,
                    // callbacks
                    drag: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    if (this.options.helper === "original" && !/^(?:r|a|f)/.test(this.element.css("position"))) {
                        this.element[0].style.position = "relative";
                    }
                    if (this.options.addClasses) {
                        this.element.addClass("ui-draggable");
                    }
                    if (this.options.disabled) {
                        this.element.addClass("ui-draggable-disabled");
                    }
                    this._mouseInit();
                },
                _destroy: function() {
                    this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled");
                    this._mouseDestroy();
                },
                _mouseCapture: function(event) {
                    var o = this.options;
                    // among others, prevent a drag on a resizable-handle
                    if (this.helper || o.disabled || $(event.target).closest(".ui-resizable-handle").length > 0) {
                        return false;
                    }
                    //Quit if we're not on a valid handle
                    this.handle = this._getHandle(event);
                    if (!this.handle) {
                        return false;
                    }
                    $(o.iframeFix === true ? "iframe" : o.iframeFix).each(function() {
                        $("<div class='ui-draggable-iframeFix' style='background: #fff;'></div>").css({
                            width: this.offsetWidth + "px",
                            height: this.offsetHeight + "px",
                            position: "absolute",
                            opacity: "0.001",
                            zIndex: 1e3
                        }).css($(this).offset()).appendTo("body");
                    });
                    return true;
                },
                _mouseStart: function(event) {
                    var o = this.options;
                    //Create and append the visible helper
                    this.helper = this._createHelper(event);
                    this.helper.addClass("ui-draggable-dragging");
                    //Cache the helper size
                    this._cacheHelperProportions();
                    //If ddmanager is used for droppables, set the global draggable
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.current = this;
                    }
                    /*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */
                    //Cache the margins of the original element
                    this._cacheMargins();
                    //Store the helper's css position
                    this.cssPosition = this.helper.css("position");
                    this.scrollParent = this.helper.scrollParent();
                    //The element's absolute position on the page minus margins
                    this.offset = this.positionAbs = this.element.offset();
                    this.offset = {
                        top: this.offset.top - this.margins.top,
                        left: this.offset.left - this.margins.left
                    };
                    $.extend(this.offset, {
                        click: {
                            //Where the click happened, relative to the element
                            left: event.pageX - this.offset.left,
                            top: event.pageY - this.offset.top
                        },
                        parent: this._getParentOffset(),
                        relative: this._getRelativeOffset()
                    });
                    //Generate the original position
                    this.originalPosition = this.position = this._generatePosition(event);
                    this.originalPageX = event.pageX;
                    this.originalPageY = event.pageY;
                    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
                    o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
                    //Set a containment if given in the options
                    if (o.containment) {
                        this._setContainment();
                    }
                    //Trigger event + callbacks
                    if (this._trigger("start", event) === false) {
                        this._clear();
                        return false;
                    }
                    //Recache the helper size
                    this._cacheHelperProportions();
                    //Prepare the droppable offsets
                    if ($.ui.ddmanager && !o.dropBehaviour) {
                        $.ui.ddmanager.prepareOffsets(this, event);
                    }
                    this._mouseDrag(event, true);
                    //Execute the drag once - this causes the helper not to be visible before getting its correct position
                    //If the ddmanager is used for droppables, inform the manager that dragging has started (see #5003)
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.dragStart(this, event);
                    }
                    return true;
                },
                _mouseDrag: function(event, noPropagation) {
                    //Compute the helpers position
                    this.position = this._generatePosition(event);
                    this.positionAbs = this._convertPositionTo("absolute");
                    //Call plugins and callbacks and use the resulting position if something is returned
                    if (!noPropagation) {
                        var ui = this._uiHash();
                        if (this._trigger("drag", event, ui) === false) {
                            this._mouseUp({});
                            return false;
                        }
                        this.position = ui.position;
                    }
                    if (!this.options.axis || this.options.axis !== "y") {
                        this.helper[0].style.left = this.position.left + "px";
                    }
                    if (!this.options.axis || this.options.axis !== "x") {
                        this.helper[0].style.top = this.position.top + "px";
                    }
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.drag(this, event);
                    }
                    return false;
                },
                _mouseStop: function(event) {
                    //If we are using droppables, inform the manager about the drop
                    var element, that = this, elementInDom = false, dropped = false;
                    if ($.ui.ddmanager && !this.options.dropBehaviour) {
                        dropped = $.ui.ddmanager.drop(this, event);
                    }
                    //if a drop comes from outside (a sortable)
                    if (this.dropped) {
                        dropped = this.dropped;
                        this.dropped = false;
                    }
                    //if the original element is no longer in the DOM don't bother to continue (see #8269)
                    element = this.element[0];
                    while (element && (element = element.parentNode)) {
                        if (element === document) {
                            elementInDom = true;
                        }
                    }
                    if (!elementInDom && this.options.helper === "original") {
                        return false;
                    }
                    if (this.options.revert === "invalid" && !dropped || this.options.revert === "valid" && dropped || this.options.revert === true || $.isFunction(this.options.revert) && this.options.revert.call(this.element, dropped)) {
                        $(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                            if (that._trigger("stop", event) !== false) {
                                that._clear();
                            }
                        });
                    } else {
                        if (this._trigger("stop", event) !== false) {
                            this._clear();
                        }
                    }
                    return false;
                },
                _mouseUp: function(event) {
                    //Remove frame helpers
                    $("div.ui-draggable-iframeFix").each(function() {
                        this.parentNode.removeChild(this);
                    });
                    //If the ddmanager is used for droppables, inform the manager that dragging has stopped (see #5003)
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.dragStop(this, event);
                    }
                    return $.ui.mouse.prototype._mouseUp.call(this, event);
                },
                cancel: function() {
                    if (this.helper.is(".ui-draggable-dragging")) {
                        this._mouseUp({});
                    } else {
                        this._clear();
                    }
                    return this;
                },
                _getHandle: function(event) {
                    return this.options.handle ? !!$(event.target).closest(this.element.find(this.options.handle)).length : true;
                },
                _createHelper: function(event) {
                    var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event ])) : o.helper === "clone" ? this.element.clone().removeAttr("id") : this.element;
                    if (!helper.parents("body").length) {
                        helper.appendTo(o.appendTo === "parent" ? this.element[0].parentNode : o.appendTo);
                    }
                    if (helper[0] !== this.element[0] && !/(fixed|absolute)/.test(helper.css("position"))) {
                        helper.css("position", "absolute");
                    }
                    return helper;
                },
                _adjustOffsetFromHelper: function(obj) {
                    if (typeof obj === "string") {
                        obj = obj.split(" ");
                    }
                    if ($.isArray(obj)) {
                        obj = {
                            left: +obj[0],
                            top: +obj[1] || 0
                        };
                    }
                    if ("left" in obj) {
                        this.offset.click.left = obj.left + this.margins.left;
                    }
                    if ("right" in obj) {
                        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                    }
                    if ("top" in obj) {
                        this.offset.click.top = obj.top + this.margins.top;
                    }
                    if ("bottom" in obj) {
                        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                    }
                },
                _getParentOffset: function() {
                    //Get the offsetParent and cache its position
                    this.offsetParent = this.helper.offsetParent();
                    var po = this.offsetParent.offset();
                    // This is a special case where we need to modify a offset calculated on start, since the following happened:
                    // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
                    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
                    //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
                    if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                        po.left += this.scrollParent.scrollLeft();
                        po.top += this.scrollParent.scrollTop();
                    }
                    //This needs to be actually done for all browsers, since pageX/pageY includes this information
                    //Ugly IE fix
                    if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie) {
                        po = {
                            top: 0,
                            left: 0
                        };
                    }
                    return {
                        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                    };
                },
                _getRelativeOffset: function() {
                    if (this.cssPosition === "relative") {
                        var p = this.element.position();
                        return {
                            top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                            left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                        };
                    } else {
                        return {
                            top: 0,
                            left: 0
                        };
                    }
                },
                _cacheMargins: function() {
                    this.margins = {
                        left: parseInt(this.element.css("marginLeft"), 10) || 0,
                        top: parseInt(this.element.css("marginTop"), 10) || 0,
                        right: parseInt(this.element.css("marginRight"), 10) || 0,
                        bottom: parseInt(this.element.css("marginBottom"), 10) || 0
                    };
                },
                _cacheHelperProportions: function() {
                    this.helperProportions = {
                        width: this.helper.outerWidth(),
                        height: this.helper.outerHeight()
                    };
                },
                _setContainment: function() {
                    var over, c, ce, o = this.options;
                    if (o.containment === "parent") {
                        o.containment = this.helper[0].parentNode;
                    }
                    if (o.containment === "document" || o.containment === "window") {
                        this.containment = [ o.containment === "document" ? 0 : $(window).scrollLeft() - this.offset.relative.left - this.offset.parent.left, o.containment === "document" ? 0 : $(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, (o.containment === "document" ? 0 : $(window).scrollLeft()) + $(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left, (o.containment === "document" ? 0 : $(window).scrollTop()) + ($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                    }
                    if (!/^(document|window|parent)$/.test(o.containment) && o.containment.constructor !== Array) {
                        c = $(o.containment);
                        ce = c[0];
                        if (!ce) {
                            return;
                        }
                        over = $(ce).css("overflow") !== "hidden";
                        this.containment = [ (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0), (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0), (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderRightWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderBottomWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom ];
                        this.relative_container = c;
                    } else if (o.containment.constructor === Array) {
                        this.containment = o.containment;
                    }
                },
                _convertPositionTo: function(d, pos) {
                    if (!pos) {
                        pos = this.position;
                    }
                    var mod = d === "absolute" ? 1 : -1, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
                    return {
                        top: pos.top + // The absolute mouse position
                        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                        (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                        left: pos.left + // The absolute mouse position
                        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                        (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
                    };
                },
                _generatePosition: function(event) {
                    var containment, co, top, left, o = this.options, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName), pageX = event.pageX, pageY = event.pageY;
                    /*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */
                    if (this.originalPosition) {
                        //If we are not dragging yet, we won't check for options
                        if (this.containment) {
                            if (this.relative_container) {
                                co = this.relative_container.offset();
                                containment = [ this.containment[0] + co.left, this.containment[1] + co.top, this.containment[2] + co.left, this.containment[3] + co.top ];
                            } else {
                                containment = this.containment;
                            }
                            if (event.pageX - this.offset.click.left < containment[0]) {
                                pageX = containment[0] + this.offset.click.left;
                            }
                            if (event.pageY - this.offset.click.top < containment[1]) {
                                pageY = containment[1] + this.offset.click.top;
                            }
                            if (event.pageX - this.offset.click.left > containment[2]) {
                                pageX = containment[2] + this.offset.click.left;
                            }
                            if (event.pageY - this.offset.click.top > containment[3]) {
                                pageY = containment[3] + this.offset.click.top;
                            }
                        }
                        if (o.grid) {
                            //Check for grid elements set to 0 to prevent divide by 0 error causing invalid argument errors in IE (see ticket #6950)
                            top = o.grid[1] ? this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1] : this.originalPageY;
                            pageY = containment ? top - this.offset.click.top >= containment[1] || top - this.offset.click.top > containment[3] ? top : top - this.offset.click.top >= containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                            left = o.grid[0] ? this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0] : this.originalPageX;
                            pageX = containment ? left - this.offset.click.left >= containment[0] || left - this.offset.click.left > containment[2] ? left : left - this.offset.click.left >= containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                        }
                    }
                    return {
                        top: pageY - // The absolute mouse position
                        this.offset.click.top - // Click offset (relative to the element)
                        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.top + (// The offsetParent's offset without borders (offset + border)
                        this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                        left: pageX - // The absolute mouse position
                        this.offset.click.left - // Click offset (relative to the element)
                        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.left + (// The offsetParent's offset without borders (offset + border)
                        this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
                    };
                },
                _clear: function() {
                    this.helper.removeClass("ui-draggable-dragging");
                    if (this.helper[0] !== this.element[0] && !this.cancelHelperRemoval) {
                        this.helper.remove();
                    }
                    this.helper = null;
                    this.cancelHelperRemoval = false;
                },
                // From now on bulk stuff - mainly helpers
                _trigger: function(type, event, ui) {
                    ui = ui || this._uiHash();
                    $.ui.plugin.call(this, type, [ event, ui ]);
                    //The absolute position has to be recalculated after plugins
                    if (type === "drag") {
                        this.positionAbs = this._convertPositionTo("absolute");
                    }
                    return $.Widget.prototype._trigger.call(this, type, event, ui);
                },
                plugins: {},
                _uiHash: function() {
                    return {
                        helper: this.helper,
                        position: this.position,
                        originalPosition: this.originalPosition,
                        offset: this.positionAbs
                    };
                }
            });
            $.ui.plugin.add("draggable", "connectToSortable", {
                start: function(event, ui) {
                    var inst = $(this).data("ui-draggable"), o = inst.options, uiSortable = $.extend({}, ui, {
                        item: inst.element
                    });
                    inst.sortables = [];
                    $(o.connectToSortable).each(function() {
                        var sortable = $.data(this, "ui-sortable");
                        if (sortable && !sortable.options.disabled) {
                            inst.sortables.push({
                                instance: sortable,
                                shouldRevert: sortable.options.revert
                            });
                            sortable.refreshPositions();
                            // Call the sortable's refreshPositions at drag start to refresh the containerCache since the sortable container cache is used in drag and needs to be up to date (this will ensure it's initialised as well as being kept in step with any changes that might have happened on the page).
                            sortable._trigger("activate", event, uiSortable);
                        }
                    });
                },
                stop: function(event, ui) {
                    //If we are still over the sortable, we fake the stop event of the sortable, but also remove helper
                    var inst = $(this).data("ui-draggable"), uiSortable = $.extend({}, ui, {
                        item: inst.element
                    });
                    $.each(inst.sortables, function() {
                        if (this.instance.isOver) {
                            this.instance.isOver = 0;
                            inst.cancelHelperRemoval = true;
                            //Don't remove the helper in the draggable instance
                            this.instance.cancelHelperRemoval = false;
                            //Remove it in the sortable instance (so sortable plugins like revert still work)
                            //The sortable revert is supported, and we have to set a temporary dropped variable on the draggable to support revert: "valid/invalid"
                            if (this.shouldRevert) {
                                this.instance.options.revert = this.shouldRevert;
                            }
                            //Trigger the stop of the sortable
                            this.instance._mouseStop(event);
                            this.instance.options.helper = this.instance.options._helper;
                            //If the helper has been the original item, restore properties in the sortable
                            if (inst.options.helper === "original") {
                                this.instance.currentItem.css({
                                    top: "auto",
                                    left: "auto"
                                });
                            }
                        } else {
                            this.instance.cancelHelperRemoval = false;
                            //Remove the helper in the sortable instance
                            this.instance._trigger("deactivate", event, uiSortable);
                        }
                    });
                },
                drag: function(event, ui) {
                    var inst = $(this).data("ui-draggable"), that = this;
                    $.each(inst.sortables, function() {
                        var innermostIntersecting = false, thisSortable = this;
                        //Copy over some variables to allow calling the sortable's native _intersectsWith
                        this.instance.positionAbs = inst.positionAbs;
                        this.instance.helperProportions = inst.helperProportions;
                        this.instance.offset.click = inst.offset.click;
                        if (this.instance._intersectsWith(this.instance.containerCache)) {
                            innermostIntersecting = true;
                            $.each(inst.sortables, function() {
                                this.instance.positionAbs = inst.positionAbs;
                                this.instance.helperProportions = inst.helperProportions;
                                this.instance.offset.click = inst.offset.click;
                                if (this !== thisSortable && this.instance._intersectsWith(this.instance.containerCache) && $.contains(thisSortable.instance.element[0], this.instance.element[0])) {
                                    innermostIntersecting = false;
                                }
                                return innermostIntersecting;
                            });
                        }
                        if (innermostIntersecting) {
                            //If it intersects, we use a little isOver variable and set it once, so our move-in stuff gets fired only once
                            if (!this.instance.isOver) {
                                this.instance.isOver = 1;
                                //Now we fake the start of dragging for the sortable instance,
                                //by cloning the list group item, appending it to the sortable and using it as inst.currentItem
                                //We can then fire the start event of the sortable with our passed browser event, and our own helper (so it doesn't create a new one)
                                this.instance.currentItem = $(that).clone().removeAttr("id").appendTo(this.instance.element).data("ui-sortable-item", true);
                                this.instance.options._helper = this.instance.options.helper;
                                //Store helper option to later restore it
                                this.instance.options.helper = function() {
                                    return ui.helper[0];
                                };
                                event.target = this.instance.currentItem[0];
                                this.instance._mouseCapture(event, true);
                                this.instance._mouseStart(event, true, true);
                                //Because the browser event is way off the new appended portlet, we modify a couple of variables to reflect the changes
                                this.instance.offset.click.top = inst.offset.click.top;
                                this.instance.offset.click.left = inst.offset.click.left;
                                this.instance.offset.parent.left -= inst.offset.parent.left - this.instance.offset.parent.left;
                                this.instance.offset.parent.top -= inst.offset.parent.top - this.instance.offset.parent.top;
                                inst._trigger("toSortable", event);
                                inst.dropped = this.instance.element;
                                //draggable revert needs that
                                //hack so receive/update callbacks work (mostly)
                                inst.currentItem = inst.element;
                                this.instance.fromOutside = inst;
                            }
                            //Provided we did all the previous steps, we can fire the drag event of the sortable on every draggable drag, when it intersects with the sortable
                            if (this.instance.currentItem) {
                                this.instance._mouseDrag(event);
                            }
                        } else {
                            //If it doesn't intersect with the sortable, and it intersected before,
                            //we fake the drag stop of the sortable, but make sure it doesn't remove the helper by using cancelHelperRemoval
                            if (this.instance.isOver) {
                                this.instance.isOver = 0;
                                this.instance.cancelHelperRemoval = true;
                                //Prevent reverting on this forced stop
                                this.instance.options.revert = false;
                                // The out event needs to be triggered independently
                                this.instance._trigger("out", event, this.instance._uiHash(this.instance));
                                this.instance._mouseStop(event, true);
                                this.instance.options.helper = this.instance.options._helper;
                                //Now we remove our currentItem, the list group clone again, and the placeholder, and animate the helper back to it's original size
                                this.instance.currentItem.remove();
                                if (this.instance.placeholder) {
                                    this.instance.placeholder.remove();
                                }
                                inst._trigger("fromSortable", event);
                                inst.dropped = false;
                            }
                        }
                    });
                }
            });
            $.ui.plugin.add("draggable", "cursor", {
                start: function() {
                    var t = $("body"), o = $(this).data("ui-draggable").options;
                    if (t.css("cursor")) {
                        o._cursor = t.css("cursor");
                    }
                    t.css("cursor", o.cursor);
                },
                stop: function() {
                    var o = $(this).data("ui-draggable").options;
                    if (o._cursor) {
                        $("body").css("cursor", o._cursor);
                    }
                }
            });
            $.ui.plugin.add("draggable", "opacity", {
                start: function(event, ui) {
                    var t = $(ui.helper), o = $(this).data("ui-draggable").options;
                    if (t.css("opacity")) {
                        o._opacity = t.css("opacity");
                    }
                    t.css("opacity", o.opacity);
                },
                stop: function(event, ui) {
                    var o = $(this).data("ui-draggable").options;
                    if (o._opacity) {
                        $(ui.helper).css("opacity", o._opacity);
                    }
                }
            });
            $.ui.plugin.add("draggable", "scroll", {
                start: function() {
                    var i = $(this).data("ui-draggable");
                    if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
                        i.overflowOffset = i.scrollParent.offset();
                    }
                },
                drag: function(event) {
                    var i = $(this).data("ui-draggable"), o = i.options, scrolled = false;
                    if (i.scrollParent[0] !== document && i.scrollParent[0].tagName !== "HTML") {
                        if (!o.axis || o.axis !== "x") {
                            if (i.overflowOffset.top + i.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
                                i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop + o.scrollSpeed;
                            } else if (event.pageY - i.overflowOffset.top < o.scrollSensitivity) {
                                i.scrollParent[0].scrollTop = scrolled = i.scrollParent[0].scrollTop - o.scrollSpeed;
                            }
                        }
                        if (!o.axis || o.axis !== "y") {
                            if (i.overflowOffset.left + i.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
                                i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft + o.scrollSpeed;
                            } else if (event.pageX - i.overflowOffset.left < o.scrollSensitivity) {
                                i.scrollParent[0].scrollLeft = scrolled = i.scrollParent[0].scrollLeft - o.scrollSpeed;
                            }
                        }
                    } else {
                        if (!o.axis || o.axis !== "x") {
                            if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                                scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                            } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                                scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                            }
                        }
                        if (!o.axis || o.axis !== "y") {
                            if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                                scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                            } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                                scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                            }
                        }
                    }
                    if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                        $.ui.ddmanager.prepareOffsets(i, event);
                    }
                }
            });
            $.ui.plugin.add("draggable", "snap", {
                start: function() {
                    var i = $(this).data("ui-draggable"), o = i.options;
                    i.snapElements = [];
                    $(o.snap.constructor !== String ? o.snap.items || ":data(ui-draggable)" : o.snap).each(function() {
                        var $t = $(this), $o = $t.offset();
                        if (this !== i.element[0]) {
                            i.snapElements.push({
                                item: this,
                                width: $t.outerWidth(),
                                height: $t.outerHeight(),
                                top: $o.top,
                                left: $o.left
                            });
                        }
                    });
                },
                drag: function(event, ui) {
                    var ts, bs, ls, rs, l, r, t, b, i, first, inst = $(this).data("ui-draggable"), o = inst.options, d = o.snapTolerance, x1 = ui.offset.left, x2 = x1 + inst.helperProportions.width, y1 = ui.offset.top, y2 = y1 + inst.helperProportions.height;
                    for (i = inst.snapElements.length - 1; i >= 0; i--) {
                        l = inst.snapElements[i].left;
                        r = l + inst.snapElements[i].width;
                        t = inst.snapElements[i].top;
                        b = t + inst.snapElements[i].height;
                        //Yes, I know, this is insane ;)
                        if (!(l - d < x1 && x1 < r + d && t - d < y1 && y1 < b + d || l - d < x1 && x1 < r + d && t - d < y2 && y2 < b + d || l - d < x2 && x2 < r + d && t - d < y1 && y1 < b + d || l - d < x2 && x2 < r + d && t - d < y2 && y2 < b + d)) {
                            if (inst.snapElements[i].snapping) {
                                inst.options.snap.release && inst.options.snap.release.call(inst.element, event, $.extend(inst._uiHash(), {
                                    snapItem: inst.snapElements[i].item
                                }));
                            }
                            inst.snapElements[i].snapping = false;
                            continue;
                        }
                        if (o.snapMode !== "inner") {
                            ts = Math.abs(t - y2) <= d;
                            bs = Math.abs(b - y1) <= d;
                            ls = Math.abs(l - x2) <= d;
                            rs = Math.abs(r - x1) <= d;
                            if (ts) {
                                ui.position.top = inst._convertPositionTo("relative", {
                                    top: t - inst.helperProportions.height,
                                    left: 0
                                }).top - inst.margins.top;
                            }
                            if (bs) {
                                ui.position.top = inst._convertPositionTo("relative", {
                                    top: b,
                                    left: 0
                                }).top - inst.margins.top;
                            }
                            if (ls) {
                                ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: l - inst.helperProportions.width
                                }).left - inst.margins.left;
                            }
                            if (rs) {
                                ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: r
                                }).left - inst.margins.left;
                            }
                        }
                        first = ts || bs || ls || rs;
                        if (o.snapMode !== "outer") {
                            ts = Math.abs(t - y1) <= d;
                            bs = Math.abs(b - y2) <= d;
                            ls = Math.abs(l - x1) <= d;
                            rs = Math.abs(r - x2) <= d;
                            if (ts) {
                                ui.position.top = inst._convertPositionTo("relative", {
                                    top: t,
                                    left: 0
                                }).top - inst.margins.top;
                            }
                            if (bs) {
                                ui.position.top = inst._convertPositionTo("relative", {
                                    top: b - inst.helperProportions.height,
                                    left: 0
                                }).top - inst.margins.top;
                            }
                            if (ls) {
                                ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: l
                                }).left - inst.margins.left;
                            }
                            if (rs) {
                                ui.position.left = inst._convertPositionTo("relative", {
                                    top: 0,
                                    left: r - inst.helperProportions.width
                                }).left - inst.margins.left;
                            }
                        }
                        if (!inst.snapElements[i].snapping && (ts || bs || ls || rs || first)) {
                            inst.options.snap.snap && inst.options.snap.snap.call(inst.element, event, $.extend(inst._uiHash(), {
                                snapItem: inst.snapElements[i].item
                            }));
                        }
                        inst.snapElements[i].snapping = ts || bs || ls || rs || first;
                    }
                }
            });
            $.ui.plugin.add("draggable", "stack", {
                start: function() {
                    var min, o = this.data("ui-draggable").options, group = $.makeArray($(o.stack)).sort(function(a, b) {
                        return (parseInt($(a).css("zIndex"), 10) || 0) - (parseInt($(b).css("zIndex"), 10) || 0);
                    });
                    if (!group.length) {
                        return;
                    }
                    min = parseInt($(group[0]).css("zIndex"), 10) || 0;
                    $(group).each(function(i) {
                        $(this).css("zIndex", min + i);
                    });
                    this.css("zIndex", min + group.length);
                }
            });
            $.ui.plugin.add("draggable", "zIndex", {
                start: function(event, ui) {
                    var t = $(ui.helper), o = $(this).data("ui-draggable").options;
                    if (t.css("zIndex")) {
                        o._zIndex = t.css("zIndex");
                    }
                    t.css("zIndex", o.zIndex);
                },
                stop: function(event, ui) {
                    var o = $(this).data("ui-draggable").options;
                    if (o._zIndex) {
                        $(ui.helper).css("zIndex", o._zIndex);
                    }
                }
            });
        })(jQuery);
        (function($, undefined) {
            function isOverAxis(x, reference, size) {
                return x > reference && x < reference + size;
            }
            $.widget("ui.droppable", {
                version: "1.10.2",
                widgetEventPrefix: "drop",
                options: {
                    accept: "*",
                    activeClass: false,
                    addClasses: true,
                    greedy: false,
                    hoverClass: false,
                    scope: "default",
                    tolerance: "intersect",
                    // callbacks
                    activate: null,
                    deactivate: null,
                    drop: null,
                    out: null,
                    over: null
                },
                _create: function() {
                    var o = this.options, accept = o.accept;
                    this.isover = false;
                    this.isout = true;
                    this.accept = $.isFunction(accept) ? accept : function(d) {
                        return d.is(accept);
                    };
                    //Store the droppable's proportions
                    this.proportions = {
                        width: this.element[0].offsetWidth,
                        height: this.element[0].offsetHeight
                    };
                    // Add the reference and positions to the manager
                    $.ui.ddmanager.droppables[o.scope] = $.ui.ddmanager.droppables[o.scope] || [];
                    $.ui.ddmanager.droppables[o.scope].push(this);
                    o.addClasses && this.element.addClass("ui-droppable");
                },
                _destroy: function() {
                    var i = 0, drop = $.ui.ddmanager.droppables[this.options.scope];
                    for (;i < drop.length; i++) {
                        if (drop[i] === this) {
                            drop.splice(i, 1);
                        }
                    }
                    this.element.removeClass("ui-droppable ui-droppable-disabled");
                },
                _setOption: function(key, value) {
                    if (key === "accept") {
                        this.accept = $.isFunction(value) ? value : function(d) {
                            return d.is(value);
                        };
                    }
                    $.Widget.prototype._setOption.apply(this, arguments);
                },
                _activate: function(event) {
                    var draggable = $.ui.ddmanager.current;
                    if (this.options.activeClass) {
                        this.element.addClass(this.options.activeClass);
                    }
                    if (draggable) {
                        this._trigger("activate", event, this.ui(draggable));
                    }
                },
                _deactivate: function(event) {
                    var draggable = $.ui.ddmanager.current;
                    if (this.options.activeClass) {
                        this.element.removeClass(this.options.activeClass);
                    }
                    if (draggable) {
                        this._trigger("deactivate", event, this.ui(draggable));
                    }
                },
                _over: function(event) {
                    var draggable = $.ui.ddmanager.current;
                    // Bail if draggable and droppable are same element
                    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                        return;
                    }
                    if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                        if (this.options.hoverClass) {
                            this.element.addClass(this.options.hoverClass);
                        }
                        this._trigger("over", event, this.ui(draggable));
                    }
                },
                _out: function(event) {
                    var draggable = $.ui.ddmanager.current;
                    // Bail if draggable and droppable are same element
                    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                        return;
                    }
                    if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                        if (this.options.hoverClass) {
                            this.element.removeClass(this.options.hoverClass);
                        }
                        this._trigger("out", event, this.ui(draggable));
                    }
                },
                _drop: function(event, custom) {
                    var draggable = custom || $.ui.ddmanager.current, childrenIntersection = false;
                    // Bail if draggable and droppable are same element
                    if (!draggable || (draggable.currentItem || draggable.element)[0] === this.element[0]) {
                        return false;
                    }
                    this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                        var inst = $.data(this, "ui-droppable");
                        if (inst.options.greedy && !inst.options.disabled && inst.options.scope === draggable.options.scope && inst.accept.call(inst.element[0], draggable.currentItem || draggable.element) && $.ui.intersect(draggable, $.extend(inst, {
                            offset: inst.element.offset()
                        }), inst.options.tolerance)) {
                            childrenIntersection = true;
                            return false;
                        }
                    });
                    if (childrenIntersection) {
                        return false;
                    }
                    if (this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                        if (this.options.activeClass) {
                            this.element.removeClass(this.options.activeClass);
                        }
                        if (this.options.hoverClass) {
                            this.element.removeClass(this.options.hoverClass);
                        }
                        this._trigger("drop", event, this.ui(draggable));
                        return this.element;
                    }
                    return false;
                },
                ui: function(c) {
                    return {
                        draggable: c.currentItem || c.element,
                        helper: c.helper,
                        position: c.position,
                        offset: c.positionAbs
                    };
                }
            });
            $.ui.intersect = function(draggable, droppable, toleranceMode) {
                if (!droppable.offset) {
                    return false;
                }
                var draggableLeft, draggableTop, x1 = (draggable.positionAbs || draggable.position.absolute).left, x2 = x1 + draggable.helperProportions.width, y1 = (draggable.positionAbs || draggable.position.absolute).top, y2 = y1 + draggable.helperProportions.height, l = droppable.offset.left, r = l + droppable.proportions.width, t = droppable.offset.top, b = t + droppable.proportions.height;
                switch (toleranceMode) {
                  case "fit":
                    return l <= x1 && x2 <= r && t <= y1 && y2 <= b;

                  case "intersect":
                    return l < x1 + draggable.helperProportions.width / 2 && // Right Half
                    x2 - draggable.helperProportions.width / 2 < r && // Left Half
                    t < y1 + draggable.helperProportions.height / 2 && // Bottom Half
                    y2 - draggable.helperProportions.height / 2 < b;

                  // Top Half
                    case "pointer":
                    draggableLeft = (draggable.positionAbs || draggable.position.absolute).left + (draggable.clickOffset || draggable.offset.click).left;
                    draggableTop = (draggable.positionAbs || draggable.position.absolute).top + (draggable.clickOffset || draggable.offset.click).top;
                    return isOverAxis(draggableTop, t, droppable.proportions.height) && isOverAxis(draggableLeft, l, droppable.proportions.width);

                  case "touch":
                    return (y1 >= t && y1 <= b || // Top edge touching
                    y2 >= t && y2 <= b || // Bottom edge touching
                    y1 < t && y2 > b) && (x1 >= l && x1 <= r || // Left edge touching
                    x2 >= l && x2 <= r || // Right edge touching
                    x1 < l && x2 > r);

                  default:
                    return false;
                }
            };
            /*
	This manager tracks offsets of draggables and droppables
*/
            $.ui.ddmanager = {
                current: null,
                droppables: {
                    "default": []
                },
                prepareOffsets: function(t, event) {
                    var i, j, m = $.ui.ddmanager.droppables[t.options.scope] || [], type = event ? event.type : null, // workaround for #2317
                    list = (t.currentItem || t.element).find(":data(ui-droppable)").addBack();
                    droppablesLoop: for (i = 0; i < m.length; i++) {
                        //No disabled and non-accepted
                        if (m[i].options.disabled || t && !m[i].accept.call(m[i].element[0], t.currentItem || t.element)) {
                            continue;
                        }
                        // Filter out elements in the current dragged item
                        for (j = 0; j < list.length; j++) {
                            if (list[j] === m[i].element[0]) {
                                m[i].proportions.height = 0;
                                continue droppablesLoop;
                            }
                        }
                        m[i].visible = m[i].element.css("display") !== "none";
                        if (!m[i].visible) {
                            continue;
                        }
                        //Activate the droppable if used directly from draggables
                        if (type === "mousedown") {
                            m[i]._activate.call(m[i], event);
                        }
                        m[i].offset = m[i].element.offset();
                        m[i].proportions = {
                            width: m[i].element[0].offsetWidth,
                            height: m[i].element[0].offsetHeight
                        };
                    }
                },
                drop: function(draggable, event) {
                    var dropped = false;
                    // Create a copy of the droppables in case the list changes during the drop (#9116)
                    $.each(($.ui.ddmanager.droppables[draggable.options.scope] || []).slice(), function() {
                        if (!this.options) {
                            return;
                        }
                        if (!this.options.disabled && this.visible && $.ui.intersect(draggable, this, this.options.tolerance)) {
                            dropped = this._drop.call(this, event) || dropped;
                        }
                        if (!this.options.disabled && this.visible && this.accept.call(this.element[0], draggable.currentItem || draggable.element)) {
                            this.isout = true;
                            this.isover = false;
                            this._deactivate.call(this, event);
                        }
                    });
                    return dropped;
                },
                dragStart: function(draggable, event) {
                    //Listen for scrolling so that if the dragging causes scrolling the position of the droppables can be recalculated (see #5003)
                    draggable.element.parentsUntil("body").bind("scroll.droppable", function() {
                        if (!draggable.options.refreshPositions) {
                            $.ui.ddmanager.prepareOffsets(draggable, event);
                        }
                    });
                },
                drag: function(draggable, event) {
                    //If you have a highly dynamic page, you might try this option. It renders positions every time you move the mouse.
                    if (draggable.options.refreshPositions) {
                        $.ui.ddmanager.prepareOffsets(draggable, event);
                    }
                    //Run through all droppables and check their positions based on specific tolerance options
                    $.each($.ui.ddmanager.droppables[draggable.options.scope] || [], function() {
                        if (this.options.disabled || this.greedyChild || !this.visible) {
                            return;
                        }
                        var parentInstance, scope, parent, intersects = $.ui.intersect(draggable, this, this.options.tolerance), c = !intersects && this.isover ? "isout" : intersects && !this.isover ? "isover" : null;
                        if (!c) {
                            return;
                        }
                        if (this.options.greedy) {
                            // find droppable parents with same scope
                            scope = this.options.scope;
                            parent = this.element.parents(":data(ui-droppable)").filter(function() {
                                return $.data(this, "ui-droppable").options.scope === scope;
                            });
                            if (parent.length) {
                                parentInstance = $.data(parent[0], "ui-droppable");
                                parentInstance.greedyChild = c === "isover";
                            }
                        }
                        // we just moved into a greedy child
                        if (parentInstance && c === "isover") {
                            parentInstance.isover = false;
                            parentInstance.isout = true;
                            parentInstance._out.call(parentInstance, event);
                        }
                        this[c] = true;
                        this[c === "isout" ? "isover" : "isout"] = false;
                        this[c === "isover" ? "_over" : "_out"].call(this, event);
                        // we just moved out of a greedy child
                        if (parentInstance && c === "isout") {
                            parentInstance.isout = false;
                            parentInstance.isover = true;
                            parentInstance._over.call(parentInstance, event);
                        }
                    });
                },
                dragStop: function(draggable, event) {
                    draggable.element.parentsUntil("body").unbind("scroll.droppable");
                    //Call prepareOffsets one final time since IE does not fire return scroll events when overflow was caused by drag (see #5003)
                    if (!draggable.options.refreshPositions) {
                        $.ui.ddmanager.prepareOffsets(draggable, event);
                    }
                }
            };
        })(jQuery);
        (function($, undefined) {
            function num(v) {
                return parseInt(v, 10) || 0;
            }
            function isNumber(value) {
                return !isNaN(parseInt(value, 10));
            }
            $.widget("ui.resizable", $.ui.mouse, {
                version: "1.10.2",
                widgetEventPrefix: "resize",
                options: {
                    alsoResize: false,
                    animate: false,
                    animateDuration: "slow",
                    animateEasing: "swing",
                    aspectRatio: false,
                    autoHide: false,
                    containment: false,
                    ghost: false,
                    grid: false,
                    handles: "e,s,se",
                    helper: false,
                    maxHeight: null,
                    maxWidth: null,
                    minHeight: 10,
                    minWidth: 10,
                    // See #7960
                    zIndex: 90,
                    // callbacks
                    resize: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    var n, i, handle, axis, hname, that = this, o = this.options;
                    this.element.addClass("ui-resizable");
                    $.extend(this, {
                        _aspectRatio: !!o.aspectRatio,
                        aspectRatio: o.aspectRatio,
                        originalElement: this.element,
                        _proportionallyResizeElements: [],
                        _helper: o.helper || o.ghost || o.animate ? o.helper || "ui-resizable-helper" : null
                    });
                    //Wrap the element if it cannot hold child nodes
                    if (this.element[0].nodeName.match(/canvas|textarea|input|select|button|img/i)) {
                        //Create a wrapper element and set the wrapper to the new current internal element
                        this.element.wrap($("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                            position: this.element.css("position"),
                            width: this.element.outerWidth(),
                            height: this.element.outerHeight(),
                            top: this.element.css("top"),
                            left: this.element.css("left")
                        }));
                        //Overwrite the original this.element
                        this.element = this.element.parent().data("ui-resizable", this.element.data("ui-resizable"));
                        this.elementIsWrapper = true;
                        //Move margins to the wrapper
                        this.element.css({
                            marginLeft: this.originalElement.css("marginLeft"),
                            marginTop: this.originalElement.css("marginTop"),
                            marginRight: this.originalElement.css("marginRight"),
                            marginBottom: this.originalElement.css("marginBottom")
                        });
                        this.originalElement.css({
                            marginLeft: 0,
                            marginTop: 0,
                            marginRight: 0,
                            marginBottom: 0
                        });
                        //Prevent Safari textarea resize
                        this.originalResizeStyle = this.originalElement.css("resize");
                        this.originalElement.css("resize", "none");
                        //Push the actual element to our proportionallyResize internal array
                        this._proportionallyResizeElements.push(this.originalElement.css({
                            position: "static",
                            zoom: 1,
                            display: "block"
                        }));
                        // avoid IE jump (hard set the margin)
                        this.originalElement.css({
                            margin: this.originalElement.css("margin")
                        });
                        // fix handlers offset
                        this._proportionallyResize();
                    }
                    this.handles = o.handles || (!$(".ui-resizable-handle", this.element).length ? "e,s,se" : {
                        n: ".ui-resizable-n",
                        e: ".ui-resizable-e",
                        s: ".ui-resizable-s",
                        w: ".ui-resizable-w",
                        se: ".ui-resizable-se",
                        sw: ".ui-resizable-sw",
                        ne: ".ui-resizable-ne",
                        nw: ".ui-resizable-nw"
                    });
                    if (this.handles.constructor === String) {
                        if (this.handles === "all") {
                            this.handles = "n,e,s,w,se,sw,ne,nw";
                        }
                        n = this.handles.split(",");
                        this.handles = {};
                        for (i = 0; i < n.length; i++) {
                            handle = $.trim(n[i]);
                            hname = "ui-resizable-" + handle;
                            axis = $("<div class='ui-resizable-handle " + hname + "'></div>");
                            // Apply zIndex to all handles - see #7960
                            axis.css({
                                zIndex: o.zIndex
                            });
                            //TODO : What's going on here?
                            if ("se" === handle) {
                                axis.addClass("ui-icon ui-icon-gripsmall-diagonal-se");
                            }
                            //Insert into internal handles object and append to element
                            this.handles[handle] = ".ui-resizable-" + handle;
                            this.element.append(axis);
                        }
                    }
                    this._renderAxis = function(target) {
                        var i, axis, padPos, padWrapper;
                        target = target || this.element;
                        for (i in this.handles) {
                            if (this.handles[i].constructor === String) {
                                this.handles[i] = $(this.handles[i], this.element).show();
                            }
                            //Apply pad to wrapper element, needed to fix axis position (textarea, inputs, scrolls)
                            if (this.elementIsWrapper && this.originalElement[0].nodeName.match(/textarea|input|select|button/i)) {
                                axis = $(this.handles[i], this.element);
                                //Checking the correct pad and border
                                padWrapper = /sw|ne|nw|se|n|s/.test(i) ? axis.outerHeight() : axis.outerWidth();
                                //The padding type i have to apply...
                                padPos = [ "padding", /ne|nw|n/.test(i) ? "Top" : /se|sw|s/.test(i) ? "Bottom" : /^e$/.test(i) ? "Right" : "Left" ].join("");
                                target.css(padPos, padWrapper);
                                this._proportionallyResize();
                            }
                            //TODO: What's that good for? There's not anything to be executed left
                            if (!$(this.handles[i]).length) {
                                continue;
                            }
                        }
                    };
                    //TODO: make renderAxis a prototype function
                    this._renderAxis(this.element);
                    this._handles = $(".ui-resizable-handle", this.element).disableSelection();
                    //Matching axis name
                    this._handles.mouseover(function() {
                        if (!that.resizing) {
                            if (this.className) {
                                axis = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);
                            }
                            //Axis, default = se
                            that.axis = axis && axis[1] ? axis[1] : "se";
                        }
                    });
                    //If we want to auto hide the elements
                    if (o.autoHide) {
                        this._handles.hide();
                        $(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                            if (o.disabled) {
                                return;
                            }
                            $(this).removeClass("ui-resizable-autohide");
                            that._handles.show();
                        }).mouseleave(function() {
                            if (o.disabled) {
                                return;
                            }
                            if (!that.resizing) {
                                $(this).addClass("ui-resizable-autohide");
                                that._handles.hide();
                            }
                        });
                    }
                    //Initialize the mouse interaction
                    this._mouseInit();
                },
                _destroy: function() {
                    this._mouseDestroy();
                    var wrapper, _destroy = function(exp) {
                        $(exp).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove();
                    };
                    //TODO: Unwrap at same DOM position
                    if (this.elementIsWrapper) {
                        _destroy(this.element);
                        wrapper = this.element;
                        this.originalElement.css({
                            position: wrapper.css("position"),
                            width: wrapper.outerWidth(),
                            height: wrapper.outerHeight(),
                            top: wrapper.css("top"),
                            left: wrapper.css("left")
                        }).insertAfter(wrapper);
                        wrapper.remove();
                    }
                    this.originalElement.css("resize", this.originalResizeStyle);
                    _destroy(this.originalElement);
                    return this;
                },
                _mouseCapture: function(event) {
                    var i, handle, capture = false;
                    for (i in this.handles) {
                        handle = $(this.handles[i])[0];
                        if (handle === event.target || $.contains(handle, event.target)) {
                            capture = true;
                        }
                    }
                    return !this.options.disabled && capture;
                },
                _mouseStart: function(event) {
                    var curleft, curtop, cursor, o = this.options, iniPos = this.element.position(), el = this.element;
                    this.resizing = true;
                    // bugfix for http://dev.jquery.com/ticket/1749
                    if (/absolute/.test(el.css("position"))) {
                        el.css({
                            position: "absolute",
                            top: el.css("top"),
                            left: el.css("left")
                        });
                    } else if (el.is(".ui-draggable")) {
                        el.css({
                            position: "absolute",
                            top: iniPos.top,
                            left: iniPos.left
                        });
                    }
                    this._renderProxy();
                    curleft = num(this.helper.css("left"));
                    curtop = num(this.helper.css("top"));
                    if (o.containment) {
                        curleft += $(o.containment).scrollLeft() || 0;
                        curtop += $(o.containment).scrollTop() || 0;
                    }
                    //Store needed variables
                    this.offset = this.helper.offset();
                    this.position = {
                        left: curleft,
                        top: curtop
                    };
                    this.size = this._helper ? {
                        width: el.outerWidth(),
                        height: el.outerHeight()
                    } : {
                        width: el.width(),
                        height: el.height()
                    };
                    this.originalSize = this._helper ? {
                        width: el.outerWidth(),
                        height: el.outerHeight()
                    } : {
                        width: el.width(),
                        height: el.height()
                    };
                    this.originalPosition = {
                        left: curleft,
                        top: curtop
                    };
                    this.sizeDiff = {
                        width: el.outerWidth() - el.width(),
                        height: el.outerHeight() - el.height()
                    };
                    this.originalMousePosition = {
                        left: event.pageX,
                        top: event.pageY
                    };
                    //Aspect Ratio
                    this.aspectRatio = typeof o.aspectRatio === "number" ? o.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
                    cursor = $(".ui-resizable-" + this.axis).css("cursor");
                    $("body").css("cursor", cursor === "auto" ? this.axis + "-resize" : cursor);
                    el.addClass("ui-resizable-resizing");
                    this._propagate("start", event);
                    return true;
                },
                _mouseDrag: function(event) {
                    //Increase performance, avoid regex
                    var data, el = this.helper, props = {}, smp = this.originalMousePosition, a = this.axis, prevTop = this.position.top, prevLeft = this.position.left, prevWidth = this.size.width, prevHeight = this.size.height, dx = event.pageX - smp.left || 0, dy = event.pageY - smp.top || 0, trigger = this._change[a];
                    if (!trigger) {
                        return false;
                    }
                    // Calculate the attrs that will be change
                    data = trigger.apply(this, [ event, dx, dy ]);
                    // Put this in the mouseDrag handler since the user can start pressing shift while resizing
                    this._updateVirtualBoundaries(event.shiftKey);
                    if (this._aspectRatio || event.shiftKey) {
                        data = this._updateRatio(data, event);
                    }
                    data = this._respectSize(data, event);
                    this._updateCache(data);
                    // plugins callbacks need to be called first
                    this._propagate("resize", event);
                    if (this.position.top !== prevTop) {
                        props.top = this.position.top + "px";
                    }
                    if (this.position.left !== prevLeft) {
                        props.left = this.position.left + "px";
                    }
                    if (this.size.width !== prevWidth) {
                        props.width = this.size.width + "px";
                    }
                    if (this.size.height !== prevHeight) {
                        props.height = this.size.height + "px";
                    }
                    el.css(props);
                    if (!this._helper && this._proportionallyResizeElements.length) {
                        this._proportionallyResize();
                    }
                    // Call the user callback if the element was resized
                    if (!$.isEmptyObject(props)) {
                        this._trigger("resize", event, this.ui());
                    }
                    return false;
                },
                _mouseStop: function(event) {
                    this.resizing = false;
                    var pr, ista, soffseth, soffsetw, s, left, top, o = this.options, that = this;
                    if (this._helper) {
                        pr = this._proportionallyResizeElements;
                        ista = pr.length && /textarea/i.test(pr[0].nodeName);
                        soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height;
                        soffsetw = ista ? 0 : that.sizeDiff.width;
                        s = {
                            width: that.helper.width() - soffsetw,
                            height: that.helper.height() - soffseth
                        };
                        left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null;
                        top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
                        if (!o.animate) {
                            this.element.css($.extend(s, {
                                top: top,
                                left: left
                            }));
                        }
                        that.helper.height(that.size.height);
                        that.helper.width(that.size.width);
                        if (this._helper && !o.animate) {
                            this._proportionallyResize();
                        }
                    }
                    $("body").css("cursor", "auto");
                    this.element.removeClass("ui-resizable-resizing");
                    this._propagate("stop", event);
                    if (this._helper) {
                        this.helper.remove();
                    }
                    return false;
                },
                _updateVirtualBoundaries: function(forceAspectRatio) {
                    var pMinWidth, pMaxWidth, pMinHeight, pMaxHeight, b, o = this.options;
                    b = {
                        minWidth: isNumber(o.minWidth) ? o.minWidth : 0,
                        maxWidth: isNumber(o.maxWidth) ? o.maxWidth : Infinity,
                        minHeight: isNumber(o.minHeight) ? o.minHeight : 0,
                        maxHeight: isNumber(o.maxHeight) ? o.maxHeight : Infinity
                    };
                    if (this._aspectRatio || forceAspectRatio) {
                        // We want to create an enclosing box whose aspect ration is the requested one
                        // First, compute the "projected" size for each dimension based on the aspect ratio and other dimension
                        pMinWidth = b.minHeight * this.aspectRatio;
                        pMinHeight = b.minWidth / this.aspectRatio;
                        pMaxWidth = b.maxHeight * this.aspectRatio;
                        pMaxHeight = b.maxWidth / this.aspectRatio;
                        if (pMinWidth > b.minWidth) {
                            b.minWidth = pMinWidth;
                        }
                        if (pMinHeight > b.minHeight) {
                            b.minHeight = pMinHeight;
                        }
                        if (pMaxWidth < b.maxWidth) {
                            b.maxWidth = pMaxWidth;
                        }
                        if (pMaxHeight < b.maxHeight) {
                            b.maxHeight = pMaxHeight;
                        }
                    }
                    this._vBoundaries = b;
                },
                _updateCache: function(data) {
                    this.offset = this.helper.offset();
                    if (isNumber(data.left)) {
                        this.position.left = data.left;
                    }
                    if (isNumber(data.top)) {
                        this.position.top = data.top;
                    }
                    if (isNumber(data.height)) {
                        this.size.height = data.height;
                    }
                    if (isNumber(data.width)) {
                        this.size.width = data.width;
                    }
                },
                _updateRatio: function(data) {
                    var cpos = this.position, csize = this.size, a = this.axis;
                    if (isNumber(data.height)) {
                        data.width = data.height * this.aspectRatio;
                    } else if (isNumber(data.width)) {
                        data.height = data.width / this.aspectRatio;
                    }
                    if (a === "sw") {
                        data.left = cpos.left + (csize.width - data.width);
                        data.top = null;
                    }
                    if (a === "nw") {
                        data.top = cpos.top + (csize.height - data.height);
                        data.left = cpos.left + (csize.width - data.width);
                    }
                    return data;
                },
                _respectSize: function(data) {
                    var o = this._vBoundaries, a = this.axis, ismaxw = isNumber(data.width) && o.maxWidth && o.maxWidth < data.width, ismaxh = isNumber(data.height) && o.maxHeight && o.maxHeight < data.height, isminw = isNumber(data.width) && o.minWidth && o.minWidth > data.width, isminh = isNumber(data.height) && o.minHeight && o.minHeight > data.height, dw = this.originalPosition.left + this.originalSize.width, dh = this.position.top + this.size.height, cw = /sw|nw|w/.test(a), ch = /nw|ne|n/.test(a);
                    if (isminw) {
                        data.width = o.minWidth;
                    }
                    if (isminh) {
                        data.height = o.minHeight;
                    }
                    if (ismaxw) {
                        data.width = o.maxWidth;
                    }
                    if (ismaxh) {
                        data.height = o.maxHeight;
                    }
                    if (isminw && cw) {
                        data.left = dw - o.minWidth;
                    }
                    if (ismaxw && cw) {
                        data.left = dw - o.maxWidth;
                    }
                    if (isminh && ch) {
                        data.top = dh - o.minHeight;
                    }
                    if (ismaxh && ch) {
                        data.top = dh - o.maxHeight;
                    }
                    // fixing jump error on top/left - bug #2330
                    if (!data.width && !data.height && !data.left && data.top) {
                        data.top = null;
                    } else if (!data.width && !data.height && !data.top && data.left) {
                        data.left = null;
                    }
                    return data;
                },
                _proportionallyResize: function() {
                    if (!this._proportionallyResizeElements.length) {
                        return;
                    }
                    var i, j, borders, paddings, prel, element = this.helper || this.element;
                    for (i = 0; i < this._proportionallyResizeElements.length; i++) {
                        prel = this._proportionallyResizeElements[i];
                        if (!this.borderDif) {
                            this.borderDif = [];
                            borders = [ prel.css("borderTopWidth"), prel.css("borderRightWidth"), prel.css("borderBottomWidth"), prel.css("borderLeftWidth") ];
                            paddings = [ prel.css("paddingTop"), prel.css("paddingRight"), prel.css("paddingBottom"), prel.css("paddingLeft") ];
                            for (j = 0; j < borders.length; j++) {
                                this.borderDif[j] = (parseInt(borders[j], 10) || 0) + (parseInt(paddings[j], 10) || 0);
                            }
                        }
                        prel.css({
                            height: element.height() - this.borderDif[0] - this.borderDif[2] || 0,
                            width: element.width() - this.borderDif[1] - this.borderDif[3] || 0
                        });
                    }
                },
                _renderProxy: function() {
                    var el = this.element, o = this.options;
                    this.elementOffset = el.offset();
                    if (this._helper) {
                        this.helper = this.helper || $("<div style='overflow:hidden;'></div>");
                        this.helper.addClass(this._helper).css({
                            width: this.element.outerWidth() - 1,
                            height: this.element.outerHeight() - 1,
                            position: "absolute",
                            left: this.elementOffset.left + "px",
                            top: this.elementOffset.top + "px",
                            zIndex: ++o.zIndex
                        });
                        this.helper.appendTo("body").disableSelection();
                    } else {
                        this.helper = this.element;
                    }
                },
                _change: {
                    e: function(event, dx) {
                        return {
                            width: this.originalSize.width + dx
                        };
                    },
                    w: function(event, dx) {
                        var cs = this.originalSize, sp = this.originalPosition;
                        return {
                            left: sp.left + dx,
                            width: cs.width - dx
                        };
                    },
                    n: function(event, dx, dy) {
                        var cs = this.originalSize, sp = this.originalPosition;
                        return {
                            top: sp.top + dy,
                            height: cs.height - dy
                        };
                    },
                    s: function(event, dx, dy) {
                        return {
                            height: this.originalSize.height + dy
                        };
                    },
                    se: function(event, dx, dy) {
                        return $.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
                    },
                    sw: function(event, dx, dy) {
                        return $.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
                    },
                    ne: function(event, dx, dy) {
                        return $.extend(this._change.n.apply(this, arguments), this._change.e.apply(this, [ event, dx, dy ]));
                    },
                    nw: function(event, dx, dy) {
                        return $.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [ event, dx, dy ]));
                    }
                },
                _propagate: function(n, event) {
                    $.ui.plugin.call(this, n, [ event, this.ui() ]);
                    n !== "resize" && this._trigger(n, event, this.ui());
                },
                plugins: {},
                ui: function() {
                    return {
                        originalElement: this.originalElement,
                        element: this.element,
                        helper: this.helper,
                        position: this.position,
                        size: this.size,
                        originalSize: this.originalSize,
                        originalPosition: this.originalPosition
                    };
                }
            });
            /*
 * Resizable Extensions
 */
            $.ui.plugin.add("resizable", "animate", {
                stop: function(event) {
                    var that = $(this).data("ui-resizable"), o = that.options, pr = that._proportionallyResizeElements, ista = pr.length && /textarea/i.test(pr[0].nodeName), soffseth = ista && $.ui.hasScroll(pr[0], "left") ? 0 : that.sizeDiff.height, soffsetw = ista ? 0 : that.sizeDiff.width, style = {
                        width: that.size.width - soffsetw,
                        height: that.size.height - soffseth
                    }, left = parseInt(that.element.css("left"), 10) + (that.position.left - that.originalPosition.left) || null, top = parseInt(that.element.css("top"), 10) + (that.position.top - that.originalPosition.top) || null;
                    that.element.animate($.extend(style, top && left ? {
                        top: top,
                        left: left
                    } : {}), {
                        duration: o.animateDuration,
                        easing: o.animateEasing,
                        step: function() {
                            var data = {
                                width: parseInt(that.element.css("width"), 10),
                                height: parseInt(that.element.css("height"), 10),
                                top: parseInt(that.element.css("top"), 10),
                                left: parseInt(that.element.css("left"), 10)
                            };
                            if (pr && pr.length) {
                                $(pr[0]).css({
                                    width: data.width,
                                    height: data.height
                                });
                            }
                            // propagating resize, and updating values for each animation step
                            that._updateCache(data);
                            that._propagate("resize", event);
                        }
                    });
                }
            });
            $.ui.plugin.add("resizable", "containment", {
                start: function() {
                    var element, p, co, ch, cw, width, height, that = $(this).data("ui-resizable"), o = that.options, el = that.element, oc = o.containment, ce = oc instanceof $ ? oc.get(0) : /parent/.test(oc) ? el.parent().get(0) : oc;
                    if (!ce) {
                        return;
                    }
                    that.containerElement = $(ce);
                    if (/document/.test(oc) || oc === document) {
                        that.containerOffset = {
                            left: 0,
                            top: 0
                        };
                        that.containerPosition = {
                            left: 0,
                            top: 0
                        };
                        that.parentData = {
                            element: $(document),
                            left: 0,
                            top: 0,
                            width: $(document).width(),
                            height: $(document).height() || document.body.parentNode.scrollHeight
                        };
                    } else {
                        element = $(ce);
                        p = [];
                        $([ "Top", "Right", "Left", "Bottom" ]).each(function(i, name) {
                            p[i] = num(element.css("padding" + name));
                        });
                        that.containerOffset = element.offset();
                        that.containerPosition = element.position();
                        that.containerSize = {
                            height: element.innerHeight() - p[3],
                            width: element.innerWidth() - p[1]
                        };
                        co = that.containerOffset;
                        ch = that.containerSize.height;
                        cw = that.containerSize.width;
                        width = $.ui.hasScroll(ce, "left") ? ce.scrollWidth : cw;
                        height = $.ui.hasScroll(ce) ? ce.scrollHeight : ch;
                        that.parentData = {
                            element: ce,
                            left: co.left,
                            top: co.top,
                            width: width,
                            height: height
                        };
                    }
                },
                resize: function(event) {
                    var woset, hoset, isParent, isOffsetRelative, that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cp = that.position, pRatio = that._aspectRatio || event.shiftKey, cop = {
                        top: 0,
                        left: 0
                    }, ce = that.containerElement;
                    if (ce[0] !== document && /static/.test(ce.css("position"))) {
                        cop = co;
                    }
                    if (cp.left < (that._helper ? co.left : 0)) {
                        that.size.width = that.size.width + (that._helper ? that.position.left - co.left : that.position.left - cop.left);
                        if (pRatio) {
                            that.size.height = that.size.width / that.aspectRatio;
                        }
                        that.position.left = o.helper ? co.left : 0;
                    }
                    if (cp.top < (that._helper ? co.top : 0)) {
                        that.size.height = that.size.height + (that._helper ? that.position.top - co.top : that.position.top);
                        if (pRatio) {
                            that.size.width = that.size.height * that.aspectRatio;
                        }
                        that.position.top = that._helper ? co.top : 0;
                    }
                    that.offset.left = that.parentData.left + that.position.left;
                    that.offset.top = that.parentData.top + that.position.top;
                    woset = Math.abs((that._helper ? that.offset.left - cop.left : that.offset.left - cop.left) + that.sizeDiff.width);
                    hoset = Math.abs((that._helper ? that.offset.top - cop.top : that.offset.top - co.top) + that.sizeDiff.height);
                    isParent = that.containerElement.get(0) === that.element.parent().get(0);
                    isOffsetRelative = /relative|absolute/.test(that.containerElement.css("position"));
                    if (isParent && isOffsetRelative) {
                        woset -= that.parentData.left;
                    }
                    if (woset + that.size.width >= that.parentData.width) {
                        that.size.width = that.parentData.width - woset;
                        if (pRatio) {
                            that.size.height = that.size.width / that.aspectRatio;
                        }
                    }
                    if (hoset + that.size.height >= that.parentData.height) {
                        that.size.height = that.parentData.height - hoset;
                        if (pRatio) {
                            that.size.width = that.size.height * that.aspectRatio;
                        }
                    }
                },
                stop: function() {
                    var that = $(this).data("ui-resizable"), o = that.options, co = that.containerOffset, cop = that.containerPosition, ce = that.containerElement, helper = $(that.helper), ho = helper.offset(), w = helper.outerWidth() - that.sizeDiff.width, h = helper.outerHeight() - that.sizeDiff.height;
                    if (that._helper && !o.animate && /relative/.test(ce.css("position"))) {
                        $(this).css({
                            left: ho.left - cop.left - co.left,
                            width: w,
                            height: h
                        });
                    }
                    if (that._helper && !o.animate && /static/.test(ce.css("position"))) {
                        $(this).css({
                            left: ho.left - cop.left - co.left,
                            width: w,
                            height: h
                        });
                    }
                }
            });
            $.ui.plugin.add("resizable", "alsoResize", {
                start: function() {
                    var that = $(this).data("ui-resizable"), o = that.options, _store = function(exp) {
                        $(exp).each(function() {
                            var el = $(this);
                            el.data("ui-resizable-alsoresize", {
                                width: parseInt(el.width(), 10),
                                height: parseInt(el.height(), 10),
                                left: parseInt(el.css("left"), 10),
                                top: parseInt(el.css("top"), 10)
                            });
                        });
                    };
                    if (typeof o.alsoResize === "object" && !o.alsoResize.parentNode) {
                        if (o.alsoResize.length) {
                            o.alsoResize = o.alsoResize[0];
                            _store(o.alsoResize);
                        } else {
                            $.each(o.alsoResize, function(exp) {
                                _store(exp);
                            });
                        }
                    } else {
                        _store(o.alsoResize);
                    }
                },
                resize: function(event, ui) {
                    var that = $(this).data("ui-resizable"), o = that.options, os = that.originalSize, op = that.originalPosition, delta = {
                        height: that.size.height - os.height || 0,
                        width: that.size.width - os.width || 0,
                        top: that.position.top - op.top || 0,
                        left: that.position.left - op.left || 0
                    }, _alsoResize = function(exp, c) {
                        $(exp).each(function() {
                            var el = $(this), start = $(this).data("ui-resizable-alsoresize"), style = {}, css = c && c.length ? c : el.parents(ui.originalElement[0]).length ? [ "width", "height" ] : [ "width", "height", "top", "left" ];
                            $.each(css, function(i, prop) {
                                var sum = (start[prop] || 0) + (delta[prop] || 0);
                                if (sum && sum >= 0) {
                                    style[prop] = sum || null;
                                }
                            });
                            el.css(style);
                        });
                    };
                    if (typeof o.alsoResize === "object" && !o.alsoResize.nodeType) {
                        $.each(o.alsoResize, function(exp, c) {
                            _alsoResize(exp, c);
                        });
                    } else {
                        _alsoResize(o.alsoResize);
                    }
                },
                stop: function() {
                    $(this).removeData("resizable-alsoresize");
                }
            });
            $.ui.plugin.add("resizable", "ghost", {
                start: function() {
                    var that = $(this).data("ui-resizable"), o = that.options, cs = that.size;
                    that.ghost = that.originalElement.clone();
                    that.ghost.css({
                        opacity: .25,
                        display: "block",
                        position: "relative",
                        height: cs.height,
                        width: cs.width,
                        margin: 0,
                        left: 0,
                        top: 0
                    }).addClass("ui-resizable-ghost").addClass(typeof o.ghost === "string" ? o.ghost : "");
                    that.ghost.appendTo(that.helper);
                },
                resize: function() {
                    var that = $(this).data("ui-resizable");
                    if (that.ghost) {
                        that.ghost.css({
                            position: "relative",
                            height: that.size.height,
                            width: that.size.width
                        });
                    }
                },
                stop: function() {
                    var that = $(this).data("ui-resizable");
                    if (that.ghost && that.helper) {
                        that.helper.get(0).removeChild(that.ghost.get(0));
                    }
                }
            });
            $.ui.plugin.add("resizable", "grid", {
                resize: function() {
                    var that = $(this).data("ui-resizable"), o = that.options, cs = that.size, os = that.originalSize, op = that.originalPosition, a = that.axis, grid = typeof o.grid === "number" ? [ o.grid, o.grid ] : o.grid, gridX = grid[0] || 1, gridY = grid[1] || 1, ox = Math.round((cs.width - os.width) / gridX) * gridX, oy = Math.round((cs.height - os.height) / gridY) * gridY, newWidth = os.width + ox, newHeight = os.height + oy, isMaxWidth = o.maxWidth && o.maxWidth < newWidth, isMaxHeight = o.maxHeight && o.maxHeight < newHeight, isMinWidth = o.minWidth && o.minWidth > newWidth, isMinHeight = o.minHeight && o.minHeight > newHeight;
                    o.grid = grid;
                    if (isMinWidth) {
                        newWidth = newWidth + gridX;
                    }
                    if (isMinHeight) {
                        newHeight = newHeight + gridY;
                    }
                    if (isMaxWidth) {
                        newWidth = newWidth - gridX;
                    }
                    if (isMaxHeight) {
                        newHeight = newHeight - gridY;
                    }
                    if (/^(se|s|e)$/.test(a)) {
                        that.size.width = newWidth;
                        that.size.height = newHeight;
                    } else if (/^(ne)$/.test(a)) {
                        that.size.width = newWidth;
                        that.size.height = newHeight;
                        that.position.top = op.top - oy;
                    } else if (/^(sw)$/.test(a)) {
                        that.size.width = newWidth;
                        that.size.height = newHeight;
                        that.position.left = op.left - ox;
                    } else {
                        that.size.width = newWidth;
                        that.size.height = newHeight;
                        that.position.top = op.top - oy;
                        that.position.left = op.left - ox;
                    }
                }
            });
        })(jQuery);
        (function($, undefined) {
            $.widget("ui.selectable", $.ui.mouse, {
                version: "1.10.2",
                options: {
                    appendTo: "body",
                    autoRefresh: true,
                    distance: 0,
                    filter: "*",
                    tolerance: "touch",
                    // callbacks
                    selected: null,
                    selecting: null,
                    start: null,
                    stop: null,
                    unselected: null,
                    unselecting: null
                },
                _create: function() {
                    var selectees, that = this;
                    this.element.addClass("ui-selectable");
                    this.dragged = false;
                    // cache selectee children based on filter
                    this.refresh = function() {
                        selectees = $(that.options.filter, that.element[0]);
                        selectees.addClass("ui-selectee");
                        selectees.each(function() {
                            var $this = $(this), pos = $this.offset();
                            $.data(this, "selectable-item", {
                                element: this,
                                $element: $this,
                                left: pos.left,
                                top: pos.top,
                                right: pos.left + $this.outerWidth(),
                                bottom: pos.top + $this.outerHeight(),
                                startselected: false,
                                selected: $this.hasClass("ui-selected"),
                                selecting: $this.hasClass("ui-selecting"),
                                unselecting: $this.hasClass("ui-unselecting")
                            });
                        });
                    };
                    this.refresh();
                    this.selectees = selectees.addClass("ui-selectee");
                    this._mouseInit();
                    this.helper = $("<div class='ui-selectable-helper'></div>");
                },
                _destroy: function() {
                    this.selectees.removeClass("ui-selectee").removeData("selectable-item");
                    this.element.removeClass("ui-selectable ui-selectable-disabled");
                    this._mouseDestroy();
                },
                _mouseStart: function(event) {
                    var that = this, options = this.options;
                    this.opos = [ event.pageX, event.pageY ];
                    if (this.options.disabled) {
                        return;
                    }
                    this.selectees = $(options.filter, this.element[0]);
                    this._trigger("start", event);
                    $(options.appendTo).append(this.helper);
                    // position helper (lasso)
                    this.helper.css({
                        left: event.pageX,
                        top: event.pageY,
                        width: 0,
                        height: 0
                    });
                    if (options.autoRefresh) {
                        this.refresh();
                    }
                    this.selectees.filter(".ui-selected").each(function() {
                        var selectee = $.data(this, "selectable-item");
                        selectee.startselected = true;
                        if (!event.metaKey && !event.ctrlKey) {
                            selectee.$element.removeClass("ui-selected");
                            selectee.selected = false;
                            selectee.$element.addClass("ui-unselecting");
                            selectee.unselecting = true;
                            // selectable UNSELECTING callback
                            that._trigger("unselecting", event, {
                                unselecting: selectee.element
                            });
                        }
                    });
                    $(event.target).parents().addBack().each(function() {
                        var doSelect, selectee = $.data(this, "selectable-item");
                        if (selectee) {
                            doSelect = !event.metaKey && !event.ctrlKey || !selectee.$element.hasClass("ui-selected");
                            selectee.$element.removeClass(doSelect ? "ui-unselecting" : "ui-selected").addClass(doSelect ? "ui-selecting" : "ui-unselecting");
                            selectee.unselecting = !doSelect;
                            selectee.selecting = doSelect;
                            selectee.selected = doSelect;
                            // selectable (UN)SELECTING callback
                            if (doSelect) {
                                that._trigger("selecting", event, {
                                    selecting: selectee.element
                                });
                            } else {
                                that._trigger("unselecting", event, {
                                    unselecting: selectee.element
                                });
                            }
                            return false;
                        }
                    });
                },
                _mouseDrag: function(event) {
                    this.dragged = true;
                    if (this.options.disabled) {
                        return;
                    }
                    var tmp, that = this, options = this.options, x1 = this.opos[0], y1 = this.opos[1], x2 = event.pageX, y2 = event.pageY;
                    if (x1 > x2) {
                        tmp = x2;
                        x2 = x1;
                        x1 = tmp;
                    }
                    if (y1 > y2) {
                        tmp = y2;
                        y2 = y1;
                        y1 = tmp;
                    }
                    this.helper.css({
                        left: x1,
                        top: y1,
                        width: x2 - x1,
                        height: y2 - y1
                    });
                    this.selectees.each(function() {
                        var selectee = $.data(this, "selectable-item"), hit = false;
                        //prevent helper from being selected if appendTo: selectable
                        if (!selectee || selectee.element === that.element[0]) {
                            return;
                        }
                        if (options.tolerance === "touch") {
                            hit = !(selectee.left > x2 || selectee.right < x1 || selectee.top > y2 || selectee.bottom < y1);
                        } else if (options.tolerance === "fit") {
                            hit = selectee.left > x1 && selectee.right < x2 && selectee.top > y1 && selectee.bottom < y2;
                        }
                        if (hit) {
                            // SELECT
                            if (selectee.selected) {
                                selectee.$element.removeClass("ui-selected");
                                selectee.selected = false;
                            }
                            if (selectee.unselecting) {
                                selectee.$element.removeClass("ui-unselecting");
                                selectee.unselecting = false;
                            }
                            if (!selectee.selecting) {
                                selectee.$element.addClass("ui-selecting");
                                selectee.selecting = true;
                                // selectable SELECTING callback
                                that._trigger("selecting", event, {
                                    selecting: selectee.element
                                });
                            }
                        } else {
                            // UNSELECT
                            if (selectee.selecting) {
                                if ((event.metaKey || event.ctrlKey) && selectee.startselected) {
                                    selectee.$element.removeClass("ui-selecting");
                                    selectee.selecting = false;
                                    selectee.$element.addClass("ui-selected");
                                    selectee.selected = true;
                                } else {
                                    selectee.$element.removeClass("ui-selecting");
                                    selectee.selecting = false;
                                    if (selectee.startselected) {
                                        selectee.$element.addClass("ui-unselecting");
                                        selectee.unselecting = true;
                                    }
                                    // selectable UNSELECTING callback
                                    that._trigger("unselecting", event, {
                                        unselecting: selectee.element
                                    });
                                }
                            }
                            if (selectee.selected) {
                                if (!event.metaKey && !event.ctrlKey && !selectee.startselected) {
                                    selectee.$element.removeClass("ui-selected");
                                    selectee.selected = false;
                                    selectee.$element.addClass("ui-unselecting");
                                    selectee.unselecting = true;
                                    // selectable UNSELECTING callback
                                    that._trigger("unselecting", event, {
                                        unselecting: selectee.element
                                    });
                                }
                            }
                        }
                    });
                    return false;
                },
                _mouseStop: function(event) {
                    var that = this;
                    this.dragged = false;
                    $(".ui-unselecting", this.element[0]).each(function() {
                        var selectee = $.data(this, "selectable-item");
                        selectee.$element.removeClass("ui-unselecting");
                        selectee.unselecting = false;
                        selectee.startselected = false;
                        that._trigger("unselected", event, {
                            unselected: selectee.element
                        });
                    });
                    $(".ui-selecting", this.element[0]).each(function() {
                        var selectee = $.data(this, "selectable-item");
                        selectee.$element.removeClass("ui-selecting").addClass("ui-selected");
                        selectee.selecting = false;
                        selectee.selected = true;
                        selectee.startselected = true;
                        that._trigger("selected", event, {
                            selected: selectee.element
                        });
                    });
                    this._trigger("stop", event);
                    this.helper.remove();
                    return false;
                }
            });
        })(jQuery);
        (function($, undefined) {
            /*jshint loopfunc: true */
            function isOverAxis(x, reference, size) {
                return x > reference && x < reference + size;
            }
            function isFloating(item) {
                return /left|right/.test(item.css("float")) || /inline|table-cell/.test(item.css("display"));
            }
            $.widget("ui.sortable", $.ui.mouse, {
                version: "1.10.2",
                widgetEventPrefix: "sort",
                ready: false,
                options: {
                    appendTo: "parent",
                    axis: false,
                    connectWith: false,
                    containment: false,
                    cursor: "auto",
                    cursorAt: false,
                    dropOnEmpty: true,
                    forcePlaceholderSize: false,
                    forceHelperSize: false,
                    grid: false,
                    handle: false,
                    helper: "original",
                    items: "> *",
                    opacity: false,
                    placeholder: false,
                    revert: false,
                    scroll: true,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    scope: "default",
                    tolerance: "intersect",
                    zIndex: 1e3,
                    // callbacks
                    activate: null,
                    beforeStop: null,
                    change: null,
                    deactivate: null,
                    out: null,
                    over: null,
                    receive: null,
                    remove: null,
                    sort: null,
                    start: null,
                    stop: null,
                    update: null
                },
                _create: function() {
                    var o = this.options;
                    this.containerCache = {};
                    this.element.addClass("ui-sortable");
                    //Get the items
                    this.refresh();
                    //Let's determine if the items are being displayed horizontally
                    this.floating = this.items.length ? o.axis === "x" || isFloating(this.items[0].item) : false;
                    //Let's determine the parent's offset
                    this.offset = this.element.offset();
                    //Initialize mouse events for interaction
                    this._mouseInit();
                    //We're ready to go
                    this.ready = true;
                },
                _destroy: function() {
                    this.element.removeClass("ui-sortable ui-sortable-disabled");
                    this._mouseDestroy();
                    for (var i = this.items.length - 1; i >= 0; i--) {
                        this.items[i].item.removeData(this.widgetName + "-item");
                    }
                    return this;
                },
                _setOption: function(key, value) {
                    if (key === "disabled") {
                        this.options[key] = value;
                        this.widget().toggleClass("ui-sortable-disabled", !!value);
                    } else {
                        // Don't call widget base _setOption for disable as it adds ui-state-disabled class
                        $.Widget.prototype._setOption.apply(this, arguments);
                    }
                },
                _mouseCapture: function(event, overrideHandle) {
                    var currentItem = null, validHandle = false, that = this;
                    if (this.reverting) {
                        return false;
                    }
                    if (this.options.disabled || this.options.type === "static") {
                        return false;
                    }
                    //We have to refresh the items data once first
                    this._refreshItems(event);
                    //Find out if the clicked node (or one of its parents) is a actual item in this.items
                    $(event.target).parents().each(function() {
                        if ($.data(this, that.widgetName + "-item") === that) {
                            currentItem = $(this);
                            return false;
                        }
                    });
                    if ($.data(event.target, that.widgetName + "-item") === that) {
                        currentItem = $(event.target);
                    }
                    if (!currentItem) {
                        return false;
                    }
                    if (this.options.handle && !overrideHandle) {
                        $(this.options.handle, currentItem).find("*").addBack().each(function() {
                            if (this === event.target) {
                                validHandle = true;
                            }
                        });
                        if (!validHandle) {
                            return false;
                        }
                    }
                    this.currentItem = currentItem;
                    this._removeCurrentsFromItems();
                    return true;
                },
                _mouseStart: function(event, overrideHandle, noActivation) {
                    var i, body, o = this.options;
                    this.currentContainer = this;
                    //We only need to call refreshPositions, because the refreshItems call has been moved to mouseCapture
                    this.refreshPositions();
                    //Create and append the visible helper
                    this.helper = this._createHelper(event);
                    //Cache the helper size
                    this._cacheHelperProportions();
                    /*
		 * - Position generation -
		 * This block generates everything position related - it's the core of draggables.
		 */
                    //Cache the margins of the original element
                    this._cacheMargins();
                    //Get the next scrolling parent
                    this.scrollParent = this.helper.scrollParent();
                    //The element's absolute position on the page minus margins
                    this.offset = this.currentItem.offset();
                    this.offset = {
                        top: this.offset.top - this.margins.top,
                        left: this.offset.left - this.margins.left
                    };
                    $.extend(this.offset, {
                        click: {
                            //Where the click happened, relative to the element
                            left: event.pageX - this.offset.left,
                            top: event.pageY - this.offset.top
                        },
                        parent: this._getParentOffset(),
                        relative: this._getRelativeOffset()
                    });
                    // Only after we got the offset, we can change the helper's position to absolute
                    // TODO: Still need to figure out a way to make relative sorting possible
                    this.helper.css("position", "absolute");
                    this.cssPosition = this.helper.css("position");
                    //Generate the original position
                    this.originalPosition = this._generatePosition(event);
                    this.originalPageX = event.pageX;
                    this.originalPageY = event.pageY;
                    //Adjust the mouse offset relative to the helper if "cursorAt" is supplied
                    o.cursorAt && this._adjustOffsetFromHelper(o.cursorAt);
                    //Cache the former DOM position
                    this.domPosition = {
                        prev: this.currentItem.prev()[0],
                        parent: this.currentItem.parent()[0]
                    };
                    //If the helper is not the original, hide the original so it's not playing any role during the drag, won't cause anything bad this way
                    if (this.helper[0] !== this.currentItem[0]) {
                        this.currentItem.hide();
                    }
                    //Create the placeholder
                    this._createPlaceholder();
                    //Set a containment if given in the options
                    if (o.containment) {
                        this._setContainment();
                    }
                    if (o.cursor && o.cursor !== "auto") {
                        // cursor option
                        body = this.document.find("body");
                        // support: IE
                        this.storedCursor = body.css("cursor");
                        body.css("cursor", o.cursor);
                        this.storedStylesheet = $("<style>*{ cursor: " + o.cursor + " !important; }</style>").appendTo(body);
                    }
                    if (o.opacity) {
                        // opacity option
                        if (this.helper.css("opacity")) {
                            this._storedOpacity = this.helper.css("opacity");
                        }
                        this.helper.css("opacity", o.opacity);
                    }
                    if (o.zIndex) {
                        // zIndex option
                        if (this.helper.css("zIndex")) {
                            this._storedZIndex = this.helper.css("zIndex");
                        }
                        this.helper.css("zIndex", o.zIndex);
                    }
                    //Prepare scrolling
                    if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
                        this.overflowOffset = this.scrollParent.offset();
                    }
                    //Call callbacks
                    this._trigger("start", event, this._uiHash());
                    //Recache the helper size
                    if (!this._preserveHelperProportions) {
                        this._cacheHelperProportions();
                    }
                    //Post "activate" events to possible containers
                    if (!noActivation) {
                        for (i = this.containers.length - 1; i >= 0; i--) {
                            this.containers[i]._trigger("activate", event, this._uiHash(this));
                        }
                    }
                    //Prepare possible droppables
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.current = this;
                    }
                    if ($.ui.ddmanager && !o.dropBehaviour) {
                        $.ui.ddmanager.prepareOffsets(this, event);
                    }
                    this.dragging = true;
                    this.helper.addClass("ui-sortable-helper");
                    this._mouseDrag(event);
                    //Execute the drag once - this causes the helper not to be visible before getting its correct position
                    return true;
                },
                _mouseDrag: function(event) {
                    var i, item, itemElement, intersection, o = this.options, scrolled = false;
                    //Compute the helpers position
                    this.position = this._generatePosition(event);
                    this.positionAbs = this._convertPositionTo("absolute");
                    if (!this.lastPositionAbs) {
                        this.lastPositionAbs = this.positionAbs;
                    }
                    //Do scrolling
                    if (this.options.scroll) {
                        if (this.scrollParent[0] !== document && this.scrollParent[0].tagName !== "HTML") {
                            if (this.overflowOffset.top + this.scrollParent[0].offsetHeight - event.pageY < o.scrollSensitivity) {
                                this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop + o.scrollSpeed;
                            } else if (event.pageY - this.overflowOffset.top < o.scrollSensitivity) {
                                this.scrollParent[0].scrollTop = scrolled = this.scrollParent[0].scrollTop - o.scrollSpeed;
                            }
                            if (this.overflowOffset.left + this.scrollParent[0].offsetWidth - event.pageX < o.scrollSensitivity) {
                                this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft + o.scrollSpeed;
                            } else if (event.pageX - this.overflowOffset.left < o.scrollSensitivity) {
                                this.scrollParent[0].scrollLeft = scrolled = this.scrollParent[0].scrollLeft - o.scrollSpeed;
                            }
                        } else {
                            if (event.pageY - $(document).scrollTop() < o.scrollSensitivity) {
                                scrolled = $(document).scrollTop($(document).scrollTop() - o.scrollSpeed);
                            } else if ($(window).height() - (event.pageY - $(document).scrollTop()) < o.scrollSensitivity) {
                                scrolled = $(document).scrollTop($(document).scrollTop() + o.scrollSpeed);
                            }
                            if (event.pageX - $(document).scrollLeft() < o.scrollSensitivity) {
                                scrolled = $(document).scrollLeft($(document).scrollLeft() - o.scrollSpeed);
                            } else if ($(window).width() - (event.pageX - $(document).scrollLeft()) < o.scrollSensitivity) {
                                scrolled = $(document).scrollLeft($(document).scrollLeft() + o.scrollSpeed);
                            }
                        }
                        if (scrolled !== false && $.ui.ddmanager && !o.dropBehaviour) {
                            $.ui.ddmanager.prepareOffsets(this, event);
                        }
                    }
                    //Regenerate the absolute position used for position checks
                    this.positionAbs = this._convertPositionTo("absolute");
                    //Set the helper position
                    if (!this.options.axis || this.options.axis !== "y") {
                        this.helper[0].style.left = this.position.left + "px";
                    }
                    if (!this.options.axis || this.options.axis !== "x") {
                        this.helper[0].style.top = this.position.top + "px";
                    }
                    //Rearrange
                    for (i = this.items.length - 1; i >= 0; i--) {
                        //Cache variables and intersection, continue if no intersection
                        item = this.items[i];
                        itemElement = item.item[0];
                        intersection = this._intersectsWithPointer(item);
                        if (!intersection) {
                            continue;
                        }
                        // Only put the placeholder inside the current Container, skip all
                        // items form other containers. This works because when moving
                        // an item from one container to another the
                        // currentContainer is switched before the placeholder is moved.
                        //
                        // Without this moving items in "sub-sortables" can cause the placeholder to jitter
                        // beetween the outer and inner container.
                        if (item.instance !== this.currentContainer) {
                            continue;
                        }
                        // cannot intersect with itself
                        // no useless actions that have been done before
                        // no action if the item moved is the parent of the item checked
                        if (itemElement !== this.currentItem[0] && this.placeholder[intersection === 1 ? "next" : "prev"]()[0] !== itemElement && !$.contains(this.placeholder[0], itemElement) && (this.options.type === "semi-dynamic" ? !$.contains(this.element[0], itemElement) : true)) {
                            this.direction = intersection === 1 ? "down" : "up";
                            if (this.options.tolerance === "pointer" || this._intersectsWithSides(item)) {
                                this._rearrange(event, item);
                            } else {
                                break;
                            }
                            this._trigger("change", event, this._uiHash());
                            break;
                        }
                    }
                    //Post events to containers
                    this._contactContainers(event);
                    //Interconnect with droppables
                    if ($.ui.ddmanager) {
                        $.ui.ddmanager.drag(this, event);
                    }
                    //Call callbacks
                    this._trigger("sort", event, this._uiHash());
                    this.lastPositionAbs = this.positionAbs;
                    return false;
                },
                _mouseStop: function(event, noPropagation) {
                    if (!event) {
                        return;
                    }
                    //If we are using droppables, inform the manager about the drop
                    if ($.ui.ddmanager && !this.options.dropBehaviour) {
                        $.ui.ddmanager.drop(this, event);
                    }
                    if (this.options.revert) {
                        var that = this, cur = this.placeholder.offset(), axis = this.options.axis, animation = {};
                        if (!axis || axis === "x") {
                            animation.left = cur.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollLeft);
                        }
                        if (!axis || axis === "y") {
                            animation.top = cur.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === document.body ? 0 : this.offsetParent[0].scrollTop);
                        }
                        this.reverting = true;
                        $(this.helper).animate(animation, parseInt(this.options.revert, 10) || 500, function() {
                            that._clear(event);
                        });
                    } else {
                        this._clear(event, noPropagation);
                    }
                    return false;
                },
                cancel: function() {
                    if (this.dragging) {
                        this._mouseUp({
                            target: null
                        });
                        if (this.options.helper === "original") {
                            this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                        } else {
                            this.currentItem.show();
                        }
                        //Post deactivating events to containers
                        for (var i = this.containers.length - 1; i >= 0; i--) {
                            this.containers[i]._trigger("deactivate", null, this._uiHash(this));
                            if (this.containers[i].containerCache.over) {
                                this.containers[i]._trigger("out", null, this._uiHash(this));
                                this.containers[i].containerCache.over = 0;
                            }
                        }
                    }
                    if (this.placeholder) {
                        //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                        if (this.placeholder[0].parentNode) {
                            this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                        }
                        if (this.options.helper !== "original" && this.helper && this.helper[0].parentNode) {
                            this.helper.remove();
                        }
                        $.extend(this, {
                            helper: null,
                            dragging: false,
                            reverting: false,
                            _noFinalSort: null
                        });
                        if (this.domPosition.prev) {
                            $(this.domPosition.prev).after(this.currentItem);
                        } else {
                            $(this.domPosition.parent).prepend(this.currentItem);
                        }
                    }
                    return this;
                },
                serialize: function(o) {
                    var items = this._getItemsAsjQuery(o && o.connected), str = [];
                    o = o || {};
                    $(items).each(function() {
                        var res = ($(o.item || this).attr(o.attribute || "id") || "").match(o.expression || /(.+)[\-=_](.+)/);
                        if (res) {
                            str.push((o.key || res[1] + "[]") + "=" + (o.key && o.expression ? res[1] : res[2]));
                        }
                    });
                    if (!str.length && o.key) {
                        str.push(o.key + "=");
                    }
                    return str.join("&");
                },
                toArray: function(o) {
                    var items = this._getItemsAsjQuery(o && o.connected), ret = [];
                    o = o || {};
                    items.each(function() {
                        ret.push($(o.item || this).attr(o.attribute || "id") || "");
                    });
                    return ret;
                },
                /* Be careful with the following core functions */
                _intersectsWith: function(item) {
                    var x1 = this.positionAbs.left, x2 = x1 + this.helperProportions.width, y1 = this.positionAbs.top, y2 = y1 + this.helperProportions.height, l = item.left, r = l + item.width, t = item.top, b = t + item.height, dyClick = this.offset.click.top, dxClick = this.offset.click.left, isOverElement = y1 + dyClick > t && y1 + dyClick < b && x1 + dxClick > l && x1 + dxClick < r;
                    if (this.options.tolerance === "pointer" || this.options.forcePointerForContainers || this.options.tolerance !== "pointer" && this.helperProportions[this.floating ? "width" : "height"] > item[this.floating ? "width" : "height"]) {
                        return isOverElement;
                    } else {
                        return l < x1 + this.helperProportions.width / 2 && // Right Half
                        x2 - this.helperProportions.width / 2 < r && // Left Half
                        t < y1 + this.helperProportions.height / 2 && // Bottom Half
                        y2 - this.helperProportions.height / 2 < b;
                    }
                },
                _intersectsWithPointer: function(item) {
                    var isOverElementHeight = this.options.axis === "x" || isOverAxis(this.positionAbs.top + this.offset.click.top, item.top, item.height), isOverElementWidth = this.options.axis === "y" || isOverAxis(this.positionAbs.left + this.offset.click.left, item.left, item.width), isOverElement = isOverElementHeight && isOverElementWidth, verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
                    if (!isOverElement) {
                        return false;
                    }
                    return this.floating ? horizontalDirection && horizontalDirection === "right" || verticalDirection === "down" ? 2 : 1 : verticalDirection && (verticalDirection === "down" ? 2 : 1);
                },
                _intersectsWithSides: function(item) {
                    var isOverBottomHalf = isOverAxis(this.positionAbs.top + this.offset.click.top, item.top + item.height / 2, item.height), isOverRightHalf = isOverAxis(this.positionAbs.left + this.offset.click.left, item.left + item.width / 2, item.width), verticalDirection = this._getDragVerticalDirection(), horizontalDirection = this._getDragHorizontalDirection();
                    if (this.floating && horizontalDirection) {
                        return horizontalDirection === "right" && isOverRightHalf || horizontalDirection === "left" && !isOverRightHalf;
                    } else {
                        return verticalDirection && (verticalDirection === "down" && isOverBottomHalf || verticalDirection === "up" && !isOverBottomHalf);
                    }
                },
                _getDragVerticalDirection: function() {
                    var delta = this.positionAbs.top - this.lastPositionAbs.top;
                    return delta !== 0 && (delta > 0 ? "down" : "up");
                },
                _getDragHorizontalDirection: function() {
                    var delta = this.positionAbs.left - this.lastPositionAbs.left;
                    return delta !== 0 && (delta > 0 ? "right" : "left");
                },
                refresh: function(event) {
                    this._refreshItems(event);
                    this.refreshPositions();
                    return this;
                },
                _connectWith: function() {
                    var options = this.options;
                    return options.connectWith.constructor === String ? [ options.connectWith ] : options.connectWith;
                },
                _getItemsAsjQuery: function(connected) {
                    var i, j, cur, inst, items = [], queries = [], connectWith = this._connectWith();
                    if (connectWith && connected) {
                        for (i = connectWith.length - 1; i >= 0; i--) {
                            cur = $(connectWith[i]);
                            for (j = cur.length - 1; j >= 0; j--) {
                                inst = $.data(cur[j], this.widgetFullName);
                                if (inst && inst !== this && !inst.options.disabled) {
                                    queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element) : $(inst.options.items, inst.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), inst ]);
                                }
                            }
                        }
                    }
                    queries.push([ $.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                        options: this.options,
                        item: this.currentItem
                    }) : $(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this ]);
                    for (i = queries.length - 1; i >= 0; i--) {
                        queries[i][0].each(function() {
                            items.push(this);
                        });
                    }
                    return $(items);
                },
                _removeCurrentsFromItems: function() {
                    var list = this.currentItem.find(":data(" + this.widgetName + "-item)");
                    this.items = $.grep(this.items, function(item) {
                        for (var j = 0; j < list.length; j++) {
                            if (list[j] === item.item[0]) {
                                return false;
                            }
                        }
                        return true;
                    });
                },
                _refreshItems: function(event) {
                    this.items = [];
                    this.containers = [ this ];
                    var i, j, cur, inst, targetData, _queries, item, queriesLength, items = this.items, queries = [ [ $.isFunction(this.options.items) ? this.options.items.call(this.element[0], event, {
                        item: this.currentItem
                    }) : $(this.options.items, this.element), this ] ], connectWith = this._connectWith();
                    if (connectWith && this.ready) {
                        //Shouldn't be run the first time through due to massive slow-down
                        for (i = connectWith.length - 1; i >= 0; i--) {
                            cur = $(connectWith[i]);
                            for (j = cur.length - 1; j >= 0; j--) {
                                inst = $.data(cur[j], this.widgetFullName);
                                if (inst && inst !== this && !inst.options.disabled) {
                                    queries.push([ $.isFunction(inst.options.items) ? inst.options.items.call(inst.element[0], event, {
                                        item: this.currentItem
                                    }) : $(inst.options.items, inst.element), inst ]);
                                    this.containers.push(inst);
                                }
                            }
                        }
                    }
                    for (i = queries.length - 1; i >= 0; i--) {
                        targetData = queries[i][1];
                        _queries = queries[i][0];
                        for (j = 0, queriesLength = _queries.length; j < queriesLength; j++) {
                            item = $(_queries[j]);
                            item.data(this.widgetName + "-item", targetData);
                            // Data for target checking (mouse manager)
                            items.push({
                                item: item,
                                instance: targetData,
                                width: 0,
                                height: 0,
                                left: 0,
                                top: 0
                            });
                        }
                    }
                },
                refreshPositions: function(fast) {
                    //This has to be redone because due to the item being moved out/into the offsetParent, the offsetParent's position will change
                    if (this.offsetParent && this.helper) {
                        this.offset.parent = this._getParentOffset();
                    }
                    var i, item, t, p;
                    for (i = this.items.length - 1; i >= 0; i--) {
                        item = this.items[i];
                        //We ignore calculating positions of all connected containers when we're not over them
                        if (item.instance !== this.currentContainer && this.currentContainer && item.item[0] !== this.currentItem[0]) {
                            continue;
                        }
                        t = this.options.toleranceElement ? $(this.options.toleranceElement, item.item) : item.item;
                        if (!fast) {
                            item.width = t.outerWidth();
                            item.height = t.outerHeight();
                        }
                        p = t.offset();
                        item.left = p.left;
                        item.top = p.top;
                    }
                    if (this.options.custom && this.options.custom.refreshContainers) {
                        this.options.custom.refreshContainers.call(this);
                    } else {
                        for (i = this.containers.length - 1; i >= 0; i--) {
                            p = this.containers[i].element.offset();
                            this.containers[i].containerCache.left = p.left;
                            this.containers[i].containerCache.top = p.top;
                            this.containers[i].containerCache.width = this.containers[i].element.outerWidth();
                            this.containers[i].containerCache.height = this.containers[i].element.outerHeight();
                        }
                    }
                    return this;
                },
                _createPlaceholder: function(that) {
                    that = that || this;
                    var className, o = that.options;
                    if (!o.placeholder || o.placeholder.constructor === String) {
                        className = o.placeholder;
                        o.placeholder = {
                            element: function() {
                                var nodeName = that.currentItem[0].nodeName.toLowerCase(), element = $(that.document[0].createElement(nodeName)).addClass(className || that.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                                if (nodeName === "tr") {
                                    // Use a high colspan to force the td to expand the full
                                    // width of the table (browsers are smart enough to
                                    // handle this properly)
                                    element.append("<td colspan='99'>&#160;</td>");
                                } else if (nodeName === "img") {
                                    element.attr("src", that.currentItem.attr("src"));
                                }
                                if (!className) {
                                    element.css("visibility", "hidden");
                                }
                                return element;
                            },
                            update: function(container, p) {
                                // 1. If a className is set as 'placeholder option, we don't force sizes - the class is responsible for that
                                // 2. The option 'forcePlaceholderSize can be enabled to force it even if a class name is specified
                                if (className && !o.forcePlaceholderSize) {
                                    return;
                                }
                                //If the element doesn't have a actual height by itself (without styles coming from a stylesheet), it receives the inline height from the dragged item
                                if (!p.height()) {
                                    p.height(that.currentItem.innerHeight() - parseInt(that.currentItem.css("paddingTop") || 0, 10) - parseInt(that.currentItem.css("paddingBottom") || 0, 10));
                                }
                                if (!p.width()) {
                                    p.width(that.currentItem.innerWidth() - parseInt(that.currentItem.css("paddingLeft") || 0, 10) - parseInt(that.currentItem.css("paddingRight") || 0, 10));
                                }
                            }
                        };
                    }
                    //Create the placeholder
                    that.placeholder = $(o.placeholder.element.call(that.element, that.currentItem));
                    //Append it after the actual current item
                    that.currentItem.after(that.placeholder);
                    //Update the size of the placeholder (TODO: Logic to fuzzy, see line 316/317)
                    o.placeholder.update(that, that.placeholder);
                },
                _contactContainers: function(event) {
                    var i, j, dist, itemWithLeastDistance, posProperty, sizeProperty, base, cur, nearBottom, floating, innermostContainer = null, innermostIndex = null;
                    // get innermost container that intersects with item
                    for (i = this.containers.length - 1; i >= 0; i--) {
                        // never consider a container that's located within the item itself
                        if ($.contains(this.currentItem[0], this.containers[i].element[0])) {
                            continue;
                        }
                        if (this._intersectsWith(this.containers[i].containerCache)) {
                            // if we've already found a container and it's more "inner" than this, then continue
                            if (innermostContainer && $.contains(this.containers[i].element[0], innermostContainer.element[0])) {
                                continue;
                            }
                            innermostContainer = this.containers[i];
                            innermostIndex = i;
                        } else {
                            // container doesn't intersect. trigger "out" event if necessary
                            if (this.containers[i].containerCache.over) {
                                this.containers[i]._trigger("out", event, this._uiHash(this));
                                this.containers[i].containerCache.over = 0;
                            }
                        }
                    }
                    // if no intersecting containers found, return
                    if (!innermostContainer) {
                        return;
                    }
                    // move the item into the container if it's not there already
                    if (this.containers.length === 1) {
                        if (!this.containers[innermostIndex].containerCache.over) {
                            this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                            this.containers[innermostIndex].containerCache.over = 1;
                        }
                    } else {
                        //When entering a new container, we will find the item with the least distance and append our item near it
                        dist = 1e4;
                        itemWithLeastDistance = null;
                        floating = innermostContainer.floating || isFloating(this.currentItem);
                        posProperty = floating ? "left" : "top";
                        sizeProperty = floating ? "width" : "height";
                        base = this.positionAbs[posProperty] + this.offset.click[posProperty];
                        for (j = this.items.length - 1; j >= 0; j--) {
                            if (!$.contains(this.containers[innermostIndex].element[0], this.items[j].item[0])) {
                                continue;
                            }
                            if (this.items[j].item[0] === this.currentItem[0]) {
                                continue;
                            }
                            if (floating && !isOverAxis(this.positionAbs.top + this.offset.click.top, this.items[j].top, this.items[j].height)) {
                                continue;
                            }
                            cur = this.items[j].item.offset()[posProperty];
                            nearBottom = false;
                            if (Math.abs(cur - base) > Math.abs(cur + this.items[j][sizeProperty] - base)) {
                                nearBottom = true;
                                cur += this.items[j][sizeProperty];
                            }
                            if (Math.abs(cur - base) < dist) {
                                dist = Math.abs(cur - base);
                                itemWithLeastDistance = this.items[j];
                                this.direction = nearBottom ? "up" : "down";
                            }
                        }
                        //Check if dropOnEmpty is enabled
                        if (!itemWithLeastDistance && !this.options.dropOnEmpty) {
                            return;
                        }
                        if (this.currentContainer === this.containers[innermostIndex]) {
                            return;
                        }
                        itemWithLeastDistance ? this._rearrange(event, itemWithLeastDistance, null, true) : this._rearrange(event, null, this.containers[innermostIndex].element, true);
                        this._trigger("change", event, this._uiHash());
                        this.containers[innermostIndex]._trigger("change", event, this._uiHash(this));
                        this.currentContainer = this.containers[innermostIndex];
                        //Update the placeholder
                        this.options.placeholder.update(this.currentContainer, this.placeholder);
                        this.containers[innermostIndex]._trigger("over", event, this._uiHash(this));
                        this.containers[innermostIndex].containerCache.over = 1;
                    }
                },
                _createHelper: function(event) {
                    var o = this.options, helper = $.isFunction(o.helper) ? $(o.helper.apply(this.element[0], [ event, this.currentItem ])) : o.helper === "clone" ? this.currentItem.clone() : this.currentItem;
                    //Add the helper to the DOM if that didn't happen already
                    if (!helper.parents("body").length) {
                        $(o.appendTo !== "parent" ? o.appendTo : this.currentItem[0].parentNode)[0].appendChild(helper[0]);
                    }
                    if (helper[0] === this.currentItem[0]) {
                        this._storedCSS = {
                            width: this.currentItem[0].style.width,
                            height: this.currentItem[0].style.height,
                            position: this.currentItem.css("position"),
                            top: this.currentItem.css("top"),
                            left: this.currentItem.css("left")
                        };
                    }
                    if (!helper[0].style.width || o.forceHelperSize) {
                        helper.width(this.currentItem.width());
                    }
                    if (!helper[0].style.height || o.forceHelperSize) {
                        helper.height(this.currentItem.height());
                    }
                    return helper;
                },
                _adjustOffsetFromHelper: function(obj) {
                    if (typeof obj === "string") {
                        obj = obj.split(" ");
                    }
                    if ($.isArray(obj)) {
                        obj = {
                            left: +obj[0],
                            top: +obj[1] || 0
                        };
                    }
                    if ("left" in obj) {
                        this.offset.click.left = obj.left + this.margins.left;
                    }
                    if ("right" in obj) {
                        this.offset.click.left = this.helperProportions.width - obj.right + this.margins.left;
                    }
                    if ("top" in obj) {
                        this.offset.click.top = obj.top + this.margins.top;
                    }
                    if ("bottom" in obj) {
                        this.offset.click.top = this.helperProportions.height - obj.bottom + this.margins.top;
                    }
                },
                _getParentOffset: function() {
                    //Get the offsetParent and cache its position
                    this.offsetParent = this.helper.offsetParent();
                    var po = this.offsetParent.offset();
                    // This is a special case where we need to modify a offset calculated on start, since the following happened:
                    // 1. The position of the helper is absolute, so it's position is calculated based on the next positioned parent
                    // 2. The actual offset parent is a child of the scroll parent, and the scroll parent isn't the document, which means that
                    //    the scroll is included in the initial calculation of the offset of the parent, and never recalculated upon drag
                    if (this.cssPosition === "absolute" && this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) {
                        po.left += this.scrollParent.scrollLeft();
                        po.top += this.scrollParent.scrollTop();
                    }
                    // This needs to be actually done for all browsers, since pageX/pageY includes this information
                    // with an ugly IE fix
                    if (this.offsetParent[0] === document.body || this.offsetParent[0].tagName && this.offsetParent[0].tagName.toLowerCase() === "html" && $.ui.ie) {
                        po = {
                            top: 0,
                            left: 0
                        };
                    }
                    return {
                        top: po.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                        left: po.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                    };
                },
                _getRelativeOffset: function() {
                    if (this.cssPosition === "relative") {
                        var p = this.currentItem.position();
                        return {
                            top: p.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                            left: p.left - (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                        };
                    } else {
                        return {
                            top: 0,
                            left: 0
                        };
                    }
                },
                _cacheMargins: function() {
                    this.margins = {
                        left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                        top: parseInt(this.currentItem.css("marginTop"), 10) || 0
                    };
                },
                _cacheHelperProportions: function() {
                    this.helperProportions = {
                        width: this.helper.outerWidth(),
                        height: this.helper.outerHeight()
                    };
                },
                _setContainment: function() {
                    var ce, co, over, o = this.options;
                    if (o.containment === "parent") {
                        o.containment = this.helper[0].parentNode;
                    }
                    if (o.containment === "document" || o.containment === "window") {
                        this.containment = [ 0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, $(o.containment === "document" ? document : window).width() - this.helperProportions.width - this.margins.left, ($(o.containment === "document" ? document : window).height() || document.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top ];
                    }
                    if (!/^(document|window|parent)$/.test(o.containment)) {
                        ce = $(o.containment)[0];
                        co = $(o.containment).offset();
                        over = $(ce).css("overflow") !== "hidden";
                        this.containment = [ co.left + (parseInt($(ce).css("borderLeftWidth"), 10) || 0) + (parseInt($(ce).css("paddingLeft"), 10) || 0) - this.margins.left, co.top + (parseInt($(ce).css("borderTopWidth"), 10) || 0) + (parseInt($(ce).css("paddingTop"), 10) || 0) - this.margins.top, co.left + (over ? Math.max(ce.scrollWidth, ce.offsetWidth) : ce.offsetWidth) - (parseInt($(ce).css("borderLeftWidth"), 10) || 0) - (parseInt($(ce).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left, co.top + (over ? Math.max(ce.scrollHeight, ce.offsetHeight) : ce.offsetHeight) - (parseInt($(ce).css("borderTopWidth"), 10) || 0) - (parseInt($(ce).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top ];
                    }
                },
                _convertPositionTo: function(d, pos) {
                    if (!pos) {
                        pos = this.position;
                    }
                    var mod = d === "absolute" ? 1 : -1, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
                    return {
                        top: pos.top + // The absolute mouse position
                        this.offset.relative.top * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.top * mod - // The offsetParent's offset without borders (offset + border)
                        (this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()) * mod,
                        left: pos.left + // The absolute mouse position
                        this.offset.relative.left * mod + // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.left * mod - // The offsetParent's offset without borders (offset + border)
                        (this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft()) * mod
                    };
                },
                _generatePosition: function(event) {
                    var top, left, o = this.options, pageX = event.pageX, pageY = event.pageY, scroll = this.cssPosition === "absolute" && !(this.scrollParent[0] !== document && $.contains(this.scrollParent[0], this.offsetParent[0])) ? this.offsetParent : this.scrollParent, scrollIsRootNode = /(html|body)/i.test(scroll[0].tagName);
                    // This is another very weird special case that only happens for relative elements:
                    // 1. If the css position is relative
                    // 2. and the scroll parent is the document or similar to the offset parent
                    // we have to refresh the relative offset during the scroll so there are no jumps
                    if (this.cssPosition === "relative" && !(this.scrollParent[0] !== document && this.scrollParent[0] !== this.offsetParent[0])) {
                        this.offset.relative = this._getRelativeOffset();
                    }
                    /*
		 * - Position constraining -
		 * Constrain the position to a mix of grid, containment.
		 */
                    if (this.originalPosition) {
                        //If we are not dragging yet, we won't check for options
                        if (this.containment) {
                            if (event.pageX - this.offset.click.left < this.containment[0]) {
                                pageX = this.containment[0] + this.offset.click.left;
                            }
                            if (event.pageY - this.offset.click.top < this.containment[1]) {
                                pageY = this.containment[1] + this.offset.click.top;
                            }
                            if (event.pageX - this.offset.click.left > this.containment[2]) {
                                pageX = this.containment[2] + this.offset.click.left;
                            }
                            if (event.pageY - this.offset.click.top > this.containment[3]) {
                                pageY = this.containment[3] + this.offset.click.top;
                            }
                        }
                        if (o.grid) {
                            top = this.originalPageY + Math.round((pageY - this.originalPageY) / o.grid[1]) * o.grid[1];
                            pageY = this.containment ? top - this.offset.click.top >= this.containment[1] && top - this.offset.click.top <= this.containment[3] ? top : top - this.offset.click.top >= this.containment[1] ? top - o.grid[1] : top + o.grid[1] : top;
                            left = this.originalPageX + Math.round((pageX - this.originalPageX) / o.grid[0]) * o.grid[0];
                            pageX = this.containment ? left - this.offset.click.left >= this.containment[0] && left - this.offset.click.left <= this.containment[2] ? left : left - this.offset.click.left >= this.containment[0] ? left - o.grid[0] : left + o.grid[0] : left;
                        }
                    }
                    return {
                        top: pageY - // The absolute mouse position
                        this.offset.click.top - // Click offset (relative to the element)
                        this.offset.relative.top - // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.top + (// The offsetParent's offset without borders (offset + border)
                        this.cssPosition === "fixed" ? -this.scrollParent.scrollTop() : scrollIsRootNode ? 0 : scroll.scrollTop()),
                        left: pageX - // The absolute mouse position
                        this.offset.click.left - // Click offset (relative to the element)
                        this.offset.relative.left - // Only for relative positioned nodes: Relative offset from element to offset parent
                        this.offset.parent.left + (// The offsetParent's offset without borders (offset + border)
                        this.cssPosition === "fixed" ? -this.scrollParent.scrollLeft() : scrollIsRootNode ? 0 : scroll.scrollLeft())
                    };
                },
                _rearrange: function(event, i, a, hardRefresh) {
                    a ? a[0].appendChild(this.placeholder[0]) : i.item[0].parentNode.insertBefore(this.placeholder[0], this.direction === "down" ? i.item[0] : i.item[0].nextSibling);
                    //Various things done here to improve the performance:
                    // 1. we create a setTimeout, that calls refreshPositions
                    // 2. on the instance, we have a counter variable, that get's higher after every append
                    // 3. on the local scope, we copy the counter variable, and check in the timeout, if it's still the same
                    // 4. this lets only the last addition to the timeout stack through
                    this.counter = this.counter ? ++this.counter : 1;
                    var counter = this.counter;
                    this._delay(function() {
                        if (counter === this.counter) {
                            this.refreshPositions(!hardRefresh);
                        }
                    });
                },
                _clear: function(event, noPropagation) {
                    this.reverting = false;
                    // We delay all events that have to be triggered to after the point where the placeholder has been removed and
                    // everything else normalized again
                    var i, delayedTriggers = [];
                    // We first have to update the dom position of the actual currentItem
                    // Note: don't do it if the current item is already removed (by a user), or it gets reappended (see #4088)
                    if (!this._noFinalSort && this.currentItem.parent().length) {
                        this.placeholder.before(this.currentItem);
                    }
                    this._noFinalSort = null;
                    if (this.helper[0] === this.currentItem[0]) {
                        for (i in this._storedCSS) {
                            if (this._storedCSS[i] === "auto" || this._storedCSS[i] === "static") {
                                this._storedCSS[i] = "";
                            }
                        }
                        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper");
                    } else {
                        this.currentItem.show();
                    }
                    if (this.fromOutside && !noPropagation) {
                        delayedTriggers.push(function(event) {
                            this._trigger("receive", event, this._uiHash(this.fromOutside));
                        });
                    }
                    if ((this.fromOutside || this.domPosition.prev !== this.currentItem.prev().not(".ui-sortable-helper")[0] || this.domPosition.parent !== this.currentItem.parent()[0]) && !noPropagation) {
                        delayedTriggers.push(function(event) {
                            this._trigger("update", event, this._uiHash());
                        });
                    }
                    // Check if the items Container has Changed and trigger appropriate
                    // events.
                    if (this !== this.currentContainer) {
                        if (!noPropagation) {
                            delayedTriggers.push(function(event) {
                                this._trigger("remove", event, this._uiHash());
                            });
                            delayedTriggers.push(function(c) {
                                return function(event) {
                                    c._trigger("receive", event, this._uiHash(this));
                                };
                            }.call(this, this.currentContainer));
                            delayedTriggers.push(function(c) {
                                return function(event) {
                                    c._trigger("update", event, this._uiHash(this));
                                };
                            }.call(this, this.currentContainer));
                        }
                    }
                    //Post events to containers
                    for (i = this.containers.length - 1; i >= 0; i--) {
                        if (!noPropagation) {
                            delayedTriggers.push(function(c) {
                                return function(event) {
                                    c._trigger("deactivate", event, this._uiHash(this));
                                };
                            }.call(this, this.containers[i]));
                        }
                        if (this.containers[i].containerCache.over) {
                            delayedTriggers.push(function(c) {
                                return function(event) {
                                    c._trigger("out", event, this._uiHash(this));
                                };
                            }.call(this, this.containers[i]));
                            this.containers[i].containerCache.over = 0;
                        }
                    }
                    //Do what was originally in plugins
                    if (this.storedCursor) {
                        this.document.find("body").css("cursor", this.storedCursor);
                        this.storedStylesheet.remove();
                    }
                    if (this._storedOpacity) {
                        this.helper.css("opacity", this._storedOpacity);
                    }
                    if (this._storedZIndex) {
                        this.helper.css("zIndex", this._storedZIndex === "auto" ? "" : this._storedZIndex);
                    }
                    this.dragging = false;
                    if (this.cancelHelperRemoval) {
                        if (!noPropagation) {
                            this._trigger("beforeStop", event, this._uiHash());
                            for (i = 0; i < delayedTriggers.length; i++) {
                                delayedTriggers[i].call(this, event);
                            }
                            //Trigger all delayed events
                            this._trigger("stop", event, this._uiHash());
                        }
                        this.fromOutside = false;
                        return false;
                    }
                    if (!noPropagation) {
                        this._trigger("beforeStop", event, this._uiHash());
                    }
                    //$(this.placeholder[0]).remove(); would have been the jQuery way - unfortunately, it unbinds ALL events from the original node!
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                    if (this.helper[0] !== this.currentItem[0]) {
                        this.helper.remove();
                    }
                    this.helper = null;
                    if (!noPropagation) {
                        for (i = 0; i < delayedTriggers.length; i++) {
                            delayedTriggers[i].call(this, event);
                        }
                        //Trigger all delayed events
                        this._trigger("stop", event, this._uiHash());
                    }
                    this.fromOutside = false;
                    return true;
                },
                _trigger: function() {
                    if ($.Widget.prototype._trigger.apply(this, arguments) === false) {
                        this.cancel();
                    }
                },
                _uiHash: function(_inst) {
                    var inst = _inst || this;
                    return {
                        helper: inst.helper,
                        placeholder: inst.placeholder || $([]),
                        position: inst.position,
                        originalPosition: inst.originalPosition,
                        offset: inst.positionAbs,
                        item: inst.currentItem,
                        sender: _inst ? _inst.element : null
                    };
                }
            });
        })(jQuery);
        (function($, undefined) {
            var dataSpace = "ui-effects-";
            $.effects = {
                effect: {}
            };
            /*!
 * jQuery Color Animations v2.1.2
 * https://github.com/jquery/jquery-color
 *
 * Copyright 2013 jQuery Foundation and other contributors
 * Released under the MIT license.
 * http://jquery.org/license
 *
 * Date: Wed Jan 16 08:47:09 2013 -0600
 */
            (function(jQuery, undefined) {
                var stepHooks = "backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor", // plusequals test for += 100 -= 100
                rplusequals = /^([\-+])=\s*(\d+\.?\d*)/, // a set of RE's that can match strings and generate color tuples.
                stringParsers = [ {
                    re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    parse: function(execResult) {
                        return [ execResult[1], execResult[2], execResult[3], execResult[4] ];
                    }
                }, {
                    re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    parse: function(execResult) {
                        return [ execResult[1] * 2.55, execResult[2] * 2.55, execResult[3] * 2.55, execResult[4] ];
                    }
                }, {
                    // this regex ignores A-F because it's compared against an already lowercased string
                    re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                    parse: function(execResult) {
                        return [ parseInt(execResult[1], 16), parseInt(execResult[2], 16), parseInt(execResult[3], 16) ];
                    }
                }, {
                    // this regex ignores A-F because it's compared against an already lowercased string
                    re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                    parse: function(execResult) {
                        return [ parseInt(execResult[1] + execResult[1], 16), parseInt(execResult[2] + execResult[2], 16), parseInt(execResult[3] + execResult[3], 16) ];
                    }
                }, {
                    re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                    space: "hsla",
                    parse: function(execResult) {
                        return [ execResult[1], execResult[2] / 100, execResult[3] / 100, execResult[4] ];
                    }
                } ], // jQuery.Color( )
                color = jQuery.Color = function(color, green, blue, alpha) {
                    return new jQuery.Color.fn.parse(color, green, blue, alpha);
                }, spaces = {
                    rgba: {
                        props: {
                            red: {
                                idx: 0,
                                type: "byte"
                            },
                            green: {
                                idx: 1,
                                type: "byte"
                            },
                            blue: {
                                idx: 2,
                                type: "byte"
                            }
                        }
                    },
                    hsla: {
                        props: {
                            hue: {
                                idx: 0,
                                type: "degrees"
                            },
                            saturation: {
                                idx: 1,
                                type: "percent"
                            },
                            lightness: {
                                idx: 2,
                                type: "percent"
                            }
                        }
                    }
                }, propTypes = {
                    "byte": {
                        floor: true,
                        max: 255
                    },
                    percent: {
                        max: 1
                    },
                    degrees: {
                        mod: 360,
                        floor: true
                    }
                }, support = color.support = {}, // element for support tests
                supportElem = jQuery("<p>")[0], // colors = jQuery.Color.names
                colors, // local aliases of functions called often
                each = jQuery.each;
                // determine rgba support immediately
                supportElem.style.cssText = "background-color:rgba(1,1,1,.5)";
                support.rgba = supportElem.style.backgroundColor.indexOf("rgba") > -1;
                // define cache name and alpha properties
                // for rgba and hsla spaces
                each(spaces, function(spaceName, space) {
                    space.cache = "_" + spaceName;
                    space.props.alpha = {
                        idx: 3,
                        type: "percent",
                        def: 1
                    };
                });
                function clamp(value, prop, allowEmpty) {
                    var type = propTypes[prop.type] || {};
                    if (value == null) {
                        return allowEmpty || !prop.def ? null : prop.def;
                    }
                    // ~~ is an short way of doing floor for positive numbers
                    value = type.floor ? ~~value : parseFloat(value);
                    // IE will pass in empty strings as value for alpha,
                    // which will hit this case
                    if (isNaN(value)) {
                        return prop.def;
                    }
                    if (type.mod) {
                        // we add mod before modding to make sure that negatives values
                        // get converted properly: -10 -> 350
                        return (value + type.mod) % type.mod;
                    }
                    // for now all property types without mod have min and max
                    return 0 > value ? 0 : type.max < value ? type.max : value;
                }
                function stringParse(string) {
                    var inst = color(), rgba = inst._rgba = [];
                    string = string.toLowerCase();
                    each(stringParsers, function(i, parser) {
                        var parsed, match = parser.re.exec(string), values = match && parser.parse(match), spaceName = parser.space || "rgba";
                        if (values) {
                            parsed = inst[spaceName](values);
                            // if this was an rgba parse the assignment might happen twice
                            // oh well....
                            inst[spaces[spaceName].cache] = parsed[spaces[spaceName].cache];
                            rgba = inst._rgba = parsed._rgba;
                            // exit each( stringParsers ) here because we matched
                            return false;
                        }
                    });
                    // Found a stringParser that handled it
                    if (rgba.length) {
                        // if this came from a parsed string, force "transparent" when alpha is 0
                        // chrome, (and maybe others) return "transparent" as rgba(0,0,0,0)
                        if (rgba.join() === "0,0,0,0") {
                            jQuery.extend(rgba, colors.transparent);
                        }
                        return inst;
                    }
                    // named colors
                    return colors[string];
                }
                color.fn = jQuery.extend(color.prototype, {
                    parse: function(red, green, blue, alpha) {
                        if (red === undefined) {
                            this._rgba = [ null, null, null, null ];
                            return this;
                        }
                        if (red.jquery || red.nodeType) {
                            red = jQuery(red).css(green);
                            green = undefined;
                        }
                        var inst = this, type = jQuery.type(red), rgba = this._rgba = [];
                        // more than 1 argument specified - assume ( red, green, blue, alpha )
                        if (green !== undefined) {
                            red = [ red, green, blue, alpha ];
                            type = "array";
                        }
                        if (type === "string") {
                            return this.parse(stringParse(red) || colors._default);
                        }
                        if (type === "array") {
                            each(spaces.rgba.props, function(key, prop) {
                                rgba[prop.idx] = clamp(red[prop.idx], prop);
                            });
                            return this;
                        }
                        if (type === "object") {
                            if (red instanceof color) {
                                each(spaces, function(spaceName, space) {
                                    if (red[space.cache]) {
                                        inst[space.cache] = red[space.cache].slice();
                                    }
                                });
                            } else {
                                each(spaces, function(spaceName, space) {
                                    var cache = space.cache;
                                    each(space.props, function(key, prop) {
                                        // if the cache doesn't exist, and we know how to convert
                                        if (!inst[cache] && space.to) {
                                            // if the value was null, we don't need to copy it
                                            // if the key was alpha, we don't need to copy it either
                                            if (key === "alpha" || red[key] == null) {
                                                return;
                                            }
                                            inst[cache] = space.to(inst._rgba);
                                        }
                                        // this is the only case where we allow nulls for ALL properties.
                                        // call clamp with alwaysAllowEmpty
                                        inst[cache][prop.idx] = clamp(red[key], prop, true);
                                    });
                                    // everything defined but alpha?
                                    if (inst[cache] && jQuery.inArray(null, inst[cache].slice(0, 3)) < 0) {
                                        // use the default of 1
                                        inst[cache][3] = 1;
                                        if (space.from) {
                                            inst._rgba = space.from(inst[cache]);
                                        }
                                    }
                                });
                            }
                            return this;
                        }
                    },
                    is: function(compare) {
                        var is = color(compare), same = true, inst = this;
                        each(spaces, function(_, space) {
                            var localCache, isCache = is[space.cache];
                            if (isCache) {
                                localCache = inst[space.cache] || space.to && space.to(inst._rgba) || [];
                                each(space.props, function(_, prop) {
                                    if (isCache[prop.idx] != null) {
                                        same = isCache[prop.idx] === localCache[prop.idx];
                                        return same;
                                    }
                                });
                            }
                            return same;
                        });
                        return same;
                    },
                    _space: function() {
                        var used = [], inst = this;
                        each(spaces, function(spaceName, space) {
                            if (inst[space.cache]) {
                                used.push(spaceName);
                            }
                        });
                        return used.pop();
                    },
                    transition: function(other, distance) {
                        var end = color(other), spaceName = end._space(), space = spaces[spaceName], startColor = this.alpha() === 0 ? color("transparent") : this, start = startColor[space.cache] || space.to(startColor._rgba), result = start.slice();
                        end = end[space.cache];
                        each(space.props, function(key, prop) {
                            var index = prop.idx, startValue = start[index], endValue = end[index], type = propTypes[prop.type] || {};
                            // if null, don't override start value
                            if (endValue === null) {
                                return;
                            }
                            // if null - use end
                            if (startValue === null) {
                                result[index] = endValue;
                            } else {
                                if (type.mod) {
                                    if (endValue - startValue > type.mod / 2) {
                                        startValue += type.mod;
                                    } else if (startValue - endValue > type.mod / 2) {
                                        startValue -= type.mod;
                                    }
                                }
                                result[index] = clamp((endValue - startValue) * distance + startValue, prop);
                            }
                        });
                        return this[spaceName](result);
                    },
                    blend: function(opaque) {
                        // if we are already opaque - return ourself
                        if (this._rgba[3] === 1) {
                            return this;
                        }
                        var rgb = this._rgba.slice(), a = rgb.pop(), blend = color(opaque)._rgba;
                        return color(jQuery.map(rgb, function(v, i) {
                            return (1 - a) * blend[i] + a * v;
                        }));
                    },
                    toRgbaString: function() {
                        var prefix = "rgba(", rgba = jQuery.map(this._rgba, function(v, i) {
                            return v == null ? i > 2 ? 1 : 0 : v;
                        });
                        if (rgba[3] === 1) {
                            rgba.pop();
                            prefix = "rgb(";
                        }
                        return prefix + rgba.join() + ")";
                    },
                    toHslaString: function() {
                        var prefix = "hsla(", hsla = jQuery.map(this.hsla(), function(v, i) {
                            if (v == null) {
                                v = i > 2 ? 1 : 0;
                            }
                            // catch 1 and 2
                            if (i && i < 3) {
                                v = Math.round(v * 100) + "%";
                            }
                            return v;
                        });
                        if (hsla[3] === 1) {
                            hsla.pop();
                            prefix = "hsl(";
                        }
                        return prefix + hsla.join() + ")";
                    },
                    toHexString: function(includeAlpha) {
                        var rgba = this._rgba.slice(), alpha = rgba.pop();
                        if (includeAlpha) {
                            rgba.push(~~(alpha * 255));
                        }
                        return "#" + jQuery.map(rgba, function(v) {
                            // default to 0 when nulls exist
                            v = (v || 0).toString(16);
                            return v.length === 1 ? "0" + v : v;
                        }).join("");
                    },
                    toString: function() {
                        return this._rgba[3] === 0 ? "transparent" : this.toRgbaString();
                    }
                });
                color.fn.parse.prototype = color.fn;
                // hsla conversions adapted from:
                // https://code.google.com/p/maashaack/source/browse/packages/graphics/trunk/src/graphics/colors/HUE2RGB.as?r=5021
                function hue2rgb(p, q, h) {
                    h = (h + 1) % 1;
                    if (h * 6 < 1) {
                        return p + (q - p) * h * 6;
                    }
                    if (h * 2 < 1) {
                        return q;
                    }
                    if (h * 3 < 2) {
                        return p + (q - p) * (2 / 3 - h) * 6;
                    }
                    return p;
                }
                spaces.hsla.to = function(rgba) {
                    if (rgba[0] == null || rgba[1] == null || rgba[2] == null) {
                        return [ null, null, null, rgba[3] ];
                    }
                    var r = rgba[0] / 255, g = rgba[1] / 255, b = rgba[2] / 255, a = rgba[3], max = Math.max(r, g, b), min = Math.min(r, g, b), diff = max - min, add = max + min, l = add * .5, h, s;
                    if (min === max) {
                        h = 0;
                    } else if (r === max) {
                        h = 60 * (g - b) / diff + 360;
                    } else if (g === max) {
                        h = 60 * (b - r) / diff + 120;
                    } else {
                        h = 60 * (r - g) / diff + 240;
                    }
                    // chroma (diff) == 0 means greyscale which, by definition, saturation = 0%
                    // otherwise, saturation is based on the ratio of chroma (diff) to lightness (add)
                    if (diff === 0) {
                        s = 0;
                    } else if (l <= .5) {
                        s = diff / add;
                    } else {
                        s = diff / (2 - add);
                    }
                    return [ Math.round(h) % 360, s, l, a == null ? 1 : a ];
                };
                spaces.hsla.from = function(hsla) {
                    if (hsla[0] == null || hsla[1] == null || hsla[2] == null) {
                        return [ null, null, null, hsla[3] ];
                    }
                    var h = hsla[0] / 360, s = hsla[1], l = hsla[2], a = hsla[3], q = l <= .5 ? l * (1 + s) : l + s - l * s, p = 2 * l - q;
                    return [ Math.round(hue2rgb(p, q, h + 1 / 3) * 255), Math.round(hue2rgb(p, q, h) * 255), Math.round(hue2rgb(p, q, h - 1 / 3) * 255), a ];
                };
                each(spaces, function(spaceName, space) {
                    var props = space.props, cache = space.cache, to = space.to, from = space.from;
                    // makes rgba() and hsla()
                    color.fn[spaceName] = function(value) {
                        // generate a cache for this space if it doesn't exist
                        if (to && !this[cache]) {
                            this[cache] = to(this._rgba);
                        }
                        if (value === undefined) {
                            return this[cache].slice();
                        }
                        var ret, type = jQuery.type(value), arr = type === "array" || type === "object" ? value : arguments, local = this[cache].slice();
                        each(props, function(key, prop) {
                            var val = arr[type === "object" ? key : prop.idx];
                            if (val == null) {
                                val = local[prop.idx];
                            }
                            local[prop.idx] = clamp(val, prop);
                        });
                        if (from) {
                            ret = color(from(local));
                            ret[cache] = local;
                            return ret;
                        } else {
                            return color(local);
                        }
                    };
                    // makes red() green() blue() alpha() hue() saturation() lightness()
                    each(props, function(key, prop) {
                        // alpha is included in more than one space
                        if (color.fn[key]) {
                            return;
                        }
                        color.fn[key] = function(value) {
                            var vtype = jQuery.type(value), fn = key === "alpha" ? this._hsla ? "hsla" : "rgba" : spaceName, local = this[fn](), cur = local[prop.idx], match;
                            if (vtype === "undefined") {
                                return cur;
                            }
                            if (vtype === "function") {
                                value = value.call(this, cur);
                                vtype = jQuery.type(value);
                            }
                            if (value == null && prop.empty) {
                                return this;
                            }
                            if (vtype === "string") {
                                match = rplusequals.exec(value);
                                if (match) {
                                    value = cur + parseFloat(match[2]) * (match[1] === "+" ? 1 : -1);
                                }
                            }
                            local[prop.idx] = value;
                            return this[fn](local);
                        };
                    });
                });
                // add cssHook and .fx.step function for each named hook.
                // accept a space separated string of properties
                color.hook = function(hook) {
                    var hooks = hook.split(" ");
                    each(hooks, function(i, hook) {
                        jQuery.cssHooks[hook] = {
                            set: function(elem, value) {
                                var parsed, curElem, backgroundColor = "";
                                if (value !== "transparent" && (jQuery.type(value) !== "string" || (parsed = stringParse(value)))) {
                                    value = color(parsed || value);
                                    if (!support.rgba && value._rgba[3] !== 1) {
                                        curElem = hook === "backgroundColor" ? elem.parentNode : elem;
                                        while ((backgroundColor === "" || backgroundColor === "transparent") && curElem && curElem.style) {
                                            try {
                                                backgroundColor = jQuery.css(curElem, "backgroundColor");
                                                curElem = curElem.parentNode;
                                            } catch (e) {}
                                        }
                                        value = value.blend(backgroundColor && backgroundColor !== "transparent" ? backgroundColor : "_default");
                                    }
                                    value = value.toRgbaString();
                                }
                                try {
                                    elem.style[hook] = value;
                                } catch (e) {}
                            }
                        };
                        jQuery.fx.step[hook] = function(fx) {
                            if (!fx.colorInit) {
                                fx.start = color(fx.elem, hook);
                                fx.end = color(fx.end);
                                fx.colorInit = true;
                            }
                            jQuery.cssHooks[hook].set(fx.elem, fx.start.transition(fx.end, fx.pos));
                        };
                    });
                };
                color.hook(stepHooks);
                jQuery.cssHooks.borderColor = {
                    expand: function(value) {
                        var expanded = {};
                        each([ "Top", "Right", "Bottom", "Left" ], function(i, part) {
                            expanded["border" + part + "Color"] = value;
                        });
                        return expanded;
                    }
                };
                // Basic color names only.
                // Usage of any of the other color names requires adding yourself or including
                // jquery.color.svg-names.js.
                colors = jQuery.Color.names = {
                    // 4.1. Basic color keywords
                    aqua: "#00ffff",
                    black: "#000000",
                    blue: "#0000ff",
                    fuchsia: "#ff00ff",
                    gray: "#808080",
                    green: "#008000",
                    lime: "#00ff00",
                    maroon: "#800000",
                    navy: "#000080",
                    olive: "#808000",
                    purple: "#800080",
                    red: "#ff0000",
                    silver: "#c0c0c0",
                    teal: "#008080",
                    white: "#ffffff",
                    yellow: "#ffff00",
                    // 4.2.3. "transparent" color keyword
                    transparent: [ null, null, null, 0 ],
                    _default: "#ffffff"
                };
            })(jQuery);
            /******************************************************************************/
            /****************************** CLASS ANIMATIONS ******************************/
            /******************************************************************************/
            (function() {
                var classAnimationActions = [ "add", "remove", "toggle" ], shorthandStyles = {
                    border: 1,
                    borderBottom: 1,
                    borderColor: 1,
                    borderLeft: 1,
                    borderRight: 1,
                    borderTop: 1,
                    borderWidth: 1,
                    margin: 1,
                    padding: 1
                };
                $.each([ "borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle" ], function(_, prop) {
                    $.fx.step[prop] = function(fx) {
                        if (fx.end !== "none" && !fx.setAttr || fx.pos === 1 && !fx.setAttr) {
                            jQuery.style(fx.elem, prop, fx.end);
                            fx.setAttr = true;
                        }
                    };
                });
                function getElementStyles(elem) {
                    var key, len, style = elem.ownerDocument.defaultView ? elem.ownerDocument.defaultView.getComputedStyle(elem, null) : elem.currentStyle, styles = {};
                    if (style && style.length && style[0] && style[style[0]]) {
                        len = style.length;
                        while (len--) {
                            key = style[len];
                            if (typeof style[key] === "string") {
                                styles[$.camelCase(key)] = style[key];
                            }
                        }
                    } else {
                        for (key in style) {
                            if (typeof style[key] === "string") {
                                styles[key] = style[key];
                            }
                        }
                    }
                    return styles;
                }
                function styleDifference(oldStyle, newStyle) {
                    var diff = {}, name, value;
                    for (name in newStyle) {
                        value = newStyle[name];
                        if (oldStyle[name] !== value) {
                            if (!shorthandStyles[name]) {
                                if ($.fx.step[name] || !isNaN(parseFloat(value))) {
                                    diff[name] = value;
                                }
                            }
                        }
                    }
                    return diff;
                }
                // support: jQuery <1.8
                if (!$.fn.addBack) {
                    $.fn.addBack = function(selector) {
                        return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
                    };
                }
                $.effects.animateClass = function(value, duration, easing, callback) {
                    var o = $.speed(duration, easing, callback);
                    return this.queue(function() {
                        var animated = $(this), baseClass = animated.attr("class") || "", applyClassChange, allAnimations = o.children ? animated.find("*").addBack() : animated;
                        // map the animated objects to store the original styles.
                        allAnimations = allAnimations.map(function() {
                            var el = $(this);
                            return {
                                el: el,
                                start: getElementStyles(this)
                            };
                        });
                        // apply class change
                        applyClassChange = function() {
                            $.each(classAnimationActions, function(i, action) {
                                if (value[action]) {
                                    animated[action + "Class"](value[action]);
                                }
                            });
                        };
                        applyClassChange();
                        // map all animated objects again - calculate new styles and diff
                        allAnimations = allAnimations.map(function() {
                            this.end = getElementStyles(this.el[0]);
                            this.diff = styleDifference(this.start, this.end);
                            return this;
                        });
                        // apply original class
                        animated.attr("class", baseClass);
                        // map all animated objects again - this time collecting a promise
                        allAnimations = allAnimations.map(function() {
                            var styleInfo = this, dfd = $.Deferred(), opts = $.extend({}, o, {
                                queue: false,
                                complete: function() {
                                    dfd.resolve(styleInfo);
                                }
                            });
                            this.el.animate(this.diff, opts);
                            return dfd.promise();
                        });
                        // once all animations have completed:
                        $.when.apply($, allAnimations.get()).done(function() {
                            // set the final class
                            applyClassChange();
                            // for each animated element,
                            // clear all css properties that were animated
                            $.each(arguments, function() {
                                var el = this.el;
                                $.each(this.diff, function(key) {
                                    el.css(key, "");
                                });
                            });
                            // this is guarnteed to be there if you use jQuery.speed()
                            // it also handles dequeuing the next anim...
                            o.complete.call(animated[0]);
                        });
                    });
                };
                $.fn.extend({
                    addClass: function(orig) {
                        return function(classNames, speed, easing, callback) {
                            return speed ? $.effects.animateClass.call(this, {
                                add: classNames
                            }, speed, easing, callback) : orig.apply(this, arguments);
                        };
                    }($.fn.addClass),
                    removeClass: function(orig) {
                        return function(classNames, speed, easing, callback) {
                            return arguments.length > 1 ? $.effects.animateClass.call(this, {
                                remove: classNames
                            }, speed, easing, callback) : orig.apply(this, arguments);
                        };
                    }($.fn.removeClass),
                    toggleClass: function(orig) {
                        return function(classNames, force, speed, easing, callback) {
                            if (typeof force === "boolean" || force === undefined) {
                                if (!speed) {
                                    // without speed parameter
                                    return orig.apply(this, arguments);
                                } else {
                                    return $.effects.animateClass.call(this, force ? {
                                        add: classNames
                                    } : {
                                        remove: classNames
                                    }, speed, easing, callback);
                                }
                            } else {
                                // without force parameter
                                return $.effects.animateClass.call(this, {
                                    toggle: classNames
                                }, force, speed, easing);
                            }
                        };
                    }($.fn.toggleClass),
                    switchClass: function(remove, add, speed, easing, callback) {
                        return $.effects.animateClass.call(this, {
                            add: add,
                            remove: remove
                        }, speed, easing, callback);
                    }
                });
            })();
            /******************************************************************************/
            /*********************************** EFFECTS **********************************/
            /******************************************************************************/
            (function() {
                $.extend($.effects, {
                    version: "1.10.2",
                    // Saves a set of properties in a data storage
                    save: function(element, set) {
                        for (var i = 0; i < set.length; i++) {
                            if (set[i] !== null) {
                                element.data(dataSpace + set[i], element[0].style[set[i]]);
                            }
                        }
                    },
                    // Restores a set of previously saved properties from a data storage
                    restore: function(element, set) {
                        var val, i;
                        for (i = 0; i < set.length; i++) {
                            if (set[i] !== null) {
                                val = element.data(dataSpace + set[i]);
                                // support: jQuery 1.6.2
                                // http://bugs.jquery.com/ticket/9917
                                // jQuery 1.6.2 incorrectly returns undefined for any falsy value.
                                // We can't differentiate between "" and 0 here, so we just assume
                                // empty string since it's likely to be a more common value...
                                if (val === undefined) {
                                    val = "";
                                }
                                element.css(set[i], val);
                            }
                        }
                    },
                    setMode: function(el, mode) {
                        if (mode === "toggle") {
                            mode = el.is(":hidden") ? "show" : "hide";
                        }
                        return mode;
                    },
                    // Translates a [top,left] array into a baseline value
                    // this should be a little more flexible in the future to handle a string & hash
                    getBaseline: function(origin, original) {
                        var y, x;
                        switch (origin[0]) {
                          case "top":
                            y = 0;
                            break;

                          case "middle":
                            y = .5;
                            break;

                          case "bottom":
                            y = 1;
                            break;

                          default:
                            y = origin[0] / original.height;
                        }
                        switch (origin[1]) {
                          case "left":
                            x = 0;
                            break;

                          case "center":
                            x = .5;
                            break;

                          case "right":
                            x = 1;
                            break;

                          default:
                            x = origin[1] / original.width;
                        }
                        return {
                            x: x,
                            y: y
                        };
                    },
                    // Wraps the element around a wrapper that copies position properties
                    createWrapper: function(element) {
                        // if the element is already wrapped, return it
                        if (element.parent().is(".ui-effects-wrapper")) {
                            return element.parent();
                        }
                        // wrap the element
                        var props = {
                            width: element.outerWidth(true),
                            height: element.outerHeight(true),
                            "float": element.css("float")
                        }, wrapper = $("<div></div>").addClass("ui-effects-wrapper").css({
                            fontSize: "100%",
                            background: "transparent",
                            border: "none",
                            margin: 0,
                            padding: 0
                        }), // Store the size in case width/height are defined in % - Fixes #5245
                        size = {
                            width: element.width(),
                            height: element.height()
                        }, active = document.activeElement;
                        // support: Firefox
                        // Firefox incorrectly exposes anonymous content
                        // https://bugzilla.mozilla.org/show_bug.cgi?id=561664
                        try {
                            active.id;
                        } catch (e) {
                            active = document.body;
                        }
                        element.wrap(wrapper);
                        // Fixes #7595 - Elements lose focus when wrapped.
                        if (element[0] === active || $.contains(element[0], active)) {
                            $(active).focus();
                        }
                        wrapper = element.parent();
                        //Hotfix for jQuery 1.4 since some change in wrap() seems to actually lose the reference to the wrapped element
                        // transfer positioning properties to the wrapper
                        if (element.css("position") === "static") {
                            wrapper.css({
                                position: "relative"
                            });
                            element.css({
                                position: "relative"
                            });
                        } else {
                            $.extend(props, {
                                position: element.css("position"),
                                zIndex: element.css("z-index")
                            });
                            $.each([ "top", "left", "bottom", "right" ], function(i, pos) {
                                props[pos] = element.css(pos);
                                if (isNaN(parseInt(props[pos], 10))) {
                                    props[pos] = "auto";
                                }
                            });
                            element.css({
                                position: "relative",
                                top: 0,
                                left: 0,
                                right: "auto",
                                bottom: "auto"
                            });
                        }
                        element.css(size);
                        return wrapper.css(props).show();
                    },
                    removeWrapper: function(element) {
                        var active = document.activeElement;
                        if (element.parent().is(".ui-effects-wrapper")) {
                            element.parent().replaceWith(element);
                            // Fixes #7595 - Elements lose focus when wrapped.
                            if (element[0] === active || $.contains(element[0], active)) {
                                $(active).focus();
                            }
                        }
                        return element;
                    },
                    setTransition: function(element, list, factor, value) {
                        value = value || {};
                        $.each(list, function(i, x) {
                            var unit = element.cssUnit(x);
                            if (unit[0] > 0) {
                                value[x] = unit[0] * factor + unit[1];
                            }
                        });
                        return value;
                    }
                });
                // return an effect options object for the given parameters:
                function _normalizeArguments(effect, options, speed, callback) {
                    // allow passing all options as the first parameter
                    if ($.isPlainObject(effect)) {
                        options = effect;
                        effect = effect.effect;
                    }
                    // convert to an object
                    effect = {
                        effect: effect
                    };
                    // catch (effect, null, ...)
                    if (options == null) {
                        options = {};
                    }
                    // catch (effect, callback)
                    if ($.isFunction(options)) {
                        callback = options;
                        speed = null;
                        options = {};
                    }
                    // catch (effect, speed, ?)
                    if (typeof options === "number" || $.fx.speeds[options]) {
                        callback = speed;
                        speed = options;
                        options = {};
                    }
                    // catch (effect, options, callback)
                    if ($.isFunction(speed)) {
                        callback = speed;
                        speed = null;
                    }
                    // add options to effect
                    if (options) {
                        $.extend(effect, options);
                    }
                    speed = speed || options.duration;
                    effect.duration = $.fx.off ? 0 : typeof speed === "number" ? speed : speed in $.fx.speeds ? $.fx.speeds[speed] : $.fx.speeds._default;
                    effect.complete = callback || options.complete;
                    return effect;
                }
                function standardAnimationOption(option) {
                    // Valid standard speeds (nothing, number, named speed)
                    if (!option || typeof option === "number" || $.fx.speeds[option]) {
                        return true;
                    }
                    // Invalid strings - treat as "normal" speed
                    if (typeof option === "string" && !$.effects.effect[option]) {
                        return true;
                    }
                    // Complete callback
                    if ($.isFunction(option)) {
                        return true;
                    }
                    // Options hash (but not naming an effect)
                    if (typeof option === "object" && !option.effect) {
                        return true;
                    }
                    // Didn't match any standard API
                    return false;
                }
                $.fn.extend({
                    effect: function() {
                        var args = _normalizeArguments.apply(this, arguments), mode = args.mode, queue = args.queue, effectMethod = $.effects.effect[args.effect];
                        if ($.fx.off || !effectMethod) {
                            // delegate to the original method (e.g., .show()) if possible
                            if (mode) {
                                return this[mode](args.duration, args.complete);
                            } else {
                                return this.each(function() {
                                    if (args.complete) {
                                        args.complete.call(this);
                                    }
                                });
                            }
                        }
                        function run(next) {
                            var elem = $(this), complete = args.complete, mode = args.mode;
                            function done() {
                                if ($.isFunction(complete)) {
                                    complete.call(elem[0]);
                                }
                                if ($.isFunction(next)) {
                                    next();
                                }
                            }
                            // If the element already has the correct final state, delegate to
                            // the core methods so the internal tracking of "olddisplay" works.
                            if (elem.is(":hidden") ? mode === "hide" : mode === "show") {
                                elem[mode]();
                                done();
                            } else {
                                effectMethod.call(elem[0], args, done);
                            }
                        }
                        return queue === false ? this.each(run) : this.queue(queue || "fx", run);
                    },
                    show: function(orig) {
                        return function(option) {
                            if (standardAnimationOption(option)) {
                                return orig.apply(this, arguments);
                            } else {
                                var args = _normalizeArguments.apply(this, arguments);
                                args.mode = "show";
                                return this.effect.call(this, args);
                            }
                        };
                    }($.fn.show),
                    hide: function(orig) {
                        return function(option) {
                            if (standardAnimationOption(option)) {
                                return orig.apply(this, arguments);
                            } else {
                                var args = _normalizeArguments.apply(this, arguments);
                                args.mode = "hide";
                                return this.effect.call(this, args);
                            }
                        };
                    }($.fn.hide),
                    toggle: function(orig) {
                        return function(option) {
                            if (standardAnimationOption(option) || typeof option === "boolean") {
                                return orig.apply(this, arguments);
                            } else {
                                var args = _normalizeArguments.apply(this, arguments);
                                args.mode = "toggle";
                                return this.effect.call(this, args);
                            }
                        };
                    }($.fn.toggle),
                    // helper functions
                    cssUnit: function(key) {
                        var style = this.css(key), val = [];
                        $.each([ "em", "px", "%", "pt" ], function(i, unit) {
                            if (style.indexOf(unit) > 0) {
                                val = [ parseFloat(style), unit ];
                            }
                        });
                        return val;
                    }
                });
            })();
            /******************************************************************************/
            /*********************************** EASING ***********************************/
            /******************************************************************************/
            (function() {
                // based on easing equations from Robert Penner (http://www.robertpenner.com/easing)
                var baseEasings = {};
                $.each([ "Quad", "Cubic", "Quart", "Quint", "Expo" ], function(i, name) {
                    baseEasings[name] = function(p) {
                        return Math.pow(p, i + 2);
                    };
                });
                $.extend(baseEasings, {
                    Sine: function(p) {
                        return 1 - Math.cos(p * Math.PI / 2);
                    },
                    Circ: function(p) {
                        return 1 - Math.sqrt(1 - p * p);
                    },
                    Elastic: function(p) {
                        return p === 0 || p === 1 ? p : -Math.pow(2, 8 * (p - 1)) * Math.sin(((p - 1) * 80 - 7.5) * Math.PI / 15);
                    },
                    Back: function(p) {
                        return p * p * (3 * p - 2);
                    },
                    Bounce: function(p) {
                        var pow2, bounce = 4;
                        while (p < ((pow2 = Math.pow(2, --bounce)) - 1) / 11) {}
                        return 1 / Math.pow(4, 3 - bounce) - 7.5625 * Math.pow((pow2 * 3 - 2) / 22 - p, 2);
                    }
                });
                $.each(baseEasings, function(name, easeIn) {
                    $.easing["easeIn" + name] = easeIn;
                    $.easing["easeOut" + name] = function(p) {
                        return 1 - easeIn(1 - p);
                    };
                    $.easing["easeInOut" + name] = function(p) {
                        return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn(p * -2 + 2) / 2;
                    };
                });
            })();
        })(jQuery);
        (function($, undefined) {
            var uid = 0, hideProps = {}, showProps = {};
            hideProps.height = hideProps.paddingTop = hideProps.paddingBottom = hideProps.borderTopWidth = hideProps.borderBottomWidth = "hide";
            showProps.height = showProps.paddingTop = showProps.paddingBottom = showProps.borderTopWidth = showProps.borderBottomWidth = "show";
            $.widget("ui.accordion", {
                version: "1.10.2",
                options: {
                    active: 0,
                    animate: {},
                    collapsible: false,
                    event: "click",
                    header: "> li > :first-child,> :not(li):even",
                    heightStyle: "auto",
                    icons: {
                        activeHeader: "ui-icon-triangle-1-s",
                        header: "ui-icon-triangle-1-e"
                    },
                    // callbacks
                    activate: null,
                    beforeActivate: null
                },
                _create: function() {
                    var options = this.options;
                    this.prevShow = this.prevHide = $();
                    this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist");
                    // don't allow collapsible: false and active: false / null
                    if (!options.collapsible && (options.active === false || options.active == null)) {
                        options.active = 0;
                    }
                    this._processPanels();
                    // handle negative values
                    if (options.active < 0) {
                        options.active += this.headers.length;
                    }
                    this._refresh();
                },
                _getCreateEventData: function() {
                    return {
                        header: this.active,
                        panel: !this.active.length ? $() : this.active.next(),
                        content: !this.active.length ? $() : this.active.next()
                    };
                },
                _createIcons: function() {
                    var icons = this.options.icons;
                    if (icons) {
                        $("<span>").addClass("ui-accordion-header-icon ui-icon " + icons.header).prependTo(this.headers);
                        this.active.children(".ui-accordion-header-icon").removeClass(icons.header).addClass(icons.activeHeader);
                        this.headers.addClass("ui-accordion-icons");
                    }
                },
                _destroyIcons: function() {
                    this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove();
                },
                _destroy: function() {
                    var contents;
                    // clean up main element
                    this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
                    // clean up headers
                    this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-helper-reset ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").each(function() {
                        if (/^ui-accordion/.test(this.id)) {
                            this.removeAttribute("id");
                        }
                    });
                    this._destroyIcons();
                    // clean up content panels
                    contents = this.headers.next().css("display", "").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").each(function() {
                        if (/^ui-accordion/.test(this.id)) {
                            this.removeAttribute("id");
                        }
                    });
                    if (this.options.heightStyle !== "content") {
                        contents.css("height", "");
                    }
                },
                _setOption: function(key, value) {
                    if (key === "active") {
                        // _activate() will handle invalid values and update this.options
                        this._activate(value);
                        return;
                    }
                    if (key === "event") {
                        if (this.options.event) {
                            this._off(this.headers, this.options.event);
                        }
                        this._setupEvents(value);
                    }
                    this._super(key, value);
                    // setting collapsible: false while collapsed; open first panel
                    if (key === "collapsible" && !value && this.options.active === false) {
                        this._activate(0);
                    }
                    if (key === "icons") {
                        this._destroyIcons();
                        if (value) {
                            this._createIcons();
                        }
                    }
                    // #5332 - opacity doesn't cascade to positioned elements in IE
                    // so we need to add the disabled class to the headers and panels
                    if (key === "disabled") {
                        this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!value);
                    }
                },
                _keydown: function(event) {
                    /*jshint maxcomplexity:15*/
                    if (event.altKey || event.ctrlKey) {
                        return;
                    }
                    var keyCode = $.ui.keyCode, length = this.headers.length, currentIndex = this.headers.index(event.target), toFocus = false;
                    switch (event.keyCode) {
                      case keyCode.RIGHT:
                      case keyCode.DOWN:
                        toFocus = this.headers[(currentIndex + 1) % length];
                        break;

                      case keyCode.LEFT:
                      case keyCode.UP:
                        toFocus = this.headers[(currentIndex - 1 + length) % length];
                        break;

                      case keyCode.SPACE:
                      case keyCode.ENTER:
                        this._eventHandler(event);
                        break;

                      case keyCode.HOME:
                        toFocus = this.headers[0];
                        break;

                      case keyCode.END:
                        toFocus = this.headers[length - 1];
                        break;
                    }
                    if (toFocus) {
                        $(event.target).attr("tabIndex", -1);
                        $(toFocus).attr("tabIndex", 0);
                        toFocus.focus();
                        event.preventDefault();
                    }
                },
                _panelKeyDown: function(event) {
                    if (event.keyCode === $.ui.keyCode.UP && event.ctrlKey) {
                        $(event.currentTarget).prev().focus();
                    }
                },
                refresh: function() {
                    var options = this.options;
                    this._processPanels();
                    // was collapsed or no panel
                    if (options.active === false && options.collapsible === true || !this.headers.length) {
                        options.active = false;
                        this.active = $();
                    }
                    if (options.active === false) {
                        this._activate(0);
                    } else if (this.active.length && !$.contains(this.element[0], this.active[0])) {
                        // all remaining panel are disabled
                        if (this.headers.length === this.headers.find(".ui-state-disabled").length) {
                            options.active = false;
                            this.active = $();
                        } else {
                            this._activate(Math.max(0, options.active - 1));
                        }
                    } else {
                        // make sure active index is correct
                        options.active = this.headers.index(this.active);
                    }
                    this._destroyIcons();
                    this._refresh();
                },
                _processPanels: function() {
                    this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all");
                    this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide();
                },
                _refresh: function() {
                    var maxHeight, options = this.options, heightStyle = options.heightStyle, parent = this.element.parent(), accordionId = this.accordionId = "ui-accordion-" + (this.element.attr("id") || ++uid);
                    this.active = this._findActive(options.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all");
                    this.active.next().addClass("ui-accordion-content-active").show();
                    this.headers.attr("role", "tab").each(function(i) {
                        var header = $(this), headerId = header.attr("id"), panel = header.next(), panelId = panel.attr("id");
                        if (!headerId) {
                            headerId = accordionId + "-header-" + i;
                            header.attr("id", headerId);
                        }
                        if (!panelId) {
                            panelId = accordionId + "-panel-" + i;
                            panel.attr("id", panelId);
                        }
                        header.attr("aria-controls", panelId);
                        panel.attr("aria-labelledby", headerId);
                    }).next().attr("role", "tabpanel");
                    this.headers.not(this.active).attr({
                        "aria-selected": "false",
                        tabIndex: -1
                    }).next().attr({
                        "aria-expanded": "false",
                        "aria-hidden": "true"
                    }).hide();
                    // make sure at least one header is in the tab order
                    if (!this.active.length) {
                        this.headers.eq(0).attr("tabIndex", 0);
                    } else {
                        this.active.attr({
                            "aria-selected": "true",
                            tabIndex: 0
                        }).next().attr({
                            "aria-expanded": "true",
                            "aria-hidden": "false"
                        });
                    }
                    this._createIcons();
                    this._setupEvents(options.event);
                    if (heightStyle === "fill") {
                        maxHeight = parent.height();
                        this.element.siblings(":visible").each(function() {
                            var elem = $(this), position = elem.css("position");
                            if (position === "absolute" || position === "fixed") {
                                return;
                            }
                            maxHeight -= elem.outerHeight(true);
                        });
                        this.headers.each(function() {
                            maxHeight -= $(this).outerHeight(true);
                        });
                        this.headers.next().each(function() {
                            $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                        }).css("overflow", "auto");
                    } else if (heightStyle === "auto") {
                        maxHeight = 0;
                        this.headers.next().each(function() {
                            maxHeight = Math.max(maxHeight, $(this).css("height", "").height());
                        }).height(maxHeight);
                    }
                },
                _activate: function(index) {
                    var active = this._findActive(index)[0];
                    // trying to activate the already active panel
                    if (active === this.active[0]) {
                        return;
                    }
                    // trying to collapse, simulate a click on the currently active header
                    active = active || this.active[0];
                    this._eventHandler({
                        target: active,
                        currentTarget: active,
                        preventDefault: $.noop
                    });
                },
                _findActive: function(selector) {
                    return typeof selector === "number" ? this.headers.eq(selector) : $();
                },
                _setupEvents: function(event) {
                    var events = {
                        keydown: "_keydown"
                    };
                    if (event) {
                        $.each(event.split(" "), function(index, eventName) {
                            events[eventName] = "_eventHandler";
                        });
                    }
                    this._off(this.headers.add(this.headers.next()));
                    this._on(this.headers, events);
                    this._on(this.headers.next(), {
                        keydown: "_panelKeyDown"
                    });
                    this._hoverable(this.headers);
                    this._focusable(this.headers);
                },
                _eventHandler: function(event) {
                    var options = this.options, active = this.active, clicked = $(event.currentTarget), clickedIsActive = clicked[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : clicked.next(), toHide = active.next(), eventData = {
                        oldHeader: active,
                        oldPanel: toHide,
                        newHeader: collapsing ? $() : clicked,
                        newPanel: toShow
                    };
                    event.preventDefault();
                    if (// click on active header, but not collapsible
                    clickedIsActive && !options.collapsible || // allow canceling activation
                    this._trigger("beforeActivate", event, eventData) === false) {
                        return;
                    }
                    options.active = collapsing ? false : this.headers.index(clicked);
                    // when the call to ._toggle() comes after the class changes
                    // it causes a very odd bug in IE 8 (see #6720)
                    this.active = clickedIsActive ? $() : clicked;
                    this._toggle(eventData);
                    // switch classes
                    // corner classes on the previously active header stay after the animation
                    active.removeClass("ui-accordion-header-active ui-state-active");
                    if (options.icons) {
                        active.children(".ui-accordion-header-icon").removeClass(options.icons.activeHeader).addClass(options.icons.header);
                    }
                    if (!clickedIsActive) {
                        clicked.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top");
                        if (options.icons) {
                            clicked.children(".ui-accordion-header-icon").removeClass(options.icons.header).addClass(options.icons.activeHeader);
                        }
                        clicked.next().addClass("ui-accordion-content-active");
                    }
                },
                _toggle: function(data) {
                    var toShow = data.newPanel, toHide = this.prevShow.length ? this.prevShow : data.oldPanel;
                    // handle activating a panel during the animation for another activation
                    this.prevShow.add(this.prevHide).stop(true, true);
                    this.prevShow = toShow;
                    this.prevHide = toHide;
                    if (this.options.animate) {
                        this._animate(toShow, toHide, data);
                    } else {
                        toHide.hide();
                        toShow.show();
                        this._toggleComplete(data);
                    }
                    toHide.attr({
                        "aria-expanded": "false",
                        "aria-hidden": "true"
                    });
                    toHide.prev().attr("aria-selected", "false");
                    // if we're switching panels, remove the old header from the tab order
                    // if we're opening from collapsed state, remove the previous header from the tab order
                    // if we're collapsing, then keep the collapsing header in the tab order
                    if (toShow.length && toHide.length) {
                        toHide.prev().attr("tabIndex", -1);
                    } else if (toShow.length) {
                        this.headers.filter(function() {
                            return $(this).attr("tabIndex") === 0;
                        }).attr("tabIndex", -1);
                    }
                    toShow.attr({
                        "aria-expanded": "true",
                        "aria-hidden": "false"
                    }).prev().attr({
                        "aria-selected": "true",
                        tabIndex: 0
                    });
                },
                _animate: function(toShow, toHide, data) {
                    var total, easing, duration, that = this, adjust = 0, down = toShow.length && (!toHide.length || toShow.index() < toHide.index()), animate = this.options.animate || {}, options = down && animate.down || animate, complete = function() {
                        that._toggleComplete(data);
                    };
                    if (typeof options === "number") {
                        duration = options;
                    }
                    if (typeof options === "string") {
                        easing = options;
                    }
                    // fall back from options to animation in case of partial down settings
                    easing = easing || options.easing || animate.easing;
                    duration = duration || options.duration || animate.duration;
                    if (!toHide.length) {
                        return toShow.animate(showProps, duration, easing, complete);
                    }
                    if (!toShow.length) {
                        return toHide.animate(hideProps, duration, easing, complete);
                    }
                    total = toShow.show().outerHeight();
                    toHide.animate(hideProps, {
                        duration: duration,
                        easing: easing,
                        step: function(now, fx) {
                            fx.now = Math.round(now);
                        }
                    });
                    toShow.hide().animate(showProps, {
                        duration: duration,
                        easing: easing,
                        complete: complete,
                        step: function(now, fx) {
                            fx.now = Math.round(now);
                            if (fx.prop !== "height") {
                                adjust += fx.now;
                            } else if (that.options.heightStyle !== "content") {
                                fx.now = Math.round(total - toHide.outerHeight() - adjust);
                                adjust = 0;
                            }
                        }
                    });
                },
                _toggleComplete: function(data) {
                    var toHide = data.oldPanel;
                    toHide.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
                    // Work around for rendering bug in IE (#5421)
                    if (toHide.length) {
                        toHide.parent()[0].className = toHide.parent()[0].className;
                    }
                    this._trigger("activate", null, data);
                }
            });
        })(jQuery);
        (function($, undefined) {
            // used to prevent race conditions with remote data sources
            var requestIndex = 0;
            $.widget("ui.autocomplete", {
                version: "1.10.2",
                defaultElement: "<input>",
                options: {
                    appendTo: null,
                    autoFocus: false,
                    delay: 300,
                    minLength: 1,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        collision: "none"
                    },
                    source: null,
                    // callbacks
                    change: null,
                    close: null,
                    focus: null,
                    open: null,
                    response: null,
                    search: null,
                    select: null
                },
                pending: 0,
                _create: function() {
                    // Some browsers only repeat keydown events, not keypress events,
                    // so we use the suppressKeyPress flag to determine if we've already
                    // handled the keydown event. #7269
                    // Unfortunately the code for & in keypress is the same as the up arrow,
                    // so we use the suppressKeyPressRepeat flag to avoid handling keypress
                    // events when we know the keydown event was used to modify the
                    // search term. #7799
                    var suppressKeyPress, suppressKeyPressRepeat, suppressInput, nodeName = this.element[0].nodeName.toLowerCase(), isTextarea = nodeName === "textarea", isInput = nodeName === "input";
                    this.isMultiLine = // Textareas are always multi-line
                    isTextarea ? true : // Inputs are always single-line, even if inside a contentEditable element
                    // IE also treats inputs as contentEditable
                    isInput ? false : // All other element types are determined by whether or not they're contentEditable
                    this.element.prop("isContentEditable");
                    this.valueMethod = this.element[isTextarea || isInput ? "val" : "text"];
                    this.isNewMenu = true;
                    this.element.addClass("ui-autocomplete-input").attr("autocomplete", "off");
                    this._on(this.element, {
                        keydown: function(event) {
                            /*jshint maxcomplexity:15*/
                            if (this.element.prop("readOnly")) {
                                suppressKeyPress = true;
                                suppressInput = true;
                                suppressKeyPressRepeat = true;
                                return;
                            }
                            suppressKeyPress = false;
                            suppressInput = false;
                            suppressKeyPressRepeat = false;
                            var keyCode = $.ui.keyCode;
                            switch (event.keyCode) {
                              case keyCode.PAGE_UP:
                                suppressKeyPress = true;
                                this._move("previousPage", event);
                                break;

                              case keyCode.PAGE_DOWN:
                                suppressKeyPress = true;
                                this._move("nextPage", event);
                                break;

                              case keyCode.UP:
                                suppressKeyPress = true;
                                this._keyEvent("previous", event);
                                break;

                              case keyCode.DOWN:
                                suppressKeyPress = true;
                                this._keyEvent("next", event);
                                break;

                              case keyCode.ENTER:
                              case keyCode.NUMPAD_ENTER:
                                // when menu is open and has focus
                                if (this.menu.active) {
                                    // #6055 - Opera still allows the keypress to occur
                                    // which causes forms to submit
                                    suppressKeyPress = true;
                                    event.preventDefault();
                                    this.menu.select(event);
                                }
                                break;

                              case keyCode.TAB:
                                if (this.menu.active) {
                                    this.menu.select(event);
                                }
                                break;

                              case keyCode.ESCAPE:
                                if (this.menu.element.is(":visible")) {
                                    this._value(this.term);
                                    this.close(event);
                                    // Different browsers have different default behavior for escape
                                    // Single press can mean undo or clear
                                    // Double press in IE means clear the whole form
                                    event.preventDefault();
                                }
                                break;

                              default:
                                suppressKeyPressRepeat = true;
                                // search timeout should be triggered before the input value is changed
                                this._searchTimeout(event);
                                break;
                            }
                        },
                        keypress: function(event) {
                            if (suppressKeyPress) {
                                suppressKeyPress = false;
                                event.preventDefault();
                                return;
                            }
                            if (suppressKeyPressRepeat) {
                                return;
                            }
                            // replicate some key handlers to allow them to repeat in Firefox and Opera
                            var keyCode = $.ui.keyCode;
                            switch (event.keyCode) {
                              case keyCode.PAGE_UP:
                                this._move("previousPage", event);
                                break;

                              case keyCode.PAGE_DOWN:
                                this._move("nextPage", event);
                                break;

                              case keyCode.UP:
                                this._keyEvent("previous", event);
                                break;

                              case keyCode.DOWN:
                                this._keyEvent("next", event);
                                break;
                            }
                        },
                        input: function(event) {
                            if (suppressInput) {
                                suppressInput = false;
                                event.preventDefault();
                                return;
                            }
                            this._searchTimeout(event);
                        },
                        focus: function() {
                            this.selectedItem = null;
                            this.previous = this._value();
                        },
                        blur: function(event) {
                            if (this.cancelBlur) {
                                delete this.cancelBlur;
                                return;
                            }
                            clearTimeout(this.searching);
                            this.close(event);
                            this._change(event);
                        }
                    });
                    this._initSource();
                    this.menu = $("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                        // custom key handling for now
                        input: $(),
                        // disable ARIA support, the live region takes care of that
                        role: null
                    }).hide().data("ui-menu");
                    this._on(this.menu.element, {
                        mousedown: function(event) {
                            // prevent moving focus out of the text field
                            event.preventDefault();
                            // IE doesn't prevent moving focus even with event.preventDefault()
                            // so we set a flag to know when we should ignore the blur event
                            this.cancelBlur = true;
                            this._delay(function() {
                                delete this.cancelBlur;
                            });
                            // clicking on the scrollbar causes focus to shift to the body
                            // but we can't detect a mouseup or a click immediately afterward
                            // so we have to track the next mousedown and close the menu if
                            // the user clicks somewhere outside of the autocomplete
                            var menuElement = this.menu.element[0];
                            if (!$(event.target).closest(".ui-menu-item").length) {
                                this._delay(function() {
                                    var that = this;
                                    this.document.one("mousedown", function(event) {
                                        if (event.target !== that.element[0] && event.target !== menuElement && !$.contains(menuElement, event.target)) {
                                            that.close();
                                        }
                                    });
                                });
                            }
                        },
                        menufocus: function(event, ui) {
                            // support: Firefox
                            // Prevent accidental activation of menu items in Firefox (#7024 #9118)
                            if (this.isNewMenu) {
                                this.isNewMenu = false;
                                if (event.originalEvent && /^mouse/.test(event.originalEvent.type)) {
                                    this.menu.blur();
                                    this.document.one("mousemove", function() {
                                        $(event.target).trigger(event.originalEvent);
                                    });
                                    return;
                                }
                            }
                            var item = ui.item.data("ui-autocomplete-item");
                            if (false !== this._trigger("focus", event, {
                                item: item
                            })) {
                                // use value to match what will end up in the input, if it was a key event
                                if (event.originalEvent && /^key/.test(event.originalEvent.type)) {
                                    this._value(item.value);
                                }
                            } else {
                                // Normally the input is populated with the item's value as the
                                // menu is navigated, causing screen readers to notice a change and
                                // announce the item. Since the focus event was canceled, this doesn't
                                // happen, so we update the live region so that screen readers can
                                // still notice the change and announce it.
                                this.liveRegion.text(item.value);
                            }
                        },
                        menuselect: function(event, ui) {
                            var item = ui.item.data("ui-autocomplete-item"), previous = this.previous;
                            // only trigger when focus was lost (click on menu)
                            if (this.element[0] !== this.document[0].activeElement) {
                                this.element.focus();
                                this.previous = previous;
                                // #6109 - IE triggers two focus events and the second
                                // is asynchronous, so we need to reset the previous
                                // term synchronously and asynchronously :-(
                                this._delay(function() {
                                    this.previous = previous;
                                    this.selectedItem = item;
                                });
                            }
                            if (false !== this._trigger("select", event, {
                                item: item
                            })) {
                                this._value(item.value);
                            }
                            // reset the term after the select event
                            // this allows custom select handling to work properly
                            this.term = this._value();
                            this.close(event);
                            this.selectedItem = item;
                        }
                    });
                    this.liveRegion = $("<span>", {
                        role: "status",
                        "aria-live": "polite"
                    }).addClass("ui-helper-hidden-accessible").insertAfter(this.element);
                    // turning off autocomplete prevents the browser from remembering the
                    // value when navigating through history, so we re-enable autocomplete
                    // if the page is unloaded before the widget is destroyed. #7790
                    this._on(this.window, {
                        beforeunload: function() {
                            this.element.removeAttr("autocomplete");
                        }
                    });
                },
                _destroy: function() {
                    clearTimeout(this.searching);
                    this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
                    this.menu.element.remove();
                    this.liveRegion.remove();
                },
                _setOption: function(key, value) {
                    this._super(key, value);
                    if (key === "source") {
                        this._initSource();
                    }
                    if (key === "appendTo") {
                        this.menu.element.appendTo(this._appendTo());
                    }
                    if (key === "disabled" && value && this.xhr) {
                        this.xhr.abort();
                    }
                },
                _appendTo: function() {
                    var element = this.options.appendTo;
                    if (element) {
                        element = element.jquery || element.nodeType ? $(element) : this.document.find(element).eq(0);
                    }
                    if (!element) {
                        element = this.element.closest(".ui-front");
                    }
                    if (!element.length) {
                        element = this.document[0].body;
                    }
                    return element;
                },
                _initSource: function() {
                    var array, url, that = this;
                    if ($.isArray(this.options.source)) {
                        array = this.options.source;
                        this.source = function(request, response) {
                            response($.ui.autocomplete.filter(array, request.term));
                        };
                    } else if (typeof this.options.source === "string") {
                        url = this.options.source;
                        this.source = function(request, response) {
                            if (that.xhr) {
                                that.xhr.abort();
                            }
                            that.xhr = $.ajax({
                                url: url,
                                data: request,
                                dataType: "json",
                                success: function(data) {
                                    response(data);
                                },
                                error: function() {
                                    response([]);
                                }
                            });
                        };
                    } else {
                        this.source = this.options.source;
                    }
                },
                _searchTimeout: function(event) {
                    clearTimeout(this.searching);
                    this.searching = this._delay(function() {
                        // only search if the value has changed
                        if (this.term !== this._value()) {
                            this.selectedItem = null;
                            this.search(null, event);
                        }
                    }, this.options.delay);
                },
                search: function(value, event) {
                    value = value != null ? value : this._value();
                    // always save the actual value, not the one passed as an argument
                    this.term = this._value();
                    if (value.length < this.options.minLength) {
                        return this.close(event);
                    }
                    if (this._trigger("search", event) === false) {
                        return;
                    }
                    return this._search(value);
                },
                _search: function(value) {
                    this.pending++;
                    this.element.addClass("ui-autocomplete-loading");
                    this.cancelSearch = false;
                    this.source({
                        term: value
                    }, this._response());
                },
                _response: function() {
                    var that = this, index = ++requestIndex;
                    return function(content) {
                        if (index === requestIndex) {
                            that.__response(content);
                        }
                        that.pending--;
                        if (!that.pending) {
                            that.element.removeClass("ui-autocomplete-loading");
                        }
                    };
                },
                __response: function(content) {
                    if (content) {
                        content = this._normalize(content);
                    }
                    this._trigger("response", null, {
                        content: content
                    });
                    if (!this.options.disabled && content && content.length && !this.cancelSearch) {
                        this._suggest(content);
                        this._trigger("open");
                    } else {
                        // use ._close() instead of .close() so we don't cancel future searches
                        this._close();
                    }
                },
                close: function(event) {
                    this.cancelSearch = true;
                    this._close(event);
                },
                _close: function(event) {
                    if (this.menu.element.is(":visible")) {
                        this.menu.element.hide();
                        this.menu.blur();
                        this.isNewMenu = true;
                        this._trigger("close", event);
                    }
                },
                _change: function(event) {
                    if (this.previous !== this._value()) {
                        this._trigger("change", event, {
                            item: this.selectedItem
                        });
                    }
                },
                _normalize: function(items) {
                    // assume all items have the right format when the first item is complete
                    if (items.length && items[0].label && items[0].value) {
                        return items;
                    }
                    return $.map(items, function(item) {
                        if (typeof item === "string") {
                            return {
                                label: item,
                                value: item
                            };
                        }
                        return $.extend({
                            label: item.label || item.value,
                            value: item.value || item.label
                        }, item);
                    });
                },
                _suggest: function(items) {
                    var ul = this.menu.element.empty();
                    this._renderMenu(ul, items);
                    this.isNewMenu = true;
                    this.menu.refresh();
                    // size and position menu
                    ul.show();
                    this._resizeMenu();
                    ul.position($.extend({
                        of: this.element
                    }, this.options.position));
                    if (this.options.autoFocus) {
                        this.menu.next();
                    }
                },
                _resizeMenu: function() {
                    var ul = this.menu.element;
                    ul.outerWidth(Math.max(// Firefox wraps long text (possibly a rounding bug)
                    // so we add 1px to avoid the wrapping (#7513)
                    ul.width("").outerWidth() + 1, this.element.outerWidth()));
                },
                _renderMenu: function(ul, items) {
                    var that = this;
                    $.each(items, function(index, item) {
                        that._renderItemData(ul, item);
                    });
                },
                _renderItemData: function(ul, item) {
                    return this._renderItem(ul, item).data("ui-autocomplete-item", item);
                },
                _renderItem: function(ul, item) {
                    return $("<li>").append($("<a>").text(item.label)).appendTo(ul);
                },
                _move: function(direction, event) {
                    if (!this.menu.element.is(":visible")) {
                        this.search(null, event);
                        return;
                    }
                    if (this.menu.isFirstItem() && /^previous/.test(direction) || this.menu.isLastItem() && /^next/.test(direction)) {
                        this._value(this.term);
                        this.menu.blur();
                        return;
                    }
                    this.menu[direction](event);
                },
                widget: function() {
                    return this.menu.element;
                },
                _value: function() {
                    return this.valueMethod.apply(this.element, arguments);
                },
                _keyEvent: function(keyEvent, event) {
                    if (!this.isMultiLine || this.menu.element.is(":visible")) {
                        this._move(keyEvent, event);
                        // prevents moving cursor to beginning/end of the text field in some browsers
                        event.preventDefault();
                    }
                }
            });
            $.extend($.ui.autocomplete, {
                escapeRegex: function(value) {
                    return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
                },
                filter: function(array, term) {
                    var matcher = new RegExp($.ui.autocomplete.escapeRegex(term), "i");
                    return $.grep(array, function(value) {
                        return matcher.test(value.label || value.value || value);
                    });
                }
            });
            // live region extension, adding a `messages` option
            // NOTE: This is an experimental API. We are still investigating
            // a full solution for string manipulation and internationalization.
            $.widget("ui.autocomplete", $.ui.autocomplete, {
                options: {
                    messages: {
                        noResults: "No search results.",
                        results: function(amount) {
                            return amount + (amount > 1 ? " results are" : " result is") + " available, use up and down arrow keys to navigate.";
                        }
                    }
                },
                __response: function(content) {
                    var message;
                    this._superApply(arguments);
                    if (this.options.disabled || this.cancelSearch) {
                        return;
                    }
                    if (content && content.length) {
                        message = this.options.messages.results(content.length);
                    } else {
                        message = this.options.messages.noResults;
                    }
                    this.liveRegion.text(message);
                }
            });
        })(jQuery);
        (function($, undefined) {
            var lastActive, startXPos, startYPos, clickDragged, baseClasses = "ui-button ui-widget ui-state-default ui-corner-all", stateClasses = "ui-state-hover ui-state-active ", typeClasses = "ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only", formResetHandler = function() {
                var buttons = $(this).find(":ui-button");
                setTimeout(function() {
                    buttons.button("refresh");
                }, 1);
            }, radioGroup = function(radio) {
                var name = radio.name, form = radio.form, radios = $([]);
                if (name) {
                    name = name.replace(/'/g, "\\'");
                    if (form) {
                        radios = $(form).find("[name='" + name + "']");
                    } else {
                        radios = $("[name='" + name + "']", radio.ownerDocument).filter(function() {
                            return !this.form;
                        });
                    }
                }
                return radios;
            };
            $.widget("ui.button", {
                version: "1.10.2",
                defaultElement: "<button>",
                options: {
                    disabled: null,
                    text: true,
                    label: null,
                    icons: {
                        primary: null,
                        secondary: null
                    }
                },
                _create: function() {
                    this.element.closest("form").unbind("reset" + this.eventNamespace).bind("reset" + this.eventNamespace, formResetHandler);
                    if (typeof this.options.disabled !== "boolean") {
                        this.options.disabled = !!this.element.prop("disabled");
                    } else {
                        this.element.prop("disabled", this.options.disabled);
                    }
                    this._determineButtonType();
                    this.hasTitle = !!this.buttonElement.attr("title");
                    var that = this, options = this.options, toggleButton = this.type === "checkbox" || this.type === "radio", activeClass = !toggleButton ? "ui-state-active" : "", focusClass = "ui-state-focus";
                    if (options.label === null) {
                        options.label = this.type === "input" ? this.buttonElement.val() : this.buttonElement.html();
                    }
                    this._hoverable(this.buttonElement);
                    this.buttonElement.addClass(baseClasses).attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                        if (options.disabled) {
                            return;
                        }
                        if (this === lastActive) {
                            $(this).addClass("ui-state-active");
                        }
                    }).bind("mouseleave" + this.eventNamespace, function() {
                        if (options.disabled) {
                            return;
                        }
                        $(this).removeClass(activeClass);
                    }).bind("click" + this.eventNamespace, function(event) {
                        if (options.disabled) {
                            event.preventDefault();
                            event.stopImmediatePropagation();
                        }
                    });
                    this.element.bind("focus" + this.eventNamespace, function() {
                        // no need to check disabled, focus won't be triggered anyway
                        that.buttonElement.addClass(focusClass);
                    }).bind("blur" + this.eventNamespace, function() {
                        that.buttonElement.removeClass(focusClass);
                    });
                    if (toggleButton) {
                        this.element.bind("change" + this.eventNamespace, function() {
                            if (clickDragged) {
                                return;
                            }
                            that.refresh();
                        });
                        // if mouse moves between mousedown and mouseup (drag) set clickDragged flag
                        // prevents issue where button state changes but checkbox/radio checked state
                        // does not in Firefox (see ticket #6970)
                        this.buttonElement.bind("mousedown" + this.eventNamespace, function(event) {
                            if (options.disabled) {
                                return;
                            }
                            clickDragged = false;
                            startXPos = event.pageX;
                            startYPos = event.pageY;
                        }).bind("mouseup" + this.eventNamespace, function(event) {
                            if (options.disabled) {
                                return;
                            }
                            if (startXPos !== event.pageX || startYPos !== event.pageY) {
                                clickDragged = true;
                            }
                        });
                    }
                    if (this.type === "checkbox") {
                        this.buttonElement.bind("click" + this.eventNamespace, function() {
                            if (options.disabled || clickDragged) {
                                return false;
                            }
                        });
                    } else if (this.type === "radio") {
                        this.buttonElement.bind("click" + this.eventNamespace, function() {
                            if (options.disabled || clickDragged) {
                                return false;
                            }
                            $(this).addClass("ui-state-active");
                            that.buttonElement.attr("aria-pressed", "true");
                            var radio = that.element[0];
                            radioGroup(radio).not(radio).map(function() {
                                return $(this).button("widget")[0];
                            }).removeClass("ui-state-active").attr("aria-pressed", "false");
                        });
                    } else {
                        this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).addClass("ui-state-active");
                            lastActive = this;
                            that.document.one("mouseup", function() {
                                lastActive = null;
                            });
                        }).bind("mouseup" + this.eventNamespace, function() {
                            if (options.disabled) {
                                return false;
                            }
                            $(this).removeClass("ui-state-active");
                        }).bind("keydown" + this.eventNamespace, function(event) {
                            if (options.disabled) {
                                return false;
                            }
                            if (event.keyCode === $.ui.keyCode.SPACE || event.keyCode === $.ui.keyCode.ENTER) {
                                $(this).addClass("ui-state-active");
                            }
                        }).bind("keyup" + this.eventNamespace + " blur" + this.eventNamespace, function() {
                            $(this).removeClass("ui-state-active");
                        });
                        if (this.buttonElement.is("a")) {
                            this.buttonElement.keyup(function(event) {
                                if (event.keyCode === $.ui.keyCode.SPACE) {
                                    // TODO pass through original event correctly (just as 2nd argument doesn't work)
                                    $(this).click();
                                }
                            });
                        }
                    }
                    // TODO: pull out $.Widget's handling for the disabled option into
                    // $.Widget.prototype._setOptionDisabled so it's easy to proxy and can
                    // be overridden by individual plugins
                    this._setOption("disabled", options.disabled);
                    this._resetButton();
                },
                _determineButtonType: function() {
                    var ancestor, labelSelector, checked;
                    if (this.element.is("[type=checkbox]")) {
                        this.type = "checkbox";
                    } else if (this.element.is("[type=radio]")) {
                        this.type = "radio";
                    } else if (this.element.is("input")) {
                        this.type = "input";
                    } else {
                        this.type = "button";
                    }
                    if (this.type === "checkbox" || this.type === "radio") {
                        // we don't search against the document in case the element
                        // is disconnected from the DOM
                        ancestor = this.element.parents().last();
                        labelSelector = "label[for='" + this.element.attr("id") + "']";
                        this.buttonElement = ancestor.find(labelSelector);
                        if (!this.buttonElement.length) {
                            ancestor = ancestor.length ? ancestor.siblings() : this.element.siblings();
                            this.buttonElement = ancestor.filter(labelSelector);
                            if (!this.buttonElement.length) {
                                this.buttonElement = ancestor.find(labelSelector);
                            }
                        }
                        this.element.addClass("ui-helper-hidden-accessible");
                        checked = this.element.is(":checked");
                        if (checked) {
                            this.buttonElement.addClass("ui-state-active");
                        }
                        this.buttonElement.prop("aria-pressed", checked);
                    } else {
                        this.buttonElement = this.element;
                    }
                },
                widget: function() {
                    return this.buttonElement;
                },
                _destroy: function() {
                    this.element.removeClass("ui-helper-hidden-accessible");
                    this.buttonElement.removeClass(baseClasses + " " + stateClasses + " " + typeClasses).removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
                    if (!this.hasTitle) {
                        this.buttonElement.removeAttr("title");
                    }
                },
                _setOption: function(key, value) {
                    this._super(key, value);
                    if (key === "disabled") {
                        if (value) {
                            this.element.prop("disabled", true);
                        } else {
                            this.element.prop("disabled", false);
                        }
                        return;
                    }
                    this._resetButton();
                },
                refresh: function() {
                    //See #8237 & #8828
                    var isDisabled = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
                    if (isDisabled !== this.options.disabled) {
                        this._setOption("disabled", isDisabled);
                    }
                    if (this.type === "radio") {
                        radioGroup(this.element[0]).each(function() {
                            if ($(this).is(":checked")) {
                                $(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true");
                            } else {
                                $(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false");
                            }
                        });
                    } else if (this.type === "checkbox") {
                        if (this.element.is(":checked")) {
                            this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true");
                        } else {
                            this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false");
                        }
                    }
                },
                _resetButton: function() {
                    if (this.type === "input") {
                        if (this.options.label) {
                            this.element.val(this.options.label);
                        }
                        return;
                    }
                    var buttonElement = this.buttonElement.removeClass(typeClasses), buttonText = $("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(buttonElement.empty()).text(), icons = this.options.icons, multipleIcons = icons.primary && icons.secondary, buttonClasses = [];
                    if (icons.primary || icons.secondary) {
                        if (this.options.text) {
                            buttonClasses.push("ui-button-text-icon" + (multipleIcons ? "s" : icons.primary ? "-primary" : "-secondary"));
                        }
                        if (icons.primary) {
                            buttonElement.prepend("<span class='ui-button-icon-primary ui-icon " + icons.primary + "'></span>");
                        }
                        if (icons.secondary) {
                            buttonElement.append("<span class='ui-button-icon-secondary ui-icon " + icons.secondary + "'></span>");
                        }
                        if (!this.options.text) {
                            buttonClasses.push(multipleIcons ? "ui-button-icons-only" : "ui-button-icon-only");
                            if (!this.hasTitle) {
                                buttonElement.attr("title", $.trim(buttonText));
                            }
                        }
                    } else {
                        buttonClasses.push("ui-button-text-only");
                    }
                    buttonElement.addClass(buttonClasses.join(" "));
                }
            });
            $.widget("ui.buttonset", {
                version: "1.10.2",
                options: {
                    items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
                },
                _create: function() {
                    this.element.addClass("ui-buttonset");
                },
                _init: function() {
                    this.refresh();
                },
                _setOption: function(key, value) {
                    if (key === "disabled") {
                        this.buttons.button("option", key, value);
                    }
                    this._super(key, value);
                },
                refresh: function() {
                    var rtl = this.element.css("direction") === "rtl";
                    this.buttons = this.element.find(this.options.items).filter(":ui-button").button("refresh").end().not(":ui-button").button().end().map(function() {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(rtl ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(rtl ? "ui-corner-left" : "ui-corner-right").end().end();
                },
                _destroy: function() {
                    this.element.removeClass("ui-buttonset");
                    this.buttons.map(function() {
                        return $(this).button("widget")[0];
                    }).removeClass("ui-corner-left ui-corner-right").end().button("destroy");
                }
            });
        })(jQuery);
        (function($, undefined) {
            $.extend($.ui, {
                datepicker: {
                    version: "1.10.2"
                }
            });
            var PROP_NAME = "datepicker", dpuuid = new Date().getTime(), instActive;
            /* Date picker manager.
   Use the singleton instance of this class, $.datepicker, to interact with the date picker.
   Settings for (groups of) date pickers are maintained in an instance object,
   allowing multiple different settings on the same page. */
            function Datepicker() {
                this._curInst = null;
                // The current instance in use
                this._keyEvent = false;
                // If the last event was a key event
                this._disabledInputs = [];
                // List of date picker inputs that have been disabled
                this._datepickerShowing = false;
                // True if the popup picker is showing , false if not
                this._inDialog = false;
                // True if showing within a "dialog", false if not
                this._mainDivId = "ui-datepicker-div";
                // The ID of the main datepicker division
                this._inlineClass = "ui-datepicker-inline";
                // The name of the inline marker class
                this._appendClass = "ui-datepicker-append";
                // The name of the append marker class
                this._triggerClass = "ui-datepicker-trigger";
                // The name of the trigger marker class
                this._dialogClass = "ui-datepicker-dialog";
                // The name of the dialog marker class
                this._disableClass = "ui-datepicker-disabled";
                // The name of the disabled covering marker class
                this._unselectableClass = "ui-datepicker-unselectable";
                // The name of the unselectable cell marker class
                this._currentClass = "ui-datepicker-current-day";
                // The name of the current day marker class
                this._dayOverClass = "ui-datepicker-days-cell-over";
                // The name of the day hover marker class
                this.regional = [];
                // Available regional settings, indexed by language code
                this.regional[""] = {
                    // Default regional settings
                    closeText: "Done",
                    // Display text for close link
                    prevText: "Prev",
                    // Display text for previous month link
                    nextText: "Next",
                    // Display text for next month link
                    currentText: "Today",
                    // Display text for current month link
                    monthNames: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" ],
                    // Names of months for drop-down and formatting
                    monthNamesShort: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ],
                    // For formatting
                    dayNames: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
                    // For formatting
                    dayNamesShort: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
                    // For formatting
                    dayNamesMin: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ],
                    // Column headings for days starting at Sunday
                    weekHeader: "Wk",
                    // Column header for week of the year
                    dateFormat: "mm/dd/yy",
                    // See format options on parseDate
                    firstDay: 0,
                    // The first day of the week, Sun = 0, Mon = 1, ...
                    isRTL: false,
                    // True if right-to-left language, false if left-to-right
                    showMonthAfterYear: false,
                    // True if the year select precedes month, false for month then year
                    yearSuffix: ""
                };
                this._defaults = {
                    // Global defaults for all the date picker instances
                    showOn: "focus",
                    // "focus" for popup on focus,
                    // "button" for trigger button, or "both" for either
                    showAnim: "fadeIn",
                    // Name of jQuery animation for popup
                    showOptions: {},
                    // Options for enhanced animations
                    defaultDate: null,
                    // Used when field is blank: actual date,
                    // +/-number for offset from today, null for today
                    appendText: "",
                    // Display text following the input box, e.g. showing the format
                    buttonText: "...",
                    // Text for trigger button
                    buttonImage: "",
                    // URL for trigger button image
                    buttonImageOnly: false,
                    // True if the image appears alone, false if it appears on a button
                    hideIfNoPrevNext: false,
                    // True to hide next/previous month links
                    // if not applicable, false to just disable them
                    navigationAsDateFormat: false,
                    // True if date formatting applied to prev/today/next links
                    gotoCurrent: false,
                    // True if today link goes back to current selection instead
                    changeMonth: false,
                    // True if month can be selected directly, false if only prev/next
                    changeYear: false,
                    // True if year can be selected directly, false if only prev/next
                    yearRange: "c-10:c+10",
                    // Range of years to display in drop-down,
                    // either relative to today's year (-nn:+nn), relative to currently displayed year
                    // (c-nn:c+nn), absolute (nnnn:nnnn), or a combination of the above (nnnn:-n)
                    showOtherMonths: false,
                    // True to show dates in other months, false to leave blank
                    selectOtherMonths: false,
                    // True to allow selection of dates in other months, false for unselectable
                    showWeek: false,
                    // True to show week of the year, false to not show it
                    calculateWeek: this.iso8601Week,
                    // How to calculate the week of the year,
                    // takes a Date and returns the number of the week for it
                    shortYearCutoff: "+10",
                    // Short year values < this are in the current century,
                    // > this are in the previous century,
                    // string value starting with "+" for current year + value
                    minDate: null,
                    // The earliest selectable date, or null for no limit
                    maxDate: null,
                    // The latest selectable date, or null for no limit
                    duration: "fast",
                    // Duration of display/closure
                    beforeShowDay: null,
                    // Function that takes a date and returns an array with
                    // [0] = true if selectable, false if not, [1] = custom CSS class name(s) or "",
                    // [2] = cell title (optional), e.g. $.datepicker.noWeekends
                    beforeShow: null,
                    // Function that takes an input field and
                    // returns a set of custom settings for the date picker
                    onSelect: null,
                    // Define a callback function when a date is selected
                    onChangeMonthYear: null,
                    // Define a callback function when the month or year is changed
                    onClose: null,
                    // Define a callback function when the datepicker is closed
                    numberOfMonths: 1,
                    // Number of months to show at a time
                    showCurrentAtPos: 0,
                    // The position in multipe months at which to show the current month (starting at 0)
                    stepMonths: 1,
                    // Number of months to step back/forward
                    stepBigMonths: 12,
                    // Number of months to step back/forward for the big links
                    altField: "",
                    // Selector for an alternate field to store selected dates into
                    altFormat: "",
                    // The date format to use for the alternate field
                    constrainInput: true,
                    // The input is constrained by the current date format
                    showButtonPanel: false,
                    // True to show button panel, false to not show it
                    autoSize: false,
                    // True to size the input for the date format, false to leave as is
                    disabled: false
                };
                $.extend(this._defaults, this.regional[""]);
                this.dpDiv = bindHover($("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"));
            }
            $.extend(Datepicker.prototype, {
                /* Class name added to elements to indicate already configured with a date picker. */
                markerClassName: "hasDatepicker",
                //Keep track of the maximum number of rows displayed (see #7043)
                maxRows: 4,
                // TODO rename to "widget" when switching to widget factory
                _widgetDatepicker: function() {
                    return this.dpDiv;
                },
                /* Override the default settings for all instances of the date picker.
	 * @param  settings  object - the new settings to use as defaults (anonymous object)
	 * @return the manager object
	 */
                setDefaults: function(settings) {
                    extendRemove(this._defaults, settings || {});
                    return this;
                },
                /* Attach the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 * @param  settings  object - the new settings to use for this date picker instance (anonymous)
	 */
                _attachDatepicker: function(target, settings) {
                    var nodeName, inline, inst;
                    nodeName = target.nodeName.toLowerCase();
                    inline = nodeName === "div" || nodeName === "span";
                    if (!target.id) {
                        this.uuid += 1;
                        target.id = "dp" + this.uuid;
                    }
                    inst = this._newInst($(target), inline);
                    inst.settings = $.extend({}, settings || {});
                    if (nodeName === "input") {
                        this._connectDatepicker(target, inst);
                    } else if (inline) {
                        this._inlineDatepicker(target, inst);
                    }
                },
                /* Create a new instance object. */
                _newInst: function(target, inline) {
                    var id = target[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1");
                    // escape jQuery meta chars
                    return {
                        id: id,
                        input: target,
                        // associated target
                        selectedDay: 0,
                        selectedMonth: 0,
                        selectedYear: 0,
                        // current selection
                        drawMonth: 0,
                        drawYear: 0,
                        // month being drawn
                        inline: inline,
                        // is datepicker inline or not
                        dpDiv: !inline ? this.dpDiv : // presentation div
                        bindHover($("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
                    };
                },
                /* Attach the date picker to an input field. */
                _connectDatepicker: function(target, inst) {
                    var input = $(target);
                    inst.append = $([]);
                    inst.trigger = $([]);
                    if (input.hasClass(this.markerClassName)) {
                        return;
                    }
                    this._attachments(input, inst);
                    input.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp);
                    this._autoSize(inst);
                    $.data(target, PROP_NAME, inst);
                    //If disabled option is true, disable the datepicker once it has been attached to the input (see ticket #5665)
                    if (inst.settings.disabled) {
                        this._disableDatepicker(target);
                    }
                },
                /* Make attachments based on settings. */
                _attachments: function(input, inst) {
                    var showOn, buttonText, buttonImage, appendText = this._get(inst, "appendText"), isRTL = this._get(inst, "isRTL");
                    if (inst.append) {
                        inst.append.remove();
                    }
                    if (appendText) {
                        inst.append = $("<span class='" + this._appendClass + "'>" + appendText + "</span>");
                        input[isRTL ? "before" : "after"](inst.append);
                    }
                    input.unbind("focus", this._showDatepicker);
                    if (inst.trigger) {
                        inst.trigger.remove();
                    }
                    showOn = this._get(inst, "showOn");
                    if (showOn === "focus" || showOn === "both") {
                        // pop-up date picker when in the marked field
                        input.focus(this._showDatepicker);
                    }
                    if (showOn === "button" || showOn === "both") {
                        // pop-up date picker when button clicked
                        buttonText = this._get(inst, "buttonText");
                        buttonImage = this._get(inst, "buttonImage");
                        inst.trigger = $(this._get(inst, "buttonImageOnly") ? $("<img/>").addClass(this._triggerClass).attr({
                            src: buttonImage,
                            alt: buttonText,
                            title: buttonText
                        }) : $("<button type='button'></button>").addClass(this._triggerClass).html(!buttonImage ? buttonText : $("<img/>").attr({
                            src: buttonImage,
                            alt: buttonText,
                            title: buttonText
                        })));
                        input[isRTL ? "before" : "after"](inst.trigger);
                        inst.trigger.click(function() {
                            if ($.datepicker._datepickerShowing && $.datepicker._lastInput === input[0]) {
                                $.datepicker._hideDatepicker();
                            } else if ($.datepicker._datepickerShowing && $.datepicker._lastInput !== input[0]) {
                                $.datepicker._hideDatepicker();
                                $.datepicker._showDatepicker(input[0]);
                            } else {
                                $.datepicker._showDatepicker(input[0]);
                            }
                            return false;
                        });
                    }
                },
                /* Apply the maximum length for the date format. */
                _autoSize: function(inst) {
                    if (this._get(inst, "autoSize") && !inst.inline) {
                        var findMax, max, maxI, i, date = new Date(2009, 12 - 1, 20), // Ensure double digits
                        dateFormat = this._get(inst, "dateFormat");
                        if (dateFormat.match(/[DM]/)) {
                            findMax = function(names) {
                                max = 0;
                                maxI = 0;
                                for (i = 0; i < names.length; i++) {
                                    if (names[i].length > max) {
                                        max = names[i].length;
                                        maxI = i;
                                    }
                                }
                                return maxI;
                            };
                            date.setMonth(findMax(this._get(inst, dateFormat.match(/MM/) ? "monthNames" : "monthNamesShort")));
                            date.setDate(findMax(this._get(inst, dateFormat.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - date.getDay());
                        }
                        inst.input.attr("size", this._formatDate(inst, date).length);
                    }
                },
                /* Attach an inline date picker to a div. */
                _inlineDatepicker: function(target, inst) {
                    var divSpan = $(target);
                    if (divSpan.hasClass(this.markerClassName)) {
                        return;
                    }
                    divSpan.addClass(this.markerClassName).append(inst.dpDiv);
                    $.data(target, PROP_NAME, inst);
                    this._setDate(inst, this._getDefaultDate(inst), true);
                    this._updateDatepicker(inst);
                    this._updateAlternate(inst);
                    //If disabled option is true, disable the datepicker before showing it (see ticket #5665)
                    if (inst.settings.disabled) {
                        this._disableDatepicker(target);
                    }
                    // Set display:block in place of inst.dpDiv.show() which won't work on disconnected elements
                    // http://bugs.jqueryui.com/ticket/7552 - A Datepicker created on a detached div has zero height
                    inst.dpDiv.css("display", "block");
                },
                /* Pop-up the date picker in a "dialog" box.
	 * @param  input element - ignored
	 * @param  date	string or Date - the initial date to display
	 * @param  onSelect  function - the function to call when a date is selected
	 * @param  settings  object - update the dialog date picker instance's settings (anonymous object)
	 * @param  pos int[2] - coordinates for the dialog's position within the screen or
	 *					event - with x/y coordinates or
	 *					leave empty for default (screen centre)
	 * @return the manager object
	 */
                _dialogDatepicker: function(input, date, onSelect, settings, pos) {
                    var id, browserWidth, browserHeight, scrollX, scrollY, inst = this._dialogInst;
                    // internal instance
                    if (!inst) {
                        this.uuid += 1;
                        id = "dp" + this.uuid;
                        this._dialogInput = $("<input type='text' id='" + id + "' style='position: absolute; top: -100px; width: 0px;'/>");
                        this._dialogInput.keydown(this._doKeyDown);
                        $("body").append(this._dialogInput);
                        inst = this._dialogInst = this._newInst(this._dialogInput, false);
                        inst.settings = {};
                        $.data(this._dialogInput[0], PROP_NAME, inst);
                    }
                    extendRemove(inst.settings, settings || {});
                    date = date && date.constructor === Date ? this._formatDate(inst, date) : date;
                    this._dialogInput.val(date);
                    this._pos = pos ? pos.length ? pos : [ pos.pageX, pos.pageY ] : null;
                    if (!this._pos) {
                        browserWidth = document.documentElement.clientWidth;
                        browserHeight = document.documentElement.clientHeight;
                        scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
                        scrollY = document.documentElement.scrollTop || document.body.scrollTop;
                        this._pos = // should use actual width/height below
                        [ browserWidth / 2 - 100 + scrollX, browserHeight / 2 - 150 + scrollY ];
                    }
                    // move input on screen for focus, but hidden behind dialog
                    this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
                    inst.settings.onSelect = onSelect;
                    this._inDialog = true;
                    this.dpDiv.addClass(this._dialogClass);
                    this._showDatepicker(this._dialogInput[0]);
                    if ($.blockUI) {
                        $.blockUI(this.dpDiv);
                    }
                    $.data(this._dialogInput[0], PROP_NAME, inst);
                    return this;
                },
                /* Detach a datepicker from its control.
	 * @param  target	element - the target input field or division or span
	 */
                _destroyDatepicker: function(target) {
                    var nodeName, $target = $(target), inst = $.data(target, PROP_NAME);
                    if (!$target.hasClass(this.markerClassName)) {
                        return;
                    }
                    nodeName = target.nodeName.toLowerCase();
                    $.removeData(target, PROP_NAME);
                    if (nodeName === "input") {
                        inst.append.remove();
                        inst.trigger.remove();
                        $target.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp);
                    } else if (nodeName === "div" || nodeName === "span") {
                        $target.removeClass(this.markerClassName).empty();
                    }
                },
                /* Enable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
                _enableDatepicker: function(target) {
                    var nodeName, inline, $target = $(target), inst = $.data(target, PROP_NAME);
                    if (!$target.hasClass(this.markerClassName)) {
                        return;
                    }
                    nodeName = target.nodeName.toLowerCase();
                    if (nodeName === "input") {
                        target.disabled = false;
                        inst.trigger.filter("button").each(function() {
                            this.disabled = false;
                        }).end().filter("img").css({
                            opacity: "1.0",
                            cursor: ""
                        });
                    } else if (nodeName === "div" || nodeName === "span") {
                        inline = $target.children("." + this._inlineClass);
                        inline.children().removeClass("ui-state-disabled");
                        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", false);
                    }
                    this._disabledInputs = $.map(this._disabledInputs, function(value) {
                        return value === target ? null : value;
                    });
                },
                /* Disable the date picker to a jQuery selection.
	 * @param  target	element - the target input field or division or span
	 */
                _disableDatepicker: function(target) {
                    var nodeName, inline, $target = $(target), inst = $.data(target, PROP_NAME);
                    if (!$target.hasClass(this.markerClassName)) {
                        return;
                    }
                    nodeName = target.nodeName.toLowerCase();
                    if (nodeName === "input") {
                        target.disabled = true;
                        inst.trigger.filter("button").each(function() {
                            this.disabled = true;
                        }).end().filter("img").css({
                            opacity: "0.5",
                            cursor: "default"
                        });
                    } else if (nodeName === "div" || nodeName === "span") {
                        inline = $target.children("." + this._inlineClass);
                        inline.children().addClass("ui-state-disabled");
                        inline.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", true);
                    }
                    this._disabledInputs = $.map(this._disabledInputs, function(value) {
                        return value === target ? null : value;
                    });
                    // delete entry
                    this._disabledInputs[this._disabledInputs.length] = target;
                },
                /* Is the first field in a jQuery collection disabled as a datepicker?
	 * @param  target	element - the target input field or division or span
	 * @return boolean - true if disabled, false if enabled
	 */
                _isDisabledDatepicker: function(target) {
                    if (!target) {
                        return false;
                    }
                    for (var i = 0; i < this._disabledInputs.length; i++) {
                        if (this._disabledInputs[i] === target) {
                            return true;
                        }
                    }
                    return false;
                },
                /* Retrieve the instance data for the target control.
	 * @param  target  element - the target input field or division or span
	 * @return  object - the associated instance data
	 * @throws  error if a jQuery problem getting data
	 */
                _getInst: function(target) {
                    try {
                        return $.data(target, PROP_NAME);
                    } catch (err) {
                        throw "Missing instance data for this datepicker";
                    }
                },
                /* Update or retrieve the settings for a date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 * @param  name	object - the new settings to update or
	 *				string - the name of the setting to change or retrieve,
	 *				when retrieving also "all" for all instance settings or
	 *				"defaults" for all global defaults
	 * @param  value   any - the new value for the setting
	 *				(omit if above is an object or to retrieve a value)
	 */
                _optionDatepicker: function(target, name, value) {
                    var settings, date, minDate, maxDate, inst = this._getInst(target);
                    if (arguments.length === 2 && typeof name === "string") {
                        return name === "defaults" ? $.extend({}, $.datepicker._defaults) : inst ? name === "all" ? $.extend({}, inst.settings) : this._get(inst, name) : null;
                    }
                    settings = name || {};
                    if (typeof name === "string") {
                        settings = {};
                        settings[name] = value;
                    }
                    if (inst) {
                        if (this._curInst === inst) {
                            this._hideDatepicker();
                        }
                        date = this._getDateDatepicker(target, true);
                        minDate = this._getMinMaxDate(inst, "min");
                        maxDate = this._getMinMaxDate(inst, "max");
                        extendRemove(inst.settings, settings);
                        // reformat the old minDate/maxDate values if dateFormat changes and a new minDate/maxDate isn't provided
                        if (minDate !== null && settings.dateFormat !== undefined && settings.minDate === undefined) {
                            inst.settings.minDate = this._formatDate(inst, minDate);
                        }
                        if (maxDate !== null && settings.dateFormat !== undefined && settings.maxDate === undefined) {
                            inst.settings.maxDate = this._formatDate(inst, maxDate);
                        }
                        if ("disabled" in settings) {
                            if (settings.disabled) {
                                this._disableDatepicker(target);
                            } else {
                                this._enableDatepicker(target);
                            }
                        }
                        this._attachments($(target), inst);
                        this._autoSize(inst);
                        this._setDate(inst, date);
                        this._updateAlternate(inst);
                        this._updateDatepicker(inst);
                    }
                },
                // change method deprecated
                _changeDatepicker: function(target, name, value) {
                    this._optionDatepicker(target, name, value);
                },
                /* Redraw the date picker attached to an input field or division.
	 * @param  target  element - the target input field or division or span
	 */
                _refreshDatepicker: function(target) {
                    var inst = this._getInst(target);
                    if (inst) {
                        this._updateDatepicker(inst);
                    }
                },
                /* Set the dates for a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  date	Date - the new date
	 */
                _setDateDatepicker: function(target, date) {
                    var inst = this._getInst(target);
                    if (inst) {
                        this._setDate(inst, date);
                        this._updateDatepicker(inst);
                        this._updateAlternate(inst);
                    }
                },
                /* Get the date(s) for the first entry in a jQuery selection.
	 * @param  target element - the target input field or division or span
	 * @param  noDefault boolean - true if no default date is to be used
	 * @return Date - the current date
	 */
                _getDateDatepicker: function(target, noDefault) {
                    var inst = this._getInst(target);
                    if (inst && !inst.inline) {
                        this._setDateFromField(inst, noDefault);
                    }
                    return inst ? this._getDate(inst) : null;
                },
                /* Handle keystrokes. */
                _doKeyDown: function(event) {
                    var onSelect, dateStr, sel, inst = $.datepicker._getInst(event.target), handled = true, isRTL = inst.dpDiv.is(".ui-datepicker-rtl");
                    inst._keyEvent = true;
                    if ($.datepicker._datepickerShowing) {
                        switch (event.keyCode) {
                          case 9:
                            $.datepicker._hideDatepicker();
                            handled = false;
                            break;

                          // hide on tab out
                            case 13:
                            sel = $("td." + $.datepicker._dayOverClass + ":not(." + $.datepicker._currentClass + ")", inst.dpDiv);
                            if (sel[0]) {
                                $.datepicker._selectDay(event.target, inst.selectedMonth, inst.selectedYear, sel[0]);
                            }
                            onSelect = $.datepicker._get(inst, "onSelect");
                            if (onSelect) {
                                dateStr = $.datepicker._formatDate(inst);
                                // trigger custom callback
                                onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
                            } else {
                                $.datepicker._hideDatepicker();
                            }
                            return false;

                          // don't submit the form
                            case 27:
                            $.datepicker._hideDatepicker();
                            break;

                          // hide on escape
                            case 33:
                            $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                            break;

                          // previous month/year on page up/+ ctrl
                            case 34:
                            $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                            break;

                          // next month/year on page down/+ ctrl
                            case 35:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._clearDate(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break;

                          // clear on ctrl or command +end
                            case 36:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._gotoToday(event.target);
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break;

                          // current on ctrl or command +home
                            case 37:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, isRTL ? +1 : -1, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // -1 day on ctrl or command +left
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, event.ctrlKey ? -$.datepicker._get(inst, "stepBigMonths") : -$.datepicker._get(inst, "stepMonths"), "M");
                            }
                            // next month/year on alt +left on Mac
                            break;

                          case 38:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, -7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break;

                          // -1 week on ctrl or command +up
                            case 39:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, isRTL ? -1 : +1, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            // +1 day on ctrl or command +right
                            if (event.originalEvent.altKey) {
                                $.datepicker._adjustDate(event.target, event.ctrlKey ? +$.datepicker._get(inst, "stepBigMonths") : +$.datepicker._get(inst, "stepMonths"), "M");
                            }
                            // next month/year on alt +right
                            break;

                          case 40:
                            if (event.ctrlKey || event.metaKey) {
                                $.datepicker._adjustDate(event.target, +7, "D");
                            }
                            handled = event.ctrlKey || event.metaKey;
                            break;

                          // +1 week on ctrl or command +down
                            default:
                            handled = false;
                        }
                    } else if (event.keyCode === 36 && event.ctrlKey) {
                        // display the date picker on ctrl+home
                        $.datepicker._showDatepicker(this);
                    } else {
                        handled = false;
                    }
                    if (handled) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                },
                /* Filter entered characters - based on date format. */
                _doKeyPress: function(event) {
                    var chars, chr, inst = $.datepicker._getInst(event.target);
                    if ($.datepicker._get(inst, "constrainInput")) {
                        chars = $.datepicker._possibleChars($.datepicker._get(inst, "dateFormat"));
                        chr = String.fromCharCode(event.charCode == null ? event.keyCode : event.charCode);
                        return event.ctrlKey || event.metaKey || chr < " " || !chars || chars.indexOf(chr) > -1;
                    }
                },
                /* Synchronise manual entry and field/alternate field. */
                _doKeyUp: function(event) {
                    var date, inst = $.datepicker._getInst(event.target);
                    if (inst.input.val() !== inst.lastVal) {
                        try {
                            date = $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), inst.input ? inst.input.val() : null, $.datepicker._getFormatConfig(inst));
                            if (date) {
                                // only if valid
                                $.datepicker._setDateFromField(inst);
                                $.datepicker._updateAlternate(inst);
                                $.datepicker._updateDatepicker(inst);
                            }
                        } catch (err) {}
                    }
                    return true;
                },
                /* Pop-up the date picker for a given input field.
	 * If false returned from beforeShow event handler do not show.
	 * @param  input  element - the input field attached to the date picker or
	 *					event - if triggered by focus
	 */
                _showDatepicker: function(input) {
                    input = input.target || input;
                    if (input.nodeName.toLowerCase() !== "input") {
                        // find from button/image trigger
                        input = $("input", input.parentNode)[0];
                    }
                    if ($.datepicker._isDisabledDatepicker(input) || $.datepicker._lastInput === input) {
                        // already here
                        return;
                    }
                    var inst, beforeShow, beforeShowSettings, isFixed, offset, showAnim, duration;
                    inst = $.datepicker._getInst(input);
                    if ($.datepicker._curInst && $.datepicker._curInst !== inst) {
                        $.datepicker._curInst.dpDiv.stop(true, true);
                        if (inst && $.datepicker._datepickerShowing) {
                            $.datepicker._hideDatepicker($.datepicker._curInst.input[0]);
                        }
                    }
                    beforeShow = $.datepicker._get(inst, "beforeShow");
                    beforeShowSettings = beforeShow ? beforeShow.apply(input, [ input, inst ]) : {};
                    if (beforeShowSettings === false) {
                        return;
                    }
                    extendRemove(inst.settings, beforeShowSettings);
                    inst.lastVal = null;
                    $.datepicker._lastInput = input;
                    $.datepicker._setDateFromField(inst);
                    if ($.datepicker._inDialog) {
                        // hide cursor
                        input.value = "";
                    }
                    if (!$.datepicker._pos) {
                        // position below input
                        $.datepicker._pos = $.datepicker._findPos(input);
                        $.datepicker._pos[1] += input.offsetHeight;
                    }
                    isFixed = false;
                    $(input).parents().each(function() {
                        isFixed |= $(this).css("position") === "fixed";
                        return !isFixed;
                    });
                    offset = {
                        left: $.datepicker._pos[0],
                        top: $.datepicker._pos[1]
                    };
                    $.datepicker._pos = null;
                    //to avoid flashes on Firefox
                    inst.dpDiv.empty();
                    // determine sizing offscreen
                    inst.dpDiv.css({
                        position: "absolute",
                        display: "block",
                        top: "-1000px"
                    });
                    $.datepicker._updateDatepicker(inst);
                    // fix width for dynamic number of date pickers
                    // and adjust position before showing
                    offset = $.datepicker._checkOffset(inst, offset, isFixed);
                    inst.dpDiv.css({
                        position: $.datepicker._inDialog && $.blockUI ? "static" : isFixed ? "fixed" : "absolute",
                        display: "none",
                        left: offset.left + "px",
                        top: offset.top + "px"
                    });
                    if (!inst.inline) {
                        showAnim = $.datepicker._get(inst, "showAnim");
                        duration = $.datepicker._get(inst, "duration");
                        inst.dpDiv.zIndex($(input).zIndex() + 1);
                        $.datepicker._datepickerShowing = true;
                        if ($.effects && $.effects.effect[showAnim]) {
                            inst.dpDiv.show(showAnim, $.datepicker._get(inst, "showOptions"), duration);
                        } else {
                            inst.dpDiv[showAnim || "show"](showAnim ? duration : null);
                        }
                        if (inst.input.is(":visible") && !inst.input.is(":disabled")) {
                            inst.input.focus();
                        }
                        $.datepicker._curInst = inst;
                    }
                },
                /* Generate the date picker content. */
                _updateDatepicker: function(inst) {
                    this.maxRows = 4;
                    //Reset the max number of rows being displayed (see #7043)
                    instActive = inst;
                    // for delegate hover events
                    inst.dpDiv.empty().append(this._generateHTML(inst));
                    this._attachHandlers(inst);
                    inst.dpDiv.find("." + this._dayOverClass + " a").mouseover();
                    var origyearshtml, numMonths = this._getNumberOfMonths(inst), cols = numMonths[1], width = 17;
                    inst.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
                    if (cols > 1) {
                        inst.dpDiv.addClass("ui-datepicker-multi-" + cols).css("width", width * cols + "em");
                    }
                    inst.dpDiv[(numMonths[0] !== 1 || numMonths[1] !== 1 ? "add" : "remove") + "Class"]("ui-datepicker-multi");
                    inst.dpDiv[(this._get(inst, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
                    // #6694 - don't focus the input if it's already focused
                    // this breaks the change event in IE
                    if (inst === $.datepicker._curInst && $.datepicker._datepickerShowing && inst.input && inst.input.is(":visible") && !inst.input.is(":disabled") && inst.input[0] !== document.activeElement) {
                        inst.input.focus();
                    }
                    // deffered render of the years select (to avoid flashes on Firefox)
                    if (inst.yearshtml) {
                        origyearshtml = inst.yearshtml;
                        setTimeout(function() {
                            //assure that inst.yearshtml didn't change.
                            if (origyearshtml === inst.yearshtml && inst.yearshtml) {
                                inst.dpDiv.find("select.ui-datepicker-year:first").replaceWith(inst.yearshtml);
                            }
                            origyearshtml = inst.yearshtml = null;
                        }, 0);
                    }
                },
                /* Retrieve the size of left and top borders for an element.
	 * @param  elem  (jQuery object) the element of interest
	 * @return  (number[2]) the left and top borders
	 */
                _getBorders: function(elem) {
                    var convert = function(value) {
                        return {
                            thin: 1,
                            medium: 2,
                            thick: 3
                        }[value] || value;
                    };
                    return [ parseFloat(convert(elem.css("border-left-width"))), parseFloat(convert(elem.css("border-top-width"))) ];
                },
                /* Check positioning to remain on screen. */
                _checkOffset: function(inst, offset, isFixed) {
                    var dpWidth = inst.dpDiv.outerWidth(), dpHeight = inst.dpDiv.outerHeight(), inputWidth = inst.input ? inst.input.outerWidth() : 0, inputHeight = inst.input ? inst.input.outerHeight() : 0, viewWidth = document.documentElement.clientWidth + (isFixed ? 0 : $(document).scrollLeft()), viewHeight = document.documentElement.clientHeight + (isFixed ? 0 : $(document).scrollTop());
                    offset.left -= this._get(inst, "isRTL") ? dpWidth - inputWidth : 0;
                    offset.left -= isFixed && offset.left === inst.input.offset().left ? $(document).scrollLeft() : 0;
                    offset.top -= isFixed && offset.top === inst.input.offset().top + inputHeight ? $(document).scrollTop() : 0;
                    // now check if datepicker is showing outside window viewport - move to a better place if so.
                    offset.left -= Math.min(offset.left, offset.left + dpWidth > viewWidth && viewWidth > dpWidth ? Math.abs(offset.left + dpWidth - viewWidth) : 0);
                    offset.top -= Math.min(offset.top, offset.top + dpHeight > viewHeight && viewHeight > dpHeight ? Math.abs(dpHeight + inputHeight) : 0);
                    return offset;
                },
                /* Find an object's position on the screen. */
                _findPos: function(obj) {
                    var position, inst = this._getInst(obj), isRTL = this._get(inst, "isRTL");
                    while (obj && (obj.type === "hidden" || obj.nodeType !== 1 || $.expr.filters.hidden(obj))) {
                        obj = obj[isRTL ? "previousSibling" : "nextSibling"];
                    }
                    position = $(obj).offset();
                    return [ position.left, position.top ];
                },
                /* Hide the date picker from view.
	 * @param  input  element - the input field attached to the date picker
	 */
                _hideDatepicker: function(input) {
                    var showAnim, duration, postProcess, onClose, inst = this._curInst;
                    if (!inst || input && inst !== $.data(input, PROP_NAME)) {
                        return;
                    }
                    if (this._datepickerShowing) {
                        showAnim = this._get(inst, "showAnim");
                        duration = this._get(inst, "duration");
                        postProcess = function() {
                            $.datepicker._tidyDialog(inst);
                        };
                        // DEPRECATED: after BC for 1.8.x $.effects[ showAnim ] is not needed
                        if ($.effects && ($.effects.effect[showAnim] || $.effects[showAnim])) {
                            inst.dpDiv.hide(showAnim, $.datepicker._get(inst, "showOptions"), duration, postProcess);
                        } else {
                            inst.dpDiv[showAnim === "slideDown" ? "slideUp" : showAnim === "fadeIn" ? "fadeOut" : "hide"](showAnim ? duration : null, postProcess);
                        }
                        if (!showAnim) {
                            postProcess();
                        }
                        this._datepickerShowing = false;
                        onClose = this._get(inst, "onClose");
                        if (onClose) {
                            onClose.apply(inst.input ? inst.input[0] : null, [ inst.input ? inst.input.val() : "", inst ]);
                        }
                        this._lastInput = null;
                        if (this._inDialog) {
                            this._dialogInput.css({
                                position: "absolute",
                                left: "0",
                                top: "-100px"
                            });
                            if ($.blockUI) {
                                $.unblockUI();
                                $("body").append(this.dpDiv);
                            }
                        }
                        this._inDialog = false;
                    }
                },
                /* Tidy up after a dialog display. */
                _tidyDialog: function(inst) {
                    inst.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar");
                },
                /* Close date picker if clicked elsewhere. */
                _checkExternalClick: function(event) {
                    if (!$.datepicker._curInst) {
                        return;
                    }
                    var $target = $(event.target), inst = $.datepicker._getInst($target[0]);
                    if ($target[0].id !== $.datepicker._mainDivId && $target.parents("#" + $.datepicker._mainDivId).length === 0 && !$target.hasClass($.datepicker.markerClassName) && !$target.closest("." + $.datepicker._triggerClass).length && $.datepicker._datepickerShowing && !($.datepicker._inDialog && $.blockUI) || $target.hasClass($.datepicker.markerClassName) && $.datepicker._curInst !== inst) {
                        $.datepicker._hideDatepicker();
                    }
                },
                /* Adjust one of the date sub-fields. */
                _adjustDate: function(id, offset, period) {
                    var target = $(id), inst = this._getInst(target[0]);
                    if (this._isDisabledDatepicker(target[0])) {
                        return;
                    }
                    this._adjustInstDate(inst, offset + (period === "M" ? this._get(inst, "showCurrentAtPos") : 0), // undo positioning
                    period);
                    this._updateDatepicker(inst);
                },
                /* Action for current link. */
                _gotoToday: function(id) {
                    var date, target = $(id), inst = this._getInst(target[0]);
                    if (this._get(inst, "gotoCurrent") && inst.currentDay) {
                        inst.selectedDay = inst.currentDay;
                        inst.drawMonth = inst.selectedMonth = inst.currentMonth;
                        inst.drawYear = inst.selectedYear = inst.currentYear;
                    } else {
                        date = new Date();
                        inst.selectedDay = date.getDate();
                        inst.drawMonth = inst.selectedMonth = date.getMonth();
                        inst.drawYear = inst.selectedYear = date.getFullYear();
                    }
                    this._notifyChange(inst);
                    this._adjustDate(target);
                },
                /* Action for selecting a new month/year. */
                _selectMonthYear: function(id, select, period) {
                    var target = $(id), inst = this._getInst(target[0]);
                    inst["selected" + (period === "M" ? "Month" : "Year")] = inst["draw" + (period === "M" ? "Month" : "Year")] = parseInt(select.options[select.selectedIndex].value, 10);
                    this._notifyChange(inst);
                    this._adjustDate(target);
                },
                /* Action for selecting a day. */
                _selectDay: function(id, month, year, td) {
                    var inst, target = $(id);
                    if ($(td).hasClass(this._unselectableClass) || this._isDisabledDatepicker(target[0])) {
                        return;
                    }
                    inst = this._getInst(target[0]);
                    inst.selectedDay = inst.currentDay = $("a", td).html();
                    inst.selectedMonth = inst.currentMonth = month;
                    inst.selectedYear = inst.currentYear = year;
                    this._selectDate(id, this._formatDate(inst, inst.currentDay, inst.currentMonth, inst.currentYear));
                },
                /* Erase the input field and hide the date picker. */
                _clearDate: function(id) {
                    var target = $(id);
                    this._selectDate(target, "");
                },
                /* Update the input field with the selected date. */
                _selectDate: function(id, dateStr) {
                    var onSelect, target = $(id), inst = this._getInst(target[0]);
                    dateStr = dateStr != null ? dateStr : this._formatDate(inst);
                    if (inst.input) {
                        inst.input.val(dateStr);
                    }
                    this._updateAlternate(inst);
                    onSelect = this._get(inst, "onSelect");
                    if (onSelect) {
                        onSelect.apply(inst.input ? inst.input[0] : null, [ dateStr, inst ]);
                    } else if (inst.input) {
                        inst.input.trigger("change");
                    }
                    if (inst.inline) {
                        this._updateDatepicker(inst);
                    } else {
                        this._hideDatepicker();
                        this._lastInput = inst.input[0];
                        if (typeof inst.input[0] !== "object") {
                            inst.input.focus();
                        }
                        this._lastInput = null;
                    }
                },
                /* Update any alternate field to synchronise with the main field. */
                _updateAlternate: function(inst) {
                    var altFormat, date, dateStr, altField = this._get(inst, "altField");
                    if (altField) {
                        // update alternate field too
                        altFormat = this._get(inst, "altFormat") || this._get(inst, "dateFormat");
                        date = this._getDate(inst);
                        dateStr = this.formatDate(altFormat, date, this._getFormatConfig(inst));
                        $(altField).each(function() {
                            $(this).val(dateStr);
                        });
                    }
                },
                /* Set as beforeShowDay function to prevent selection of weekends.
	 * @param  date  Date - the date to customise
	 * @return [boolean, string] - is this date selectable?, what is its CSS class?
	 */
                noWeekends: function(date) {
                    var day = date.getDay();
                    return [ day > 0 && day < 6, "" ];
                },
                /* Set as calculateWeek to determine the week of the year based on the ISO 8601 definition.
	 * @param  date  Date - the date to get the week for
	 * @return  number - the number of the week within the year that contains this date
	 */
                iso8601Week: function(date) {
                    var time, checkDate = new Date(date.getTime());
                    // Find Thursday of this week starting on Monday
                    checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
                    time = checkDate.getTime();
                    checkDate.setMonth(0);
                    // Compare with Jan 1
                    checkDate.setDate(1);
                    return Math.floor(Math.round((time - checkDate) / 864e5) / 7) + 1;
                },
                /* Parse a string value into a date object.
	 * See formatDate below for the possible formats.
	 *
	 * @param  format string - the expected format of the date
	 * @param  value string - the date in the above format
	 * @param  settings Object - attributes include:
	 *					shortYearCutoff  number - the cutoff year for determining the century (optional)
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  Date - the extracted date value or null if value is blank
	 */
                parseDate: function(format, value, settings) {
                    if (format == null || value == null) {
                        throw "Invalid arguments";
                    }
                    value = typeof value === "object" ? value.toString() : value + "";
                    if (value === "") {
                        return null;
                    }
                    var iFormat, dim, extra, iValue = 0, shortYearCutoffTemp = (settings ? settings.shortYearCutoff : null) || this._defaults.shortYearCutoff, shortYearCutoff = typeof shortYearCutoffTemp !== "string" ? shortYearCutoffTemp : new Date().getFullYear() % 100 + parseInt(shortYearCutoffTemp, 10), dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, year = -1, month = -1, day = -1, doy = -1, literal = false, date, // Check whether a format character is doubled
                    lookAhead = function(match) {
                        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                        if (matches) {
                            iFormat++;
                        }
                        return matches;
                    }, // Extract a number from the string value
                    getNumber = function(match) {
                        var isDoubled = lookAhead(match), size = match === "@" ? 14 : match === "!" ? 20 : match === "y" && isDoubled ? 4 : match === "o" ? 3 : 2, digits = new RegExp("^\\d{1," + size + "}"), num = value.substring(iValue).match(digits);
                        if (!num) {
                            throw "Missing number at position " + iValue;
                        }
                        iValue += num[0].length;
                        return parseInt(num[0], 10);
                    }, // Extract a name from the string value and convert to an index
                    getName = function(match, shortNames, longNames) {
                        var index = -1, names = $.map(lookAhead(match) ? longNames : shortNames, function(v, k) {
                            return [ [ k, v ] ];
                        }).sort(function(a, b) {
                            return -(a[1].length - b[1].length);
                        });
                        $.each(names, function(i, pair) {
                            var name = pair[1];
                            if (value.substr(iValue, name.length).toLowerCase() === name.toLowerCase()) {
                                index = pair[0];
                                iValue += name.length;
                                return false;
                            }
                        });
                        if (index !== -1) {
                            return index + 1;
                        } else {
                            throw "Unknown name at position " + iValue;
                        }
                    }, // Confirm that a literal character matches the string value
                    checkLiteral = function() {
                        if (value.charAt(iValue) !== format.charAt(iFormat)) {
                            throw "Unexpected literal at position " + iValue;
                        }
                        iValue++;
                    };
                    for (iFormat = 0; iFormat < format.length; iFormat++) {
                        if (literal) {
                            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                                literal = false;
                            } else {
                                checkLiteral();
                            }
                        } else {
                            switch (format.charAt(iFormat)) {
                              case "d":
                                day = getNumber("d");
                                break;

                              case "D":
                                getName("D", dayNamesShort, dayNames);
                                break;

                              case "o":
                                doy = getNumber("o");
                                break;

                              case "m":
                                month = getNumber("m");
                                break;

                              case "M":
                                month = getName("M", monthNamesShort, monthNames);
                                break;

                              case "y":
                                year = getNumber("y");
                                break;

                              case "@":
                                date = new Date(getNumber("@"));
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;

                              case "!":
                                date = new Date((getNumber("!") - this._ticksTo1970) / 1e4);
                                year = date.getFullYear();
                                month = date.getMonth() + 1;
                                day = date.getDate();
                                break;

                              case "'":
                                if (lookAhead("'")) {
                                    checkLiteral();
                                } else {
                                    literal = true;
                                }
                                break;

                              default:
                                checkLiteral();
                            }
                        }
                    }
                    if (iValue < value.length) {
                        extra = value.substr(iValue);
                        if (!/^\s+/.test(extra)) {
                            throw "Extra/unparsed characters found in date: " + extra;
                        }
                    }
                    if (year === -1) {
                        year = new Date().getFullYear();
                    } else if (year < 100) {
                        year += new Date().getFullYear() - new Date().getFullYear() % 100 + (year <= shortYearCutoff ? 0 : -100);
                    }
                    if (doy > -1) {
                        month = 1;
                        day = doy;
                        do {
                            dim = this._getDaysInMonth(year, month - 1);
                            if (day <= dim) {
                                break;
                            }
                            month++;
                            day -= dim;
                        } while (true);
                    }
                    date = this._daylightSavingAdjust(new Date(year, month - 1, day));
                    if (date.getFullYear() !== year || date.getMonth() + 1 !== month || date.getDate() !== day) {
                        throw "Invalid date";
                    }
                    return date;
                },
                /* Standard date formats. */
                ATOM: "yy-mm-dd",
                // RFC 3339 (ISO 8601)
                COOKIE: "D, dd M yy",
                ISO_8601: "yy-mm-dd",
                RFC_822: "D, d M y",
                RFC_850: "DD, dd-M-y",
                RFC_1036: "D, d M y",
                RFC_1123: "D, d M yy",
                RFC_2822: "D, d M yy",
                RSS: "D, d M y",
                // RFC 822
                TICKS: "!",
                TIMESTAMP: "@",
                W3C: "yy-mm-dd",
                // ISO 8601
                _ticksTo1970: ((1970 - 1) * 365 + Math.floor(1970 / 4) - Math.floor(1970 / 100) + Math.floor(1970 / 400)) * 24 * 60 * 60 * 1e7,
                /* Format a date object into a string value.
	 * The format can be combinations of the following:
	 * d  - day of month (no leading zero)
	 * dd - day of month (two digit)
	 * o  - day of year (no leading zeros)
	 * oo - day of year (three digit)
	 * D  - day name short
	 * DD - day name long
	 * m  - month of year (no leading zero)
	 * mm - month of year (two digit)
	 * M  - month name short
	 * MM - month name long
	 * y  - year (two digit)
	 * yy - year (four digit)
	 * @ - Unix timestamp (ms since 01/01/1970)
	 * ! - Windows ticks (100ns since 01/01/0001)
	 * "..." - literal text
	 * '' - single quote
	 *
	 * @param  format string - the desired format of the date
	 * @param  date Date - the date value to format
	 * @param  settings Object - attributes include:
	 *					dayNamesShort	string[7] - abbreviated names of the days from Sunday (optional)
	 *					dayNames		string[7] - names of the days from Sunday (optional)
	 *					monthNamesShort string[12] - abbreviated names of the months (optional)
	 *					monthNames		string[12] - names of the months (optional)
	 * @return  string - the date in the above format
	 */
                formatDate: function(format, date, settings) {
                    if (!date) {
                        return "";
                    }
                    var iFormat, dayNamesShort = (settings ? settings.dayNamesShort : null) || this._defaults.dayNamesShort, dayNames = (settings ? settings.dayNames : null) || this._defaults.dayNames, monthNamesShort = (settings ? settings.monthNamesShort : null) || this._defaults.monthNamesShort, monthNames = (settings ? settings.monthNames : null) || this._defaults.monthNames, // Check whether a format character is doubled
                    lookAhead = function(match) {
                        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                        if (matches) {
                            iFormat++;
                        }
                        return matches;
                    }, // Format a number, with leading zero if necessary
                    formatNumber = function(match, value, len) {
                        var num = "" + value;
                        if (lookAhead(match)) {
                            while (num.length < len) {
                                num = "0" + num;
                            }
                        }
                        return num;
                    }, // Format a name, short or long as requested
                    formatName = function(match, value, shortNames, longNames) {
                        return lookAhead(match) ? longNames[value] : shortNames[value];
                    }, output = "", literal = false;
                    if (date) {
                        for (iFormat = 0; iFormat < format.length; iFormat++) {
                            if (literal) {
                                if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                                    literal = false;
                                } else {
                                    output += format.charAt(iFormat);
                                }
                            } else {
                                switch (format.charAt(iFormat)) {
                                  case "d":
                                    output += formatNumber("d", date.getDate(), 2);
                                    break;

                                  case "D":
                                    output += formatName("D", date.getDay(), dayNamesShort, dayNames);
                                    break;

                                  case "o":
                                    output += formatNumber("o", Math.round((new Date(date.getFullYear(), date.getMonth(), date.getDate()).getTime() - new Date(date.getFullYear(), 0, 0).getTime()) / 864e5), 3);
                                    break;

                                  case "m":
                                    output += formatNumber("m", date.getMonth() + 1, 2);
                                    break;

                                  case "M":
                                    output += formatName("M", date.getMonth(), monthNamesShort, monthNames);
                                    break;

                                  case "y":
                                    output += lookAhead("y") ? date.getFullYear() : (date.getYear() % 100 < 10 ? "0" : "") + date.getYear() % 100;
                                    break;

                                  case "@":
                                    output += date.getTime();
                                    break;

                                  case "!":
                                    output += date.getTime() * 1e4 + this._ticksTo1970;
                                    break;

                                  case "'":
                                    if (lookAhead("'")) {
                                        output += "'";
                                    } else {
                                        literal = true;
                                    }
                                    break;

                                  default:
                                    output += format.charAt(iFormat);
                                }
                            }
                        }
                    }
                    return output;
                },
                /* Extract all possible characters from the date format. */
                _possibleChars: function(format) {
                    var iFormat, chars = "", literal = false, // Check whether a format character is doubled
                    lookAhead = function(match) {
                        var matches = iFormat + 1 < format.length && format.charAt(iFormat + 1) === match;
                        if (matches) {
                            iFormat++;
                        }
                        return matches;
                    };
                    for (iFormat = 0; iFormat < format.length; iFormat++) {
                        if (literal) {
                            if (format.charAt(iFormat) === "'" && !lookAhead("'")) {
                                literal = false;
                            } else {
                                chars += format.charAt(iFormat);
                            }
                        } else {
                            switch (format.charAt(iFormat)) {
                              case "d":
                              case "m":
                              case "y":
                              case "@":
                                chars += "0123456789";
                                break;

                              case "D":
                              case "M":
                                return null;

                              // Accept anything
                                case "'":
                                if (lookAhead("'")) {
                                    chars += "'";
                                } else {
                                    literal = true;
                                }
                                break;

                              default:
                                chars += format.charAt(iFormat);
                            }
                        }
                    }
                    return chars;
                },
                /* Get a setting value, defaulting if necessary. */
                _get: function(inst, name) {
                    return inst.settings[name] !== undefined ? inst.settings[name] : this._defaults[name];
                },
                /* Parse existing date and initialise date picker. */
                _setDateFromField: function(inst, noDefault) {
                    if (inst.input.val() === inst.lastVal) {
                        return;
                    }
                    var dateFormat = this._get(inst, "dateFormat"), dates = inst.lastVal = inst.input ? inst.input.val() : null, defaultDate = this._getDefaultDate(inst), date = defaultDate, settings = this._getFormatConfig(inst);
                    try {
                        date = this.parseDate(dateFormat, dates, settings) || defaultDate;
                    } catch (event) {
                        dates = noDefault ? "" : dates;
                    }
                    inst.selectedDay = date.getDate();
                    inst.drawMonth = inst.selectedMonth = date.getMonth();
                    inst.drawYear = inst.selectedYear = date.getFullYear();
                    inst.currentDay = dates ? date.getDate() : 0;
                    inst.currentMonth = dates ? date.getMonth() : 0;
                    inst.currentYear = dates ? date.getFullYear() : 0;
                    this._adjustInstDate(inst);
                },
                /* Retrieve the default date shown on opening. */
                _getDefaultDate: function(inst) {
                    return this._restrictMinMax(inst, this._determineDate(inst, this._get(inst, "defaultDate"), new Date()));
                },
                /* A date may be specified as an exact value or a relative one. */
                _determineDate: function(inst, date, defaultDate) {
                    var offsetNumeric = function(offset) {
                        var date = new Date();
                        date.setDate(date.getDate() + offset);
                        return date;
                    }, offsetString = function(offset) {
                        try {
                            return $.datepicker.parseDate($.datepicker._get(inst, "dateFormat"), offset, $.datepicker._getFormatConfig(inst));
                        } catch (e) {}
                        var date = (offset.toLowerCase().match(/^c/) ? $.datepicker._getDate(inst) : null) || new Date(), year = date.getFullYear(), month = date.getMonth(), day = date.getDate(), pattern = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, matches = pattern.exec(offset);
                        while (matches) {
                            switch (matches[2] || "d") {
                              case "d":
                              case "D":
                                day += parseInt(matches[1], 10);
                                break;

                              case "w":
                              case "W":
                                day += parseInt(matches[1], 10) * 7;
                                break;

                              case "m":
                              case "M":
                                month += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;

                              case "y":
                              case "Y":
                                year += parseInt(matches[1], 10);
                                day = Math.min(day, $.datepicker._getDaysInMonth(year, month));
                                break;
                            }
                            matches = pattern.exec(offset);
                        }
                        return new Date(year, month, day);
                    }, newDate = date == null || date === "" ? defaultDate : typeof date === "string" ? offsetString(date) : typeof date === "number" ? isNaN(date) ? defaultDate : offsetNumeric(date) : new Date(date.getTime());
                    newDate = newDate && newDate.toString() === "Invalid Date" ? defaultDate : newDate;
                    if (newDate) {
                        newDate.setHours(0);
                        newDate.setMinutes(0);
                        newDate.setSeconds(0);
                        newDate.setMilliseconds(0);
                    }
                    return this._daylightSavingAdjust(newDate);
                },
                /* Handle switch to/from daylight saving.
	 * Hours may be non-zero on daylight saving cut-over:
	 * > 12 when midnight changeover, but then cannot generate
	 * midnight datetime, so jump to 1AM, otherwise reset.
	 * @param  date  (Date) the date to check
	 * @return  (Date) the corrected date
	 */
                _daylightSavingAdjust: function(date) {
                    if (!date) {
                        return null;
                    }
                    date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);
                    return date;
                },
                /* Set the date(s) directly. */
                _setDate: function(inst, date, noChange) {
                    var clear = !date, origMonth = inst.selectedMonth, origYear = inst.selectedYear, newDate = this._restrictMinMax(inst, this._determineDate(inst, date, new Date()));
                    inst.selectedDay = inst.currentDay = newDate.getDate();
                    inst.drawMonth = inst.selectedMonth = inst.currentMonth = newDate.getMonth();
                    inst.drawYear = inst.selectedYear = inst.currentYear = newDate.getFullYear();
                    if ((origMonth !== inst.selectedMonth || origYear !== inst.selectedYear) && !noChange) {
                        this._notifyChange(inst);
                    }
                    this._adjustInstDate(inst);
                    if (inst.input) {
                        inst.input.val(clear ? "" : this._formatDate(inst));
                    }
                },
                /* Retrieve the date(s) directly. */
                _getDate: function(inst) {
                    var startDate = !inst.currentYear || inst.input && inst.input.val() === "" ? null : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
                    return startDate;
                },
                /* Attach the onxxx handlers.  These are declared statically so
	 * they work with static code transformers like Caja.
	 */
                _attachHandlers: function(inst) {
                    var stepMonths = this._get(inst, "stepMonths"), id = "#" + inst.id.replace(/\\\\/g, "\\");
                    inst.dpDiv.find("[data-handler]").map(function() {
                        var handler = {
                            prev: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._adjustDate(id, -stepMonths, "M");
                            },
                            next: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._adjustDate(id, +stepMonths, "M");
                            },
                            hide: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._hideDatepicker();
                            },
                            today: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._gotoToday(id);
                            },
                            selectDay: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._selectDay(id, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                                return false;
                            },
                            selectMonth: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(id, this, "M");
                                return false;
                            },
                            selectYear: function() {
                                window["DP_jQuery_" + dpuuid].datepicker._selectMonthYear(id, this, "Y");
                                return false;
                            }
                        };
                        $(this).bind(this.getAttribute("data-event"), handler[this.getAttribute("data-handler")]);
                    });
                },
                /* Generate the HTML for the current state of the date picker. */
                _generateHTML: function(inst) {
                    var maxDraw, prevText, prev, nextText, next, currentText, gotoDate, controls, buttonPanel, firstDay, showWeek, dayNames, dayNamesMin, monthNames, monthNamesShort, beforeShowDay, showOtherMonths, selectOtherMonths, defaultDate, html, dow, row, group, col, selectedDate, cornerClass, calender, thead, day, daysInMonth, leadDays, curRows, numRows, printDate, dRow, tbody, daySettings, otherMonth, unselectable, tempDate = new Date(), today = this._daylightSavingAdjust(new Date(tempDate.getFullYear(), tempDate.getMonth(), tempDate.getDate())), // clear time
                    isRTL = this._get(inst, "isRTL"), showButtonPanel = this._get(inst, "showButtonPanel"), hideIfNoPrevNext = this._get(inst, "hideIfNoPrevNext"), navigationAsDateFormat = this._get(inst, "navigationAsDateFormat"), numMonths = this._getNumberOfMonths(inst), showCurrentAtPos = this._get(inst, "showCurrentAtPos"), stepMonths = this._get(inst, "stepMonths"), isMultiMonth = numMonths[0] !== 1 || numMonths[1] !== 1, currentDate = this._daylightSavingAdjust(!inst.currentDay ? new Date(9999, 9, 9) : new Date(inst.currentYear, inst.currentMonth, inst.currentDay)), minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), drawMonth = inst.drawMonth - showCurrentAtPos, drawYear = inst.drawYear;
                    if (drawMonth < 0) {
                        drawMonth += 12;
                        drawYear--;
                    }
                    if (maxDate) {
                        maxDraw = this._daylightSavingAdjust(new Date(maxDate.getFullYear(), maxDate.getMonth() - numMonths[0] * numMonths[1] + 1, maxDate.getDate()));
                        maxDraw = minDate && maxDraw < minDate ? minDate : maxDraw;
                        while (this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1)) > maxDraw) {
                            drawMonth--;
                            if (drawMonth < 0) {
                                drawMonth = 11;
                                drawYear--;
                            }
                        }
                    }
                    inst.drawMonth = drawMonth;
                    inst.drawYear = drawYear;
                    prevText = this._get(inst, "prevText");
                    prevText = !navigationAsDateFormat ? prevText : this.formatDate(prevText, this._daylightSavingAdjust(new Date(drawYear, drawMonth - stepMonths, 1)), this._getFormatConfig(inst));
                    prev = this._canAdjustMonth(inst, -1, drawYear, drawMonth) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click'" + " title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + prevText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "e" : "w") + "'>" + prevText + "</span></a>";
                    nextText = this._get(inst, "nextText");
                    nextText = !navigationAsDateFormat ? nextText : this.formatDate(nextText, this._daylightSavingAdjust(new Date(drawYear, drawMonth + stepMonths, 1)), this._getFormatConfig(inst));
                    next = this._canAdjustMonth(inst, +1, drawYear, drawMonth) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click'" + " title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>" : hideIfNoPrevNext ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + nextText + "'><span class='ui-icon ui-icon-circle-triangle-" + (isRTL ? "w" : "e") + "'>" + nextText + "</span></a>";
                    currentText = this._get(inst, "currentText");
                    gotoDate = this._get(inst, "gotoCurrent") && inst.currentDay ? currentDate : today;
                    currentText = !navigationAsDateFormat ? currentText : this.formatDate(currentText, gotoDate, this._getFormatConfig(inst));
                    controls = !inst.inline ? "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(inst, "closeText") + "</button>" : "";
                    buttonPanel = showButtonPanel ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (isRTL ? controls : "") + (this._isInRange(inst, gotoDate) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'" + ">" + currentText + "</button>" : "") + (isRTL ? "" : controls) + "</div>" : "";
                    firstDay = parseInt(this._get(inst, "firstDay"), 10);
                    firstDay = isNaN(firstDay) ? 0 : firstDay;
                    showWeek = this._get(inst, "showWeek");
                    dayNames = this._get(inst, "dayNames");
                    dayNamesMin = this._get(inst, "dayNamesMin");
                    monthNames = this._get(inst, "monthNames");
                    monthNamesShort = this._get(inst, "monthNamesShort");
                    beforeShowDay = this._get(inst, "beforeShowDay");
                    showOtherMonths = this._get(inst, "showOtherMonths");
                    selectOtherMonths = this._get(inst, "selectOtherMonths");
                    defaultDate = this._getDefaultDate(inst);
                    html = "";
                    dow;
                    for (row = 0; row < numMonths[0]; row++) {
                        group = "";
                        this.maxRows = 4;
                        for (col = 0; col < numMonths[1]; col++) {
                            selectedDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, inst.selectedDay));
                            cornerClass = " ui-corner-all";
                            calender = "";
                            if (isMultiMonth) {
                                calender += "<div class='ui-datepicker-group";
                                if (numMonths[1] > 1) {
                                    switch (col) {
                                      case 0:
                                        calender += " ui-datepicker-group-first";
                                        cornerClass = " ui-corner-" + (isRTL ? "right" : "left");
                                        break;

                                      case numMonths[1] - 1:
                                        calender += " ui-datepicker-group-last";
                                        cornerClass = " ui-corner-" + (isRTL ? "left" : "right");
                                        break;

                                      default:
                                        calender += " ui-datepicker-group-middle";
                                        cornerClass = "";
                                        break;
                                    }
                                }
                                calender += "'>";
                            }
                            calender += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + cornerClass + "'>" + (/all|left/.test(cornerClass) && row === 0 ? isRTL ? next : prev : "") + (/all|right/.test(cornerClass) && row === 0 ? isRTL ? prev : next : "") + this._generateMonthYearHeader(inst, drawMonth, drawYear, minDate, maxDate, row > 0 || col > 0, monthNames, monthNamesShort) + // draw month headers
                            "</div><table class='ui-datepicker-calendar'><thead>" + "<tr>";
                            thead = showWeek ? "<th class='ui-datepicker-week-col'>" + this._get(inst, "weekHeader") + "</th>" : "";
                            for (dow = 0; dow < 7; dow++) {
                                // days of the week
                                day = (dow + firstDay) % 7;
                                thead += "<th" + ((dow + firstDay + 6) % 7 >= 5 ? " class='ui-datepicker-week-end'" : "") + ">" + "<span title='" + dayNames[day] + "'>" + dayNamesMin[day] + "</span></th>";
                            }
                            calender += thead + "</tr></thead><tbody>";
                            daysInMonth = this._getDaysInMonth(drawYear, drawMonth);
                            if (drawYear === inst.selectedYear && drawMonth === inst.selectedMonth) {
                                inst.selectedDay = Math.min(inst.selectedDay, daysInMonth);
                            }
                            leadDays = (this._getFirstDayOfMonth(drawYear, drawMonth) - firstDay + 7) % 7;
                            curRows = Math.ceil((leadDays + daysInMonth) / 7);
                            // calculate the number of rows to generate
                            numRows = isMultiMonth ? this.maxRows > curRows ? this.maxRows : curRows : curRows;
                            //If multiple months, use the higher number of rows (see #7043)
                            this.maxRows = numRows;
                            printDate = this._daylightSavingAdjust(new Date(drawYear, drawMonth, 1 - leadDays));
                            for (dRow = 0; dRow < numRows; dRow++) {
                                // create date picker rows
                                calender += "<tr>";
                                tbody = !showWeek ? "" : "<td class='ui-datepicker-week-col'>" + this._get(inst, "calculateWeek")(printDate) + "</td>";
                                for (dow = 0; dow < 7; dow++) {
                                    // create date picker days
                                    daySettings = beforeShowDay ? beforeShowDay.apply(inst.input ? inst.input[0] : null, [ printDate ]) : [ true, "" ];
                                    otherMonth = printDate.getMonth() !== drawMonth;
                                    unselectable = otherMonth && !selectOtherMonths || !daySettings[0] || minDate && printDate < minDate || maxDate && printDate > maxDate;
                                    tbody += "<td class='" + ((dow + firstDay + 6) % 7 >= 5 ? " ui-datepicker-week-end" : "") + (// highlight weekends
                                    otherMonth ? " ui-datepicker-other-month" : "") + (// highlight days from other months
                                    printDate.getTime() === selectedDate.getTime() && drawMonth === inst.selectedMonth && inst._keyEvent || // user pressed key
                                    defaultDate.getTime() === printDate.getTime() && defaultDate.getTime() === selectedDate.getTime() ? // or defaultDate is current printedDate and defaultDate is selectedDate
                                    " " + this._dayOverClass : "") + (// highlight selected day
                                    unselectable ? " " + this._unselectableClass + " ui-state-disabled" : "") + (// highlight unselectable days
                                    otherMonth && !showOtherMonths ? "" : " " + daySettings[1] + (// highlight custom dates
                                    printDate.getTime() === currentDate.getTime() ? " " + this._currentClass : "") + (// highlight selected day
                                    printDate.getTime() === today.getTime() ? " ui-datepicker-today" : "")) + "'" + (// highlight today (if different)
                                    (!otherMonth || showOtherMonths) && daySettings[2] ? " title='" + daySettings[2].replace(/'/g, "&#39;") + "'" : "") + (// cell title
                                    unselectable ? "" : " data-handler='selectDay' data-event='click' data-month='" + printDate.getMonth() + "' data-year='" + printDate.getFullYear() + "'") + ">" + (// actions
                                    otherMonth && !showOtherMonths ? "&#xa0;" : // display for other months
                                    unselectable ? "<span class='ui-state-default'>" + printDate.getDate() + "</span>" : "<a class='ui-state-default" + (printDate.getTime() === today.getTime() ? " ui-state-highlight" : "") + (printDate.getTime() === currentDate.getTime() ? " ui-state-active" : "") + (// highlight selected day
                                    otherMonth ? " ui-priority-secondary" : "") + // distinguish dates from other months
                                    "' href='#'>" + printDate.getDate() + "</a>") + "</td>";
                                    // display selectable date
                                    printDate.setDate(printDate.getDate() + 1);
                                    printDate = this._daylightSavingAdjust(printDate);
                                }
                                calender += tbody + "</tr>";
                            }
                            drawMonth++;
                            if (drawMonth > 11) {
                                drawMonth = 0;
                                drawYear++;
                            }
                            calender += "</tbody></table>" + (isMultiMonth ? "</div>" + (numMonths[0] > 0 && col === numMonths[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                            group += calender;
                        }
                        html += group;
                    }
                    html += buttonPanel;
                    inst._keyEvent = false;
                    return html;
                },
                /* Generate the month and year header. */
                _generateMonthYearHeader: function(inst, drawMonth, drawYear, minDate, maxDate, secondary, monthNames, monthNamesShort) {
                    var inMinYear, inMaxYear, month, years, thisYear, determineYear, year, endYear, changeMonth = this._get(inst, "changeMonth"), changeYear = this._get(inst, "changeYear"), showMonthAfterYear = this._get(inst, "showMonthAfterYear"), html = "<div class='ui-datepicker-title'>", monthHtml = "";
                    // month selection
                    if (secondary || !changeMonth) {
                        monthHtml += "<span class='ui-datepicker-month'>" + monthNames[drawMonth] + "</span>";
                    } else {
                        inMinYear = minDate && minDate.getFullYear() === drawYear;
                        inMaxYear = maxDate && maxDate.getFullYear() === drawYear;
                        monthHtml += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                        for (month = 0; month < 12; month++) {
                            if ((!inMinYear || month >= minDate.getMonth()) && (!inMaxYear || month <= maxDate.getMonth())) {
                                monthHtml += "<option value='" + month + "'" + (month === drawMonth ? " selected='selected'" : "") + ">" + monthNamesShort[month] + "</option>";
                            }
                        }
                        monthHtml += "</select>";
                    }
                    if (!showMonthAfterYear) {
                        html += monthHtml + (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "");
                    }
                    // year selection
                    if (!inst.yearshtml) {
                        inst.yearshtml = "";
                        if (secondary || !changeYear) {
                            html += "<span class='ui-datepicker-year'>" + drawYear + "</span>";
                        } else {
                            // determine range of years to display
                            years = this._get(inst, "yearRange").split(":");
                            thisYear = new Date().getFullYear();
                            determineYear = function(value) {
                                var year = value.match(/c[+\-].*/) ? drawYear + parseInt(value.substring(1), 10) : value.match(/[+\-].*/) ? thisYear + parseInt(value, 10) : parseInt(value, 10);
                                return isNaN(year) ? thisYear : year;
                            };
                            year = determineYear(years[0]);
                            endYear = Math.max(year, determineYear(years[1] || ""));
                            year = minDate ? Math.max(year, minDate.getFullYear()) : year;
                            endYear = maxDate ? Math.min(endYear, maxDate.getFullYear()) : endYear;
                            inst.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>";
                            for (;year <= endYear; year++) {
                                inst.yearshtml += "<option value='" + year + "'" + (year === drawYear ? " selected='selected'" : "") + ">" + year + "</option>";
                            }
                            inst.yearshtml += "</select>";
                            html += inst.yearshtml;
                            inst.yearshtml = null;
                        }
                    }
                    html += this._get(inst, "yearSuffix");
                    if (showMonthAfterYear) {
                        html += (secondary || !(changeMonth && changeYear) ? "&#xa0;" : "") + monthHtml;
                    }
                    html += "</div>";
                    // Close datepicker_header
                    return html;
                },
                /* Adjust one of the date sub-fields. */
                _adjustInstDate: function(inst, offset, period) {
                    var year = inst.drawYear + (period === "Y" ? offset : 0), month = inst.drawMonth + (period === "M" ? offset : 0), day = Math.min(inst.selectedDay, this._getDaysInMonth(year, month)) + (period === "D" ? offset : 0), date = this._restrictMinMax(inst, this._daylightSavingAdjust(new Date(year, month, day)));
                    inst.selectedDay = date.getDate();
                    inst.drawMonth = inst.selectedMonth = date.getMonth();
                    inst.drawYear = inst.selectedYear = date.getFullYear();
                    if (period === "M" || period === "Y") {
                        this._notifyChange(inst);
                    }
                },
                /* Ensure a date is within any min/max bounds. */
                _restrictMinMax: function(inst, date) {
                    var minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), newDate = minDate && date < minDate ? minDate : date;
                    return maxDate && newDate > maxDate ? maxDate : newDate;
                },
                /* Notify change of month/year. */
                _notifyChange: function(inst) {
                    var onChange = this._get(inst, "onChangeMonthYear");
                    if (onChange) {
                        onChange.apply(inst.input ? inst.input[0] : null, [ inst.selectedYear, inst.selectedMonth + 1, inst ]);
                    }
                },
                /* Determine the number of months to show. */
                _getNumberOfMonths: function(inst) {
                    var numMonths = this._get(inst, "numberOfMonths");
                    return numMonths == null ? [ 1, 1 ] : typeof numMonths === "number" ? [ 1, numMonths ] : numMonths;
                },
                /* Determine the current maximum date - ensure no time components are set. */
                _getMinMaxDate: function(inst, minMax) {
                    return this._determineDate(inst, this._get(inst, minMax + "Date"), null);
                },
                /* Find the number of days in a given month. */
                _getDaysInMonth: function(year, month) {
                    return 32 - this._daylightSavingAdjust(new Date(year, month, 32)).getDate();
                },
                /* Find the day of the week of the first of a month. */
                _getFirstDayOfMonth: function(year, month) {
                    return new Date(year, month, 1).getDay();
                },
                /* Determines if we should allow a "next/prev" month display change. */
                _canAdjustMonth: function(inst, offset, curYear, curMonth) {
                    var numMonths = this._getNumberOfMonths(inst), date = this._daylightSavingAdjust(new Date(curYear, curMonth + (offset < 0 ? offset : numMonths[0] * numMonths[1]), 1));
                    if (offset < 0) {
                        date.setDate(this._getDaysInMonth(date.getFullYear(), date.getMonth()));
                    }
                    return this._isInRange(inst, date);
                },
                /* Is the given date in the accepted range? */
                _isInRange: function(inst, date) {
                    var yearSplit, currentYear, minDate = this._getMinMaxDate(inst, "min"), maxDate = this._getMinMaxDate(inst, "max"), minYear = null, maxYear = null, years = this._get(inst, "yearRange");
                    if (years) {
                        yearSplit = years.split(":");
                        currentYear = new Date().getFullYear();
                        minYear = parseInt(yearSplit[0], 10);
                        maxYear = parseInt(yearSplit[1], 10);
                        if (yearSplit[0].match(/[+\-].*/)) {
                            minYear += currentYear;
                        }
                        if (yearSplit[1].match(/[+\-].*/)) {
                            maxYear += currentYear;
                        }
                    }
                    return (!minDate || date.getTime() >= minDate.getTime()) && (!maxDate || date.getTime() <= maxDate.getTime()) && (!minYear || date.getFullYear() >= minYear) && (!maxYear || date.getFullYear() <= maxYear);
                },
                /* Provide the configuration settings for formatting/parsing. */
                _getFormatConfig: function(inst) {
                    var shortYearCutoff = this._get(inst, "shortYearCutoff");
                    shortYearCutoff = typeof shortYearCutoff !== "string" ? shortYearCutoff : new Date().getFullYear() % 100 + parseInt(shortYearCutoff, 10);
                    return {
                        shortYearCutoff: shortYearCutoff,
                        dayNamesShort: this._get(inst, "dayNamesShort"),
                        dayNames: this._get(inst, "dayNames"),
                        monthNamesShort: this._get(inst, "monthNamesShort"),
                        monthNames: this._get(inst, "monthNames")
                    };
                },
                /* Format the given date for display. */
                _formatDate: function(inst, day, month, year) {
                    if (!day) {
                        inst.currentDay = inst.selectedDay;
                        inst.currentMonth = inst.selectedMonth;
                        inst.currentYear = inst.selectedYear;
                    }
                    var date = day ? typeof day === "object" ? day : this._daylightSavingAdjust(new Date(year, month, day)) : this._daylightSavingAdjust(new Date(inst.currentYear, inst.currentMonth, inst.currentDay));
                    return this.formatDate(this._get(inst, "dateFormat"), date, this._getFormatConfig(inst));
                }
            });
            /*
 * Bind hover events for datepicker elements.
 * Done via delegate so the binding only occurs once in the lifetime of the parent div.
 * Global instActive, set by _updateDatepicker allows the handlers to find their way back to the active picker.
 */
            function bindHover(dpDiv) {
                var selector = "button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a";
                return dpDiv.delegate(selector, "mouseout", function() {
                    $(this).removeClass("ui-state-hover");
                    if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                        $(this).removeClass("ui-datepicker-prev-hover");
                    }
                    if (this.className.indexOf("ui-datepicker-next") !== -1) {
                        $(this).removeClass("ui-datepicker-next-hover");
                    }
                }).delegate(selector, "mouseover", function() {
                    if (!$.datepicker._isDisabledDatepicker(instActive.inline ? dpDiv.parent()[0] : instActive.input[0])) {
                        $(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover");
                        $(this).addClass("ui-state-hover");
                        if (this.className.indexOf("ui-datepicker-prev") !== -1) {
                            $(this).addClass("ui-datepicker-prev-hover");
                        }
                        if (this.className.indexOf("ui-datepicker-next") !== -1) {
                            $(this).addClass("ui-datepicker-next-hover");
                        }
                    }
                });
            }
            /* jQuery extend now ignores nulls! */
            function extendRemove(target, props) {
                $.extend(target, props);
                for (var name in props) {
                    if (props[name] == null) {
                        target[name] = props[name];
                    }
                }
                return target;
            }
            /* Invoke the datepicker functionality.
   @param  options  string - a command, optionally followed by additional parameters or
					Object - settings for attaching new datepicker functionality
   @return  jQuery object */
            $.fn.datepicker = function(options) {
                /* Verify an empty collection wasn't passed - Fixes #6976 */
                if (!this.length) {
                    return this;
                }
                /* Initialise the date picker. */
                if (!$.datepicker.initialized) {
                    $(document).mousedown($.datepicker._checkExternalClick);
                    $.datepicker.initialized = true;
                }
                /* Append datepicker main container to body if not exist. */
                if ($("#" + $.datepicker._mainDivId).length === 0) {
                    $("body").append($.datepicker.dpDiv);
                }
                var otherArgs = Array.prototype.slice.call(arguments, 1);
                if (typeof options === "string" && (options === "isDisabled" || options === "getDate" || options === "widget")) {
                    return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
                }
                if (options === "option" && arguments.length === 2 && typeof arguments[1] === "string") {
                    return $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this[0] ].concat(otherArgs));
                }
                return this.each(function() {
                    typeof options === "string" ? $.datepicker["_" + options + "Datepicker"].apply($.datepicker, [ this ].concat(otherArgs)) : $.datepicker._attachDatepicker(this, options);
                });
            };
            $.datepicker = new Datepicker();
            // singleton instance
            $.datepicker.initialized = false;
            $.datepicker.uuid = new Date().getTime();
            $.datepicker.version = "1.10.2";
            // Workaround for #4055
            // Add another global to avoid noConflict issues with inline event handlers
            window["DP_jQuery_" + dpuuid] = $;
        })(jQuery);
        (function($, undefined) {
            var sizeRelatedOptions = {
                buttons: true,
                height: true,
                maxHeight: true,
                maxWidth: true,
                minHeight: true,
                minWidth: true,
                width: true
            }, resizableRelatedOptions = {
                maxHeight: true,
                maxWidth: true,
                minHeight: true,
                minWidth: true
            };
            $.widget("ui.dialog", {
                version: "1.10.2",
                options: {
                    appendTo: "body",
                    autoOpen: true,
                    buttons: [],
                    closeOnEscape: true,
                    closeText: "close",
                    dialogClass: "",
                    draggable: true,
                    hide: null,
                    height: "auto",
                    maxHeight: null,
                    maxWidth: null,
                    minHeight: 150,
                    minWidth: 150,
                    modal: false,
                    position: {
                        my: "center",
                        at: "center",
                        of: window,
                        collision: "fit",
                        // Ensure the titlebar is always visible
                        using: function(pos) {
                            var topOffset = $(this).css(pos).offset().top;
                            if (topOffset < 0) {
                                $(this).css("top", pos.top - topOffset);
                            }
                        }
                    },
                    resizable: true,
                    show: null,
                    title: null,
                    width: 300,
                    // callbacks
                    beforeClose: null,
                    close: null,
                    drag: null,
                    dragStart: null,
                    dragStop: null,
                    focus: null,
                    open: null,
                    resize: null,
                    resizeStart: null,
                    resizeStop: null
                },
                _create: function() {
                    this.originalCss = {
                        display: this.element[0].style.display,
                        width: this.element[0].style.width,
                        minHeight: this.element[0].style.minHeight,
                        maxHeight: this.element[0].style.maxHeight,
                        height: this.element[0].style.height
                    };
                    this.originalPosition = {
                        parent: this.element.parent(),
                        index: this.element.parent().children().index(this.element)
                    };
                    this.originalTitle = this.element.attr("title");
                    this.options.title = this.options.title || this.originalTitle;
                    this._createWrapper();
                    this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
                    this._createTitlebar();
                    this._createButtonPane();
                    if (this.options.draggable && $.fn.draggable) {
                        this._makeDraggable();
                    }
                    if (this.options.resizable && $.fn.resizable) {
                        this._makeResizable();
                    }
                    this._isOpen = false;
                },
                _init: function() {
                    if (this.options.autoOpen) {
                        this.open();
                    }
                },
                _appendTo: function() {
                    var element = this.options.appendTo;
                    if (element && (element.jquery || element.nodeType)) {
                        return $(element);
                    }
                    return this.document.find(element || "body").eq(0);
                },
                _destroy: function() {
                    var next, originalPosition = this.originalPosition;
                    this._destroyOverlay();
                    this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
                    this.uiDialog.stop(true, true).remove();
                    if (this.originalTitle) {
                        this.element.attr("title", this.originalTitle);
                    }
                    next = originalPosition.parent.children().eq(originalPosition.index);
                    // Don't try to place the dialog next to itself (#8613)
                    if (next.length && next[0] !== this.element[0]) {
                        next.before(this.element);
                    } else {
                        originalPosition.parent.append(this.element);
                    }
                },
                widget: function() {
                    return this.uiDialog;
                },
                disable: $.noop,
                enable: $.noop,
                close: function(event) {
                    var that = this;
                    if (!this._isOpen || this._trigger("beforeClose", event) === false) {
                        return;
                    }
                    this._isOpen = false;
                    this._destroyOverlay();
                    if (!this.opener.filter(":focusable").focus().length) {
                        // Hiding a focused element doesn't trigger blur in WebKit
                        // so in case we have nothing to focus on, explicitly blur the active element
                        // https://bugs.webkit.org/show_bug.cgi?id=47182
                        $(this.document[0].activeElement).blur();
                    }
                    this._hide(this.uiDialog, this.options.hide, function() {
                        that._trigger("close", event);
                    });
                },
                isOpen: function() {
                    return this._isOpen;
                },
                moveToTop: function() {
                    this._moveToTop();
                },
                _moveToTop: function(event, silent) {
                    var moved = !!this.uiDialog.nextAll(":visible").insertBefore(this.uiDialog).length;
                    if (moved && !silent) {
                        this._trigger("focus", event);
                    }
                    return moved;
                },
                open: function() {
                    var that = this;
                    if (this._isOpen) {
                        if (this._moveToTop()) {
                            this._focusTabbable();
                        }
                        return;
                    }
                    this._isOpen = true;
                    this.opener = $(this.document[0].activeElement);
                    this._size();
                    this._position();
                    this._createOverlay();
                    this._moveToTop(null, true);
                    this._show(this.uiDialog, this.options.show, function() {
                        that._focusTabbable();
                        that._trigger("focus");
                    });
                    this._trigger("open");
                },
                _focusTabbable: function() {
                    // Set focus to the first match:
                    // 1. First element inside the dialog matching [autofocus]
                    // 2. Tabbable element inside the content element
                    // 3. Tabbable element inside the buttonpane
                    // 4. The close button
                    // 5. The dialog itself
                    var hasFocus = this.element.find("[autofocus]");
                    if (!hasFocus.length) {
                        hasFocus = this.element.find(":tabbable");
                    }
                    if (!hasFocus.length) {
                        hasFocus = this.uiDialogButtonPane.find(":tabbable");
                    }
                    if (!hasFocus.length) {
                        hasFocus = this.uiDialogTitlebarClose.filter(":tabbable");
                    }
                    if (!hasFocus.length) {
                        hasFocus = this.uiDialog;
                    }
                    hasFocus.eq(0).focus();
                },
                _keepFocus: function(event) {
                    function checkFocus() {
                        var activeElement = this.document[0].activeElement, isActive = this.uiDialog[0] === activeElement || $.contains(this.uiDialog[0], activeElement);
                        if (!isActive) {
                            this._focusTabbable();
                        }
                    }
                    event.preventDefault();
                    checkFocus.call(this);
                    // support: IE
                    // IE <= 8 doesn't prevent moving focus even with event.preventDefault()
                    // so we check again later
                    this._delay(checkFocus);
                },
                _createWrapper: function() {
                    this.uiDialog = $("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                        // Setting tabIndex makes the div focusable
                        tabIndex: -1,
                        role: "dialog"
                    }).appendTo(this._appendTo());
                    this._on(this.uiDialog, {
                        keydown: function(event) {
                            if (this.options.closeOnEscape && !event.isDefaultPrevented() && event.keyCode && event.keyCode === $.ui.keyCode.ESCAPE) {
                                event.preventDefault();
                                this.close(event);
                                return;
                            }
                            // prevent tabbing out of dialogs
                            if (event.keyCode !== $.ui.keyCode.TAB) {
                                return;
                            }
                            var tabbables = this.uiDialog.find(":tabbable"), first = tabbables.filter(":first"), last = tabbables.filter(":last");
                            if ((event.target === last[0] || event.target === this.uiDialog[0]) && !event.shiftKey) {
                                first.focus(1);
                                event.preventDefault();
                            } else if ((event.target === first[0] || event.target === this.uiDialog[0]) && event.shiftKey) {
                                last.focus(1);
                                event.preventDefault();
                            }
                        },
                        mousedown: function(event) {
                            if (this._moveToTop(event)) {
                                this._focusTabbable();
                            }
                        }
                    });
                    // We assume that any existing aria-describedby attribute means
                    // that the dialog content is marked up properly
                    // otherwise we brute force the content as the description
                    if (!this.element.find("[aria-describedby]").length) {
                        this.uiDialog.attr({
                            "aria-describedby": this.element.uniqueId().attr("id")
                        });
                    }
                },
                _createTitlebar: function() {
                    var uiDialogTitle;
                    this.uiDialogTitlebar = $("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
                    this._on(this.uiDialogTitlebar, {
                        mousedown: function(event) {
                            // Don't prevent click on close button (#8838)
                            // Focusing a dialog that is partially scrolled out of view
                            // causes the browser to scroll it into view, preventing the click event
                            if (!$(event.target).closest(".ui-dialog-titlebar-close")) {
                                // Dialog isn't getting focus when dragging (#8063)
                                this.uiDialog.focus();
                            }
                        }
                    });
                    this.uiDialogTitlebarClose = $("<button></button>").button({
                        label: this.options.closeText,
                        icons: {
                            primary: "ui-icon-closethick"
                        },
                        text: false
                    }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
                    this._on(this.uiDialogTitlebarClose, {
                        click: function(event) {
                            event.preventDefault();
                            this.close(event);
                        }
                    });
                    uiDialogTitle = $("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
                    this._title(uiDialogTitle);
                    this.uiDialog.attr({
                        "aria-labelledby": uiDialogTitle.attr("id")
                    });
                },
                _title: function(title) {
                    if (!this.options.title) {
                        title.html("&#160;");
                    }
                    title.text(this.options.title);
                },
                _createButtonPane: function() {
                    this.uiDialogButtonPane = $("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
                    this.uiButtonSet = $("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
                    this._createButtons();
                },
                _createButtons: function() {
                    var that = this, buttons = this.options.buttons;
                    // if we already have a button pane, remove it
                    this.uiDialogButtonPane.remove();
                    this.uiButtonSet.empty();
                    if ($.isEmptyObject(buttons) || $.isArray(buttons) && !buttons.length) {
                        this.uiDialog.removeClass("ui-dialog-buttons");
                        return;
                    }
                    $.each(buttons, function(name, props) {
                        var click, buttonOptions;
                        props = $.isFunction(props) ? {
                            click: props,
                            text: name
                        } : props;
                        // Default to a non-submitting button
                        props = $.extend({
                            type: "button"
                        }, props);
                        // Change the context for the click callback to be the main element
                        click = props.click;
                        props.click = function() {
                            click.apply(that.element[0], arguments);
                        };
                        buttonOptions = {
                            icons: props.icons,
                            text: props.showText
                        };
                        delete props.icons;
                        delete props.showText;
                        $("<button></button>", props).button(buttonOptions).appendTo(that.uiButtonSet);
                    });
                    this.uiDialog.addClass("ui-dialog-buttons");
                    this.uiDialogButtonPane.appendTo(this.uiDialog);
                },
                _makeDraggable: function() {
                    var that = this, options = this.options;
                    function filteredUi(ui) {
                        return {
                            position: ui.position,
                            offset: ui.offset
                        };
                    }
                    this.uiDialog.draggable({
                        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                        handle: ".ui-dialog-titlebar",
                        containment: "document",
                        start: function(event, ui) {
                            $(this).addClass("ui-dialog-dragging");
                            that._blockFrames();
                            that._trigger("dragStart", event, filteredUi(ui));
                        },
                        drag: function(event, ui) {
                            that._trigger("drag", event, filteredUi(ui));
                        },
                        stop: function(event, ui) {
                            options.position = [ ui.position.left - that.document.scrollLeft(), ui.position.top - that.document.scrollTop() ];
                            $(this).removeClass("ui-dialog-dragging");
                            that._unblockFrames();
                            that._trigger("dragStop", event, filteredUi(ui));
                        }
                    });
                },
                _makeResizable: function() {
                    var that = this, options = this.options, handles = options.resizable, // .ui-resizable has position: relative defined in the stylesheet
                    // but dialogs have to use absolute or fixed positioning
                    position = this.uiDialog.css("position"), resizeHandles = typeof handles === "string" ? handles : "n,e,s,w,se,sw,ne,nw";
                    function filteredUi(ui) {
                        return {
                            originalPosition: ui.originalPosition,
                            originalSize: ui.originalSize,
                            position: ui.position,
                            size: ui.size
                        };
                    }
                    this.uiDialog.resizable({
                        cancel: ".ui-dialog-content",
                        containment: "document",
                        alsoResize: this.element,
                        maxWidth: options.maxWidth,
                        maxHeight: options.maxHeight,
                        minWidth: options.minWidth,
                        minHeight: this._minHeight(),
                        handles: resizeHandles,
                        start: function(event, ui) {
                            $(this).addClass("ui-dialog-resizing");
                            that._blockFrames();
                            that._trigger("resizeStart", event, filteredUi(ui));
                        },
                        resize: function(event, ui) {
                            that._trigger("resize", event, filteredUi(ui));
                        },
                        stop: function(event, ui) {
                            options.height = $(this).height();
                            options.width = $(this).width();
                            $(this).removeClass("ui-dialog-resizing");
                            that._unblockFrames();
                            that._trigger("resizeStop", event, filteredUi(ui));
                        }
                    }).css("position", position);
                },
                _minHeight: function() {
                    var options = this.options;
                    return options.height === "auto" ? options.minHeight : Math.min(options.minHeight, options.height);
                },
                _position: function() {
                    // Need to show the dialog to get the actual offset in the position plugin
                    var isVisible = this.uiDialog.is(":visible");
                    if (!isVisible) {
                        this.uiDialog.show();
                    }
                    this.uiDialog.position(this.options.position);
                    if (!isVisible) {
                        this.uiDialog.hide();
                    }
                },
                _setOptions: function(options) {
                    var that = this, resize = false, resizableOptions = {};
                    $.each(options, function(key, value) {
                        that._setOption(key, value);
                        if (key in sizeRelatedOptions) {
                            resize = true;
                        }
                        if (key in resizableRelatedOptions) {
                            resizableOptions[key] = value;
                        }
                    });
                    if (resize) {
                        this._size();
                        this._position();
                    }
                    if (this.uiDialog.is(":data(ui-resizable)")) {
                        this.uiDialog.resizable("option", resizableOptions);
                    }
                },
                _setOption: function(key, value) {
                    /*jshint maxcomplexity:15*/
                    var isDraggable, isResizable, uiDialog = this.uiDialog;
                    if (key === "dialogClass") {
                        uiDialog.removeClass(this.options.dialogClass).addClass(value);
                    }
                    if (key === "disabled") {
                        return;
                    }
                    this._super(key, value);
                    if (key === "appendTo") {
                        this.uiDialog.appendTo(this._appendTo());
                    }
                    if (key === "buttons") {
                        this._createButtons();
                    }
                    if (key === "closeText") {
                        this.uiDialogTitlebarClose.button({
                            // Ensure that we always pass a string
                            label: "" + value
                        });
                    }
                    if (key === "draggable") {
                        isDraggable = uiDialog.is(":data(ui-draggable)");
                        if (isDraggable && !value) {
                            uiDialog.draggable("destroy");
                        }
                        if (!isDraggable && value) {
                            this._makeDraggable();
                        }
                    }
                    if (key === "position") {
                        this._position();
                    }
                    if (key === "resizable") {
                        // currently resizable, becoming non-resizable
                        isResizable = uiDialog.is(":data(ui-resizable)");
                        if (isResizable && !value) {
                            uiDialog.resizable("destroy");
                        }
                        // currently resizable, changing handles
                        if (isResizable && typeof value === "string") {
                            uiDialog.resizable("option", "handles", value);
                        }
                        // currently non-resizable, becoming resizable
                        if (!isResizable && value !== false) {
                            this._makeResizable();
                        }
                    }
                    if (key === "title") {
                        this._title(this.uiDialogTitlebar.find(".ui-dialog-title"));
                    }
                },
                _size: function() {
                    // If the user has resized the dialog, the .ui-dialog and .ui-dialog-content
                    // divs will both have width and height set, so we need to reset them
                    var nonContentHeight, minContentHeight, maxContentHeight, options = this.options;
                    // Reset content sizing
                    this.element.show().css({
                        width: "auto",
                        minHeight: 0,
                        maxHeight: "none",
                        height: 0
                    });
                    if (options.minWidth > options.width) {
                        options.width = options.minWidth;
                    }
                    // reset wrapper sizing
                    // determine the height of all the non-content elements
                    nonContentHeight = this.uiDialog.css({
                        height: "auto",
                        width: options.width
                    }).outerHeight();
                    minContentHeight = Math.max(0, options.minHeight - nonContentHeight);
                    maxContentHeight = typeof options.maxHeight === "number" ? Math.max(0, options.maxHeight - nonContentHeight) : "none";
                    if (options.height === "auto") {
                        this.element.css({
                            minHeight: minContentHeight,
                            maxHeight: maxContentHeight,
                            height: "auto"
                        });
                    } else {
                        this.element.height(Math.max(0, options.height - nonContentHeight));
                    }
                    if (this.uiDialog.is(":data(ui-resizable)")) {
                        this.uiDialog.resizable("option", "minHeight", this._minHeight());
                    }
                },
                _blockFrames: function() {
                    this.iframeBlocks = this.document.find("iframe").map(function() {
                        var iframe = $(this);
                        return $("<div>").css({
                            position: "absolute",
                            width: iframe.outerWidth(),
                            height: iframe.outerHeight()
                        }).appendTo(iframe.parent()).offset(iframe.offset())[0];
                    });
                },
                _unblockFrames: function() {
                    if (this.iframeBlocks) {
                        this.iframeBlocks.remove();
                        delete this.iframeBlocks;
                    }
                },
                _allowInteraction: function(event) {
                    if ($(event.target).closest(".ui-dialog").length) {
                        return true;
                    }
                    // TODO: Remove hack when datepicker implements
                    // the .ui-front logic (#8989)
                    return !!$(event.target).closest(".ui-datepicker").length;
                },
                _createOverlay: function() {
                    if (!this.options.modal) {
                        return;
                    }
                    var that = this, widgetFullName = this.widgetFullName;
                    if (!$.ui.dialog.overlayInstances) {
                        // Prevent use of anchors and inputs.
                        // We use a delay in case the overlay is created from an
                        // event that we're going to be cancelling. (#2804)
                        this._delay(function() {
                            // Handle .dialog().dialog("close") (#4065)
                            if ($.ui.dialog.overlayInstances) {
                                this.document.bind("focusin.dialog", function(event) {
                                    if (!that._allowInteraction(event)) {
                                        event.preventDefault();
                                        $(".ui-dialog:visible:last .ui-dialog-content").data(widgetFullName)._focusTabbable();
                                    }
                                });
                            }
                        });
                    }
                    this.overlay = $("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
                    this._on(this.overlay, {
                        mousedown: "_keepFocus"
                    });
                    $.ui.dialog.overlayInstances++;
                },
                _destroyOverlay: function() {
                    if (!this.options.modal) {
                        return;
                    }
                    if (this.overlay) {
                        $.ui.dialog.overlayInstances--;
                        if (!$.ui.dialog.overlayInstances) {
                            this.document.unbind("focusin.dialog");
                        }
                        this.overlay.remove();
                        this.overlay = null;
                    }
                }
            });
            $.ui.dialog.overlayInstances = 0;
            // DEPRECATED
            if ($.uiBackCompat !== false) {
                // position option with array notation
                // just override with old implementation
                $.widget("ui.dialog", $.ui.dialog, {
                    _position: function() {
                        var position = this.options.position, myAt = [], offset = [ 0, 0 ], isVisible;
                        if (position) {
                            if (typeof position === "string" || typeof position === "object" && "0" in position) {
                                myAt = position.split ? position.split(" ") : [ position[0], position[1] ];
                                if (myAt.length === 1) {
                                    myAt[1] = myAt[0];
                                }
                                $.each([ "left", "top" ], function(i, offsetPosition) {
                                    if (+myAt[i] === myAt[i]) {
                                        offset[i] = myAt[i];
                                        myAt[i] = offsetPosition;
                                    }
                                });
                                position = {
                                    my: myAt[0] + (offset[0] < 0 ? offset[0] : "+" + offset[0]) + " " + myAt[1] + (offset[1] < 0 ? offset[1] : "+" + offset[1]),
                                    at: myAt.join(" ")
                                };
                            }
                            position = $.extend({}, $.ui.dialog.prototype.options.position, position);
                        } else {
                            position = $.ui.dialog.prototype.options.position;
                        }
                        // need to show the dialog to get the actual offset in the position plugin
                        isVisible = this.uiDialog.is(":visible");
                        if (!isVisible) {
                            this.uiDialog.show();
                        }
                        this.uiDialog.position(position);
                        if (!isVisible) {
                            this.uiDialog.hide();
                        }
                    }
                });
            }
        })(jQuery);
        (function($, undefined) {
            var rvertical = /up|down|vertical/, rpositivemotion = /up|left|vertical|horizontal/;
            $.effects.effect.blind = function(o, done) {
                // Create element
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), direction = o.direction || "up", vertical = rvertical.test(direction), ref = vertical ? "height" : "width", ref2 = vertical ? "top" : "left", motion = rpositivemotion.test(direction), animation = {}, show = mode === "show", wrapper, distance, margin;
                // if already wrapped, the wrapper's properties are my property. #6245
                if (el.parent().is(".ui-effects-wrapper")) {
                    $.effects.save(el.parent(), props);
                } else {
                    $.effects.save(el, props);
                }
                el.show();
                wrapper = $.effects.createWrapper(el).css({
                    overflow: "hidden"
                });
                distance = wrapper[ref]();
                margin = parseFloat(wrapper.css(ref2)) || 0;
                animation[ref] = show ? distance : 0;
                if (!motion) {
                    el.css(vertical ? "bottom" : "right", 0).css(vertical ? "top" : "left", "auto").css({
                        position: "absolute"
                    });
                    animation[ref2] = show ? margin : distance + margin;
                }
                // start at 0 if we are showing
                if (show) {
                    wrapper.css(ref, 0);
                    if (!motion) {
                        wrapper.css(ref2, margin + distance);
                    }
                }
                // Animate
                wrapper.animate(animation, {
                    duration: o.duration,
                    easing: o.easing,
                    queue: false,
                    complete: function() {
                        if (mode === "hide") {
                            el.hide();
                        }
                        $.effects.restore(el, props);
                        $.effects.removeWrapper(el);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.bounce = function(o, done) {
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], // defaults:
                mode = $.effects.setMode(el, o.mode || "effect"), hide = mode === "hide", show = mode === "show", direction = o.direction || "up", distance = o.distance, times = o.times || 5, // number of internal animations
                anims = times * 2 + (show || hide ? 1 : 0), speed = o.duration / anims, easing = o.easing, // utility:
                ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left", i, upAnim, downAnim, // we will need to re-assemble the queue to stack our animations in place
                queue = el.queue(), queuelen = queue.length;
                // Avoid touching opacity to prevent clearType and PNG issues in IE
                if (show || hide) {
                    props.push("opacity");
                }
                $.effects.save(el, props);
                el.show();
                $.effects.createWrapper(el);
                // Create Wrapper
                // default distance for the BIGGEST bounce is the outer Distance / 3
                if (!distance) {
                    distance = el[ref === "top" ? "outerHeight" : "outerWidth"]() / 3;
                }
                if (show) {
                    downAnim = {
                        opacity: 1
                    };
                    downAnim[ref] = 0;
                    // if we are showing, force opacity 0 and set the initial position
                    // then do the "first" animation
                    el.css("opacity", 0).css(ref, motion ? -distance * 2 : distance * 2).animate(downAnim, speed, easing);
                }
                // start at the smallest distance if we are hiding
                if (hide) {
                    distance = distance / Math.pow(2, times - 1);
                }
                downAnim = {};
                downAnim[ref] = 0;
                // Bounces up/down/left/right then back to 0 -- times * 2 animations happen here
                for (i = 0; i < times; i++) {
                    upAnim = {};
                    upAnim[ref] = (motion ? "-=" : "+=") + distance;
                    el.animate(upAnim, speed, easing).animate(downAnim, speed, easing);
                    distance = hide ? distance * 2 : distance / 2;
                }
                // Last Bounce when Hiding
                if (hide) {
                    upAnim = {
                        opacity: 0
                    };
                    upAnim[ref] = (motion ? "-=" : "+=") + distance;
                    el.animate(upAnim, speed, easing);
                }
                el.queue(function() {
                    if (hide) {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                });
                // inject all the animations we just queued to be first in line (after "inprogress")
                if (queuelen > 1) {
                    queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
                }
                el.dequeue();
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.clip = function(o, done) {
                // Create element
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", direction = o.direction || "vertical", vert = direction === "vertical", size = vert ? "height" : "width", position = vert ? "top" : "left", animation = {}, wrapper, animate, distance;
                // Save & Show
                $.effects.save(el, props);
                el.show();
                // Create Wrapper
                wrapper = $.effects.createWrapper(el).css({
                    overflow: "hidden"
                });
                animate = el[0].tagName === "IMG" ? wrapper : el;
                distance = animate[size]();
                // Shift
                if (show) {
                    animate.css(size, 0);
                    animate.css(position, distance / 2);
                }
                // Create Animation Object:
                animation[size] = show ? distance : 0;
                animation[position] = show ? 0 : distance / 2;
                // Animate
                animate.animate(animation, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: function() {
                        if (!show) {
                            el.hide();
                        }
                        $.effects.restore(el, props);
                        $.effects.removeWrapper(el);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.drop = function(o, done) {
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "opacity", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", direction = o.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", motion = direction === "up" || direction === "left" ? "pos" : "neg", animation = {
                    opacity: show ? 1 : 0
                }, distance;
                // Adjust
                $.effects.save(el, props);
                el.show();
                $.effects.createWrapper(el);
                distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true) / 2;
                if (show) {
                    el.css("opacity", 0).css(ref, motion === "pos" ? -distance : distance);
                }
                // Animation
                animation[ref] = (show ? motion === "pos" ? "+=" : "-=" : motion === "pos" ? "-=" : "+=") + distance;
                // Animate
                el.animate(animation, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: function() {
                        if (mode === "hide") {
                            el.hide();
                        }
                        $.effects.restore(el, props);
                        $.effects.removeWrapper(el);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.explode = function(o, done) {
                var rows = o.pieces ? Math.round(Math.sqrt(o.pieces)) : 3, cells = rows, el = $(this), mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", // show and then visibility:hidden the element before calculating offset
                offset = el.show().css("visibility", "hidden").offset(), // width and height of a piece
                width = Math.ceil(el.outerWidth() / cells), height = Math.ceil(el.outerHeight() / rows), pieces = [], // loop
                i, j, left, top, mx, my;
                // children animate complete:
                function childComplete() {
                    pieces.push(this);
                    if (pieces.length === rows * cells) {
                        animComplete();
                    }
                }
                // clone the element for each row and cell.
                for (i = 0; i < rows; i++) {
                    // ===>
                    top = offset.top + i * height;
                    my = i - (rows - 1) / 2;
                    for (j = 0; j < cells; j++) {
                        // |||
                        left = offset.left + j * width;
                        mx = j - (cells - 1) / 2;
                        // Create a clone of the now hidden main element that will be absolute positioned
                        // within a wrapper div off the -left and -top equal to size of our pieces
                        el.clone().appendTo("body").wrap("<div></div>").css({
                            position: "absolute",
                            visibility: "visible",
                            left: -j * width,
                            top: -i * height
                        }).parent().addClass("ui-effects-explode").css({
                            position: "absolute",
                            overflow: "hidden",
                            width: width,
                            height: height,
                            left: left + (show ? mx * width : 0),
                            top: top + (show ? my * height : 0),
                            opacity: show ? 0 : 1
                        }).animate({
                            left: left + (show ? 0 : mx * width),
                            top: top + (show ? 0 : my * height),
                            opacity: show ? 1 : 0
                        }, o.duration || 500, o.easing, childComplete);
                    }
                }
                function animComplete() {
                    el.css({
                        visibility: "visible"
                    });
                    $(pieces).remove();
                    if (!show) {
                        el.hide();
                    }
                    done();
                }
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.fade = function(o, done) {
                var el = $(this), mode = $.effects.setMode(el, o.mode || "toggle");
                el.animate({
                    opacity: mode
                }, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: done
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.fold = function(o, done) {
                // Create element
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "hide"), show = mode === "show", hide = mode === "hide", size = o.size || 15, percent = /([0-9]+)%/.exec(size), horizFirst = !!o.horizFirst, widthFirst = show !== horizFirst, ref = widthFirst ? [ "width", "height" ] : [ "height", "width" ], duration = o.duration / 2, wrapper, distance, animation1 = {}, animation2 = {};
                $.effects.save(el, props);
                el.show();
                // Create Wrapper
                wrapper = $.effects.createWrapper(el).css({
                    overflow: "hidden"
                });
                distance = widthFirst ? [ wrapper.width(), wrapper.height() ] : [ wrapper.height(), wrapper.width() ];
                if (percent) {
                    size = parseInt(percent[1], 10) / 100 * distance[hide ? 0 : 1];
                }
                if (show) {
                    wrapper.css(horizFirst ? {
                        height: 0,
                        width: size
                    } : {
                        height: size,
                        width: 0
                    });
                }
                // Animation
                animation1[ref[0]] = show ? distance[0] : size;
                animation2[ref[1]] = show ? distance[1] : 0;
                // Animate
                wrapper.animate(animation1, duration, o.easing).animate(animation2, duration, o.easing, function() {
                    if (hide) {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.highlight = function(o, done) {
                var elem = $(this), props = [ "backgroundImage", "backgroundColor", "opacity" ], mode = $.effects.setMode(elem, o.mode || "show"), animation = {
                    backgroundColor: elem.css("backgroundColor")
                };
                if (mode === "hide") {
                    animation.opacity = 0;
                }
                $.effects.save(elem, props);
                elem.show().css({
                    backgroundImage: "none",
                    backgroundColor: o.color || "#ffff99"
                }).animate(animation, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: function() {
                        if (mode === "hide") {
                            elem.hide();
                        }
                        $.effects.restore(elem, props);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.pulsate = function(o, done) {
                var elem = $(this), mode = $.effects.setMode(elem, o.mode || "show"), show = mode === "show", hide = mode === "hide", showhide = show || mode === "hide", // showing or hiding leaves of the "last" animation
                anims = (o.times || 5) * 2 + (showhide ? 1 : 0), duration = o.duration / anims, animateTo = 0, queue = elem.queue(), queuelen = queue.length, i;
                if (show || !elem.is(":visible")) {
                    elem.css("opacity", 0).show();
                    animateTo = 1;
                }
                // anims - 1 opacity "toggles"
                for (i = 1; i < anims; i++) {
                    elem.animate({
                        opacity: animateTo
                    }, duration, o.easing);
                    animateTo = 1 - animateTo;
                }
                elem.animate({
                    opacity: animateTo
                }, duration, o.easing);
                elem.queue(function() {
                    if (hide) {
                        elem.hide();
                    }
                    done();
                });
                // We just queued up "anims" animations, we need to put them next in the queue
                if (queuelen > 1) {
                    queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
                }
                elem.dequeue();
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.puff = function(o, done) {
                var elem = $(this), mode = $.effects.setMode(elem, o.mode || "hide"), hide = mode === "hide", percent = parseInt(o.percent, 10) || 150, factor = percent / 100, original = {
                    height: elem.height(),
                    width: elem.width(),
                    outerHeight: elem.outerHeight(),
                    outerWidth: elem.outerWidth()
                };
                $.extend(o, {
                    effect: "scale",
                    queue: false,
                    fade: true,
                    mode: mode,
                    complete: done,
                    percent: hide ? percent : 100,
                    from: hide ? original : {
                        height: original.height * factor,
                        width: original.width * factor,
                        outerHeight: original.outerHeight * factor,
                        outerWidth: original.outerWidth * factor
                    }
                });
                elem.effect(o);
            };
            $.effects.effect.scale = function(o, done) {
                // Create element
                var el = $(this), options = $.extend(true, {}, o), mode = $.effects.setMode(el, o.mode || "effect"), percent = parseInt(o.percent, 10) || (parseInt(o.percent, 10) === 0 ? 0 : mode === "hide" ? 0 : 100), direction = o.direction || "both", origin = o.origin, original = {
                    height: el.height(),
                    width: el.width(),
                    outerHeight: el.outerHeight(),
                    outerWidth: el.outerWidth()
                }, factor = {
                    y: direction !== "horizontal" ? percent / 100 : 1,
                    x: direction !== "vertical" ? percent / 100 : 1
                };
                // We are going to pass this effect to the size effect:
                options.effect = "size";
                options.queue = false;
                options.complete = done;
                // Set default origin and restore for show/hide
                if (mode !== "effect") {
                    options.origin = origin || [ "middle", "center" ];
                    options.restore = true;
                }
                options.from = o.from || (mode === "show" ? {
                    height: 0,
                    width: 0,
                    outerHeight: 0,
                    outerWidth: 0
                } : original);
                options.to = {
                    height: original.height * factor.y,
                    width: original.width * factor.x,
                    outerHeight: original.outerHeight * factor.y,
                    outerWidth: original.outerWidth * factor.x
                };
                // Fade option to support puff
                if (options.fade) {
                    if (mode === "show") {
                        options.from.opacity = 0;
                        options.to.opacity = 1;
                    }
                    if (mode === "hide") {
                        options.from.opacity = 1;
                        options.to.opacity = 0;
                    }
                }
                // Animate
                el.effect(options);
            };
            $.effects.effect.size = function(o, done) {
                // Create element
                var original, baseline, factor, el = $(this), props0 = [ "position", "top", "bottom", "left", "right", "width", "height", "overflow", "opacity" ], // Always restore
                props1 = [ "position", "top", "bottom", "left", "right", "overflow", "opacity" ], // Copy for children
                props2 = [ "width", "height", "overflow" ], cProps = [ "fontSize" ], vProps = [ "borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom" ], hProps = [ "borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight" ], // Set options
                mode = $.effects.setMode(el, o.mode || "effect"), restore = o.restore || mode !== "effect", scale = o.scale || "both", origin = o.origin || [ "middle", "center" ], position = el.css("position"), props = restore ? props0 : props1, zero = {
                    height: 0,
                    width: 0,
                    outerHeight: 0,
                    outerWidth: 0
                };
                if (mode === "show") {
                    el.show();
                }
                original = {
                    height: el.height(),
                    width: el.width(),
                    outerHeight: el.outerHeight(),
                    outerWidth: el.outerWidth()
                };
                if (o.mode === "toggle" && mode === "show") {
                    el.from = o.to || zero;
                    el.to = o.from || original;
                } else {
                    el.from = o.from || (mode === "show" ? zero : original);
                    el.to = o.to || (mode === "hide" ? zero : original);
                }
                // Set scaling factor
                factor = {
                    from: {
                        y: el.from.height / original.height,
                        x: el.from.width / original.width
                    },
                    to: {
                        y: el.to.height / original.height,
                        x: el.to.width / original.width
                    }
                };
                // Scale the css box
                if (scale === "box" || scale === "both") {
                    // Vertical props scaling
                    if (factor.from.y !== factor.to.y) {
                        props = props.concat(vProps);
                        el.from = $.effects.setTransition(el, vProps, factor.from.y, el.from);
                        el.to = $.effects.setTransition(el, vProps, factor.to.y, el.to);
                    }
                    // Horizontal props scaling
                    if (factor.from.x !== factor.to.x) {
                        props = props.concat(hProps);
                        el.from = $.effects.setTransition(el, hProps, factor.from.x, el.from);
                        el.to = $.effects.setTransition(el, hProps, factor.to.x, el.to);
                    }
                }
                // Scale the content
                if (scale === "content" || scale === "both") {
                    // Vertical props scaling
                    if (factor.from.y !== factor.to.y) {
                        props = props.concat(cProps).concat(props2);
                        el.from = $.effects.setTransition(el, cProps, factor.from.y, el.from);
                        el.to = $.effects.setTransition(el, cProps, factor.to.y, el.to);
                    }
                }
                $.effects.save(el, props);
                el.show();
                $.effects.createWrapper(el);
                el.css("overflow", "hidden").css(el.from);
                // Adjust
                if (origin) {
                    // Calculate baseline shifts
                    baseline = $.effects.getBaseline(origin, original);
                    el.from.top = (original.outerHeight - el.outerHeight()) * baseline.y;
                    el.from.left = (original.outerWidth - el.outerWidth()) * baseline.x;
                    el.to.top = (original.outerHeight - el.to.outerHeight) * baseline.y;
                    el.to.left = (original.outerWidth - el.to.outerWidth) * baseline.x;
                }
                el.css(el.from);
                // set top & left
                // Animate
                if (scale === "content" || scale === "both") {
                    // Scale the children
                    // Add margins/font-size
                    vProps = vProps.concat([ "marginTop", "marginBottom" ]).concat(cProps);
                    hProps = hProps.concat([ "marginLeft", "marginRight" ]);
                    props2 = props0.concat(vProps).concat(hProps);
                    el.find("*[width]").each(function() {
                        var child = $(this), c_original = {
                            height: child.height(),
                            width: child.width(),
                            outerHeight: child.outerHeight(),
                            outerWidth: child.outerWidth()
                        };
                        if (restore) {
                            $.effects.save(child, props2);
                        }
                        child.from = {
                            height: c_original.height * factor.from.y,
                            width: c_original.width * factor.from.x,
                            outerHeight: c_original.outerHeight * factor.from.y,
                            outerWidth: c_original.outerWidth * factor.from.x
                        };
                        child.to = {
                            height: c_original.height * factor.to.y,
                            width: c_original.width * factor.to.x,
                            outerHeight: c_original.height * factor.to.y,
                            outerWidth: c_original.width * factor.to.x
                        };
                        // Vertical props scaling
                        if (factor.from.y !== factor.to.y) {
                            child.from = $.effects.setTransition(child, vProps, factor.from.y, child.from);
                            child.to = $.effects.setTransition(child, vProps, factor.to.y, child.to);
                        }
                        // Horizontal props scaling
                        if (factor.from.x !== factor.to.x) {
                            child.from = $.effects.setTransition(child, hProps, factor.from.x, child.from);
                            child.to = $.effects.setTransition(child, hProps, factor.to.x, child.to);
                        }
                        // Animate children
                        child.css(child.from);
                        child.animate(child.to, o.duration, o.easing, function() {
                            // Restore children
                            if (restore) {
                                $.effects.restore(child, props2);
                            }
                        });
                    });
                }
                // Animate
                el.animate(el.to, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: function() {
                        if (el.to.opacity === 0) {
                            el.css("opacity", el.from.opacity);
                        }
                        if (mode === "hide") {
                            el.hide();
                        }
                        $.effects.restore(el, props);
                        if (!restore) {
                            // we need to calculate our new positioning based on the scaling
                            if (position === "static") {
                                el.css({
                                    position: "relative",
                                    top: el.to.top,
                                    left: el.to.left
                                });
                            } else {
                                $.each([ "top", "left" ], function(idx, pos) {
                                    el.css(pos, function(_, str) {
                                        var val = parseInt(str, 10), toRef = idx ? el.to.left : el.to.top;
                                        // if original was "auto", recalculate the new value from wrapper
                                        if (str === "auto") {
                                            return toRef + "px";
                                        }
                                        return val + toRef + "px";
                                    });
                                });
                            }
                        }
                        $.effects.removeWrapper(el);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.shake = function(o, done) {
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "height", "width" ], mode = $.effects.setMode(el, o.mode || "effect"), direction = o.direction || "left", distance = o.distance || 20, times = o.times || 3, anims = times * 2 + 1, speed = Math.round(o.duration / anims), ref = direction === "up" || direction === "down" ? "top" : "left", positiveMotion = direction === "up" || direction === "left", animation = {}, animation1 = {}, animation2 = {}, i, // we will need to re-assemble the queue to stack our animations in place
                queue = el.queue(), queuelen = queue.length;
                $.effects.save(el, props);
                el.show();
                $.effects.createWrapper(el);
                // Animation
                animation[ref] = (positiveMotion ? "-=" : "+=") + distance;
                animation1[ref] = (positiveMotion ? "+=" : "-=") + distance * 2;
                animation2[ref] = (positiveMotion ? "-=" : "+=") + distance * 2;
                // Animate
                el.animate(animation, speed, o.easing);
                // Shakes
                for (i = 1; i < times; i++) {
                    el.animate(animation1, speed, o.easing).animate(animation2, speed, o.easing);
                }
                el.animate(animation1, speed, o.easing).animate(animation, speed / 2, o.easing).queue(function() {
                    if (mode === "hide") {
                        el.hide();
                    }
                    $.effects.restore(el, props);
                    $.effects.removeWrapper(el);
                    done();
                });
                // inject all the animations we just queued to be first in line (after "inprogress")
                if (queuelen > 1) {
                    queue.splice.apply(queue, [ 1, 0 ].concat(queue.splice(queuelen, anims + 1)));
                }
                el.dequeue();
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.slide = function(o, done) {
                // Create element
                var el = $(this), props = [ "position", "top", "bottom", "left", "right", "width", "height" ], mode = $.effects.setMode(el, o.mode || "show"), show = mode === "show", direction = o.direction || "left", ref = direction === "up" || direction === "down" ? "top" : "left", positiveMotion = direction === "up" || direction === "left", distance, animation = {};
                // Adjust
                $.effects.save(el, props);
                el.show();
                distance = o.distance || el[ref === "top" ? "outerHeight" : "outerWidth"](true);
                $.effects.createWrapper(el).css({
                    overflow: "hidden"
                });
                if (show) {
                    el.css(ref, positiveMotion ? isNaN(distance) ? "-" + distance : -distance : distance);
                }
                // Animation
                animation[ref] = (show ? positiveMotion ? "+=" : "-=" : positiveMotion ? "-=" : "+=") + distance;
                // Animate
                el.animate(animation, {
                    queue: false,
                    duration: o.duration,
                    easing: o.easing,
                    complete: function() {
                        if (mode === "hide") {
                            el.hide();
                        }
                        $.effects.restore(el, props);
                        $.effects.removeWrapper(el);
                        done();
                    }
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.effects.effect.transfer = function(o, done) {
                var elem = $(this), target = $(o.to), targetFixed = target.css("position") === "fixed", body = $("body"), fixTop = targetFixed ? body.scrollTop() : 0, fixLeft = targetFixed ? body.scrollLeft() : 0, endPosition = target.offset(), animation = {
                    top: endPosition.top - fixTop,
                    left: endPosition.left - fixLeft,
                    height: target.innerHeight(),
                    width: target.innerWidth()
                }, startPosition = elem.offset(), transfer = $("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(o.className).css({
                    top: startPosition.top - fixTop,
                    left: startPosition.left - fixLeft,
                    height: elem.innerHeight(),
                    width: elem.innerWidth(),
                    position: targetFixed ? "fixed" : "absolute"
                }).animate(animation, o.duration, o.easing, function() {
                    transfer.remove();
                    done();
                });
            };
        })(jQuery);
        (function($, undefined) {
            $.widget("ui.menu", {
                version: "1.10.2",
                defaultElement: "<ul>",
                delay: 300,
                options: {
                    icons: {
                        submenu: "ui-icon-carat-1-e"
                    },
                    menus: "ul",
                    position: {
                        my: "left top",
                        at: "right top"
                    },
                    role: "menu",
                    // callbacks
                    blur: null,
                    focus: null,
                    select: null
                },
                _create: function() {
                    this.activeMenu = this.element;
                    // flag used to prevent firing of the click handler
                    // as the event bubbles up through nested menus
                    this.mouseHandled = false;
                    this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content ui-corner-all").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                        role: this.options.role,
                        tabIndex: 0
                    }).bind("click" + this.eventNamespace, $.proxy(function(event) {
                        if (this.options.disabled) {
                            event.preventDefault();
                        }
                    }, this));
                    if (this.options.disabled) {
                        this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
                    }
                    this._on({
                        // Prevent focus from sticking to links inside menu after clicking
                        // them (focus should always stay on UL during navigation).
                        "mousedown .ui-menu-item > a": function(event) {
                            event.preventDefault();
                        },
                        "click .ui-state-disabled > a": function(event) {
                            event.preventDefault();
                        },
                        "click .ui-menu-item:has(a)": function(event) {
                            var target = $(event.target).closest(".ui-menu-item");
                            if (!this.mouseHandled && target.not(".ui-state-disabled").length) {
                                this.mouseHandled = true;
                                this.select(event);
                                // Open submenu on click
                                if (target.has(".ui-menu").length) {
                                    this.expand(event);
                                } else if (!this.element.is(":focus")) {
                                    // Redirect focus to the menu
                                    this.element.trigger("focus", [ true ]);
                                    // If the active item is on the top level, let it stay active.
                                    // Otherwise, blur the active item since it is no longer visible.
                                    if (this.active && this.active.parents(".ui-menu").length === 1) {
                                        clearTimeout(this.timer);
                                    }
                                }
                            }
                        },
                        "mouseenter .ui-menu-item": function(event) {
                            var target = $(event.currentTarget);
                            // Remove ui-state-active class from siblings of the newly focused menu item
                            // to avoid a jump caused by adjacent elements both having a class with a border
                            target.siblings().children(".ui-state-active").removeClass("ui-state-active");
                            this.focus(event, target);
                        },
                        mouseleave: "collapseAll",
                        "mouseleave .ui-menu": "collapseAll",
                        focus: function(event, keepActiveItem) {
                            // If there's already an active item, keep it active
                            // If not, activate the first item
                            var item = this.active || this.element.children(".ui-menu-item").eq(0);
                            if (!keepActiveItem) {
                                this.focus(event, item);
                            }
                        },
                        blur: function(event) {
                            this._delay(function() {
                                if (!$.contains(this.element[0], this.document[0].activeElement)) {
                                    this.collapseAll(event);
                                }
                            });
                        },
                        keydown: "_keydown"
                    });
                    this.refresh();
                    // Clicks outside of a menu collapse any open menus
                    this._on(this.document, {
                        click: function(event) {
                            if (!$(event.target).closest(".ui-menu").length) {
                                this.collapseAll(event);
                            }
                            // Reset the mouseHandled flag
                            this.mouseHandled = false;
                        }
                    });
                },
                _destroy: function() {
                    // Destroy (sub)menus
                    this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-corner-all ui-menu-icons").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
                    // Destroy menu items
                    this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").children("a").removeUniqueId().removeClass("ui-corner-all ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                        var elem = $(this);
                        if (elem.data("ui-menu-submenu-carat")) {
                            elem.remove();
                        }
                    });
                    // Destroy menu dividers
                    this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content");
                },
                _keydown: function(event) {
                    /*jshint maxcomplexity:20*/
                    var match, prev, character, skip, regex, preventDefault = true;
                    function escape(value) {
                        return value.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
                    }
                    switch (event.keyCode) {
                      case $.ui.keyCode.PAGE_UP:
                        this.previousPage(event);
                        break;

                      case $.ui.keyCode.PAGE_DOWN:
                        this.nextPage(event);
                        break;

                      case $.ui.keyCode.HOME:
                        this._move("first", "first", event);
                        break;

                      case $.ui.keyCode.END:
                        this._move("last", "last", event);
                        break;

                      case $.ui.keyCode.UP:
                        this.previous(event);
                        break;

                      case $.ui.keyCode.DOWN:
                        this.next(event);
                        break;

                      case $.ui.keyCode.LEFT:
                        this.collapse(event);
                        break;

                      case $.ui.keyCode.RIGHT:
                        if (this.active && !this.active.is(".ui-state-disabled")) {
                            this.expand(event);
                        }
                        break;

                      case $.ui.keyCode.ENTER:
                      case $.ui.keyCode.SPACE:
                        this._activate(event);
                        break;

                      case $.ui.keyCode.ESCAPE:
                        this.collapse(event);
                        break;

                      default:
                        preventDefault = false;
                        prev = this.previousFilter || "";
                        character = String.fromCharCode(event.keyCode);
                        skip = false;
                        clearTimeout(this.filterTimer);
                        if (character === prev) {
                            skip = true;
                        } else {
                            character = prev + character;
                        }
                        regex = new RegExp("^" + escape(character), "i");
                        match = this.activeMenu.children(".ui-menu-item").filter(function() {
                            return regex.test($(this).children("a").text());
                        });
                        match = skip && match.index(this.active.next()) !== -1 ? this.active.nextAll(".ui-menu-item") : match;
                        // If no matches on the current filter, reset to the last character pressed
                        // to move down the menu to the first item that starts with that character
                        if (!match.length) {
                            character = String.fromCharCode(event.keyCode);
                            regex = new RegExp("^" + escape(character), "i");
                            match = this.activeMenu.children(".ui-menu-item").filter(function() {
                                return regex.test($(this).children("a").text());
                            });
                        }
                        if (match.length) {
                            this.focus(event, match);
                            if (match.length > 1) {
                                this.previousFilter = character;
                                this.filterTimer = this._delay(function() {
                                    delete this.previousFilter;
                                }, 1e3);
                            } else {
                                delete this.previousFilter;
                            }
                        } else {
                            delete this.previousFilter;
                        }
                    }
                    if (preventDefault) {
                        event.preventDefault();
                    }
                },
                _activate: function(event) {
                    if (!this.active.is(".ui-state-disabled")) {
                        if (this.active.children("a[aria-haspopup='true']").length) {
                            this.expand(event);
                        } else {
                            this.select(event);
                        }
                    }
                },
                refresh: function() {
                    var menus, icon = this.options.icons.submenu, submenus = this.element.find(this.options.menus);
                    // Initialize nested menus
                    submenus.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-corner-all").hide().attr({
                        role: this.options.role,
                        "aria-hidden": "true",
                        "aria-expanded": "false"
                    }).each(function() {
                        var menu = $(this), item = menu.prev("a"), submenuCarat = $("<span>").addClass("ui-menu-icon ui-icon " + icon).data("ui-menu-submenu-carat", true);
                        item.attr("aria-haspopup", "true").prepend(submenuCarat);
                        menu.attr("aria-labelledby", item.attr("id"));
                    });
                    menus = submenus.add(this.element);
                    // Don't refresh list items that are already adapted
                    menus.children(":not(.ui-menu-item):has(a)").addClass("ui-menu-item").attr("role", "presentation").children("a").uniqueId().addClass("ui-corner-all").attr({
                        tabIndex: -1,
                        role: this._itemRole()
                    });
                    // Initialize unlinked menu-items containing spaces and/or dashes only as dividers
                    menus.children(":not(.ui-menu-item)").each(function() {
                        var item = $(this);
                        // hyphen, em dash, en dash
                        if (!/[^\-\u2014\u2013\s]/.test(item.text())) {
                            item.addClass("ui-widget-content ui-menu-divider");
                        }
                    });
                    // Add aria-disabled attribute to any disabled menu item
                    menus.children(".ui-state-disabled").attr("aria-disabled", "true");
                    // If the active item has been removed, blur the menu
                    if (this.active && !$.contains(this.element[0], this.active[0])) {
                        this.blur();
                    }
                },
                _itemRole: function() {
                    return {
                        menu: "menuitem",
                        listbox: "option"
                    }[this.options.role];
                },
                _setOption: function(key, value) {
                    if (key === "icons") {
                        this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(value.submenu);
                    }
                    this._super(key, value);
                },
                focus: function(event, item) {
                    var nested, focused;
                    this.blur(event, event && event.type === "focus");
                    this._scrollIntoView(item);
                    this.active = item.first();
                    focused = this.active.children("a").addClass("ui-state-focus");
                    // Only update aria-activedescendant if there's a role
                    // otherwise we assume focus is managed elsewhere
                    if (this.options.role) {
                        this.element.attr("aria-activedescendant", focused.attr("id"));
                    }
                    // Highlight active parent menu item, if any
                    this.active.parent().closest(".ui-menu-item").children("a:first").addClass("ui-state-active");
                    if (event && event.type === "keydown") {
                        this._close();
                    } else {
                        this.timer = this._delay(function() {
                            this._close();
                        }, this.delay);
                    }
                    nested = item.children(".ui-menu");
                    if (nested.length && /^mouse/.test(event.type)) {
                        this._startOpening(nested);
                    }
                    this.activeMenu = item.parent();
                    this._trigger("focus", event, {
                        item: item
                    });
                },
                _scrollIntoView: function(item) {
                    var borderTop, paddingTop, offset, scroll, elementHeight, itemHeight;
                    if (this._hasScroll()) {
                        borderTop = parseFloat($.css(this.activeMenu[0], "borderTopWidth")) || 0;
                        paddingTop = parseFloat($.css(this.activeMenu[0], "paddingTop")) || 0;
                        offset = item.offset().top - this.activeMenu.offset().top - borderTop - paddingTop;
                        scroll = this.activeMenu.scrollTop();
                        elementHeight = this.activeMenu.height();
                        itemHeight = item.height();
                        if (offset < 0) {
                            this.activeMenu.scrollTop(scroll + offset);
                        } else if (offset + itemHeight > elementHeight) {
                            this.activeMenu.scrollTop(scroll + offset - elementHeight + itemHeight);
                        }
                    }
                },
                blur: function(event, fromFocus) {
                    if (!fromFocus) {
                        clearTimeout(this.timer);
                    }
                    if (!this.active) {
                        return;
                    }
                    this.active.children("a").removeClass("ui-state-focus");
                    this.active = null;
                    this._trigger("blur", event, {
                        item: this.active
                    });
                },
                _startOpening: function(submenu) {
                    clearTimeout(this.timer);
                    // Don't open if already open fixes a Firefox bug that caused a .5 pixel
                    // shift in the submenu position when mousing over the carat icon
                    if (submenu.attr("aria-hidden") !== "true") {
                        return;
                    }
                    this.timer = this._delay(function() {
                        this._close();
                        this._open(submenu);
                    }, this.delay);
                },
                _open: function(submenu) {
                    var position = $.extend({
                        of: this.active
                    }, this.options.position);
                    clearTimeout(this.timer);
                    this.element.find(".ui-menu").not(submenu.parents(".ui-menu")).hide().attr("aria-hidden", "true");
                    submenu.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(position);
                },
                collapseAll: function(event, all) {
                    clearTimeout(this.timer);
                    this.timer = this._delay(function() {
                        // If we were passed an event, look for the submenu that contains the event
                        var currentMenu = all ? this.element : $(event && event.target).closest(this.element.find(".ui-menu"));
                        // If we found no valid submenu ancestor, use the main menu to close all sub menus anyway
                        if (!currentMenu.length) {
                            currentMenu = this.element;
                        }
                        this._close(currentMenu);
                        this.blur(event);
                        this.activeMenu = currentMenu;
                    }, this.delay);
                },
                // With no arguments, closes the currently active menu - if nothing is active
                // it closes all menus.  If passed an argument, it will search for menus BELOW
                _close: function(startMenu) {
                    if (!startMenu) {
                        startMenu = this.active ? this.active.parent() : this.element;
                    }
                    startMenu.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find("a.ui-state-active").removeClass("ui-state-active");
                },
                collapse: function(event) {
                    var newItem = this.active && this.active.parent().closest(".ui-menu-item", this.element);
                    if (newItem && newItem.length) {
                        this._close();
                        this.focus(event, newItem);
                    }
                },
                expand: function(event) {
                    var newItem = this.active && this.active.children(".ui-menu ").children(".ui-menu-item").first();
                    if (newItem && newItem.length) {
                        this._open(newItem.parent());
                        // Delay so Firefox will not hide activedescendant change in expanding submenu from AT
                        this._delay(function() {
                            this.focus(event, newItem);
                        });
                    }
                },
                next: function(event) {
                    this._move("next", "first", event);
                },
                previous: function(event) {
                    this._move("prev", "last", event);
                },
                isFirstItem: function() {
                    return this.active && !this.active.prevAll(".ui-menu-item").length;
                },
                isLastItem: function() {
                    return this.active && !this.active.nextAll(".ui-menu-item").length;
                },
                _move: function(direction, filter, event) {
                    var next;
                    if (this.active) {
                        if (direction === "first" || direction === "last") {
                            next = this.active[direction === "first" ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1);
                        } else {
                            next = this.active[direction + "All"](".ui-menu-item").eq(0);
                        }
                    }
                    if (!next || !next.length || !this.active) {
                        next = this.activeMenu.children(".ui-menu-item")[filter]();
                    }
                    this.focus(event, next);
                },
                nextPage: function(event) {
                    var item, base, height;
                    if (!this.active) {
                        this.next(event);
                        return;
                    }
                    if (this.isLastItem()) {
                        return;
                    }
                    if (this._hasScroll()) {
                        base = this.active.offset().top;
                        height = this.element.height();
                        this.active.nextAll(".ui-menu-item").each(function() {
                            item = $(this);
                            return item.offset().top - base - height < 0;
                        });
                        this.focus(event, item);
                    } else {
                        this.focus(event, this.activeMenu.children(".ui-menu-item")[!this.active ? "first" : "last"]());
                    }
                },
                previousPage: function(event) {
                    var item, base, height;
                    if (!this.active) {
                        this.next(event);
                        return;
                    }
                    if (this.isFirstItem()) {
                        return;
                    }
                    if (this._hasScroll()) {
                        base = this.active.offset().top;
                        height = this.element.height();
                        this.active.prevAll(".ui-menu-item").each(function() {
                            item = $(this);
                            return item.offset().top - base + height > 0;
                        });
                        this.focus(event, item);
                    } else {
                        this.focus(event, this.activeMenu.children(".ui-menu-item").first());
                    }
                },
                _hasScroll: function() {
                    return this.element.outerHeight() < this.element.prop("scrollHeight");
                },
                select: function(event) {
                    // TODO: It should never be possible to not have an active item at this
                    // point, but the tests don't trigger mouseenter before click.
                    this.active = this.active || $(event.target).closest(".ui-menu-item");
                    var ui = {
                        item: this.active
                    };
                    if (!this.active.has(".ui-menu").length) {
                        this.collapseAll(event, true);
                    }
                    this._trigger("select", event, ui);
                }
            });
        })(jQuery);
        (function($, undefined) {
            $.ui = $.ui || {};
            var cachedScrollbarWidth, max = Math.max, abs = Math.abs, round = Math.round, rhorizontal = /left|center|right/, rvertical = /top|center|bottom/, roffset = /[\+\-]\d+(\.[\d]+)?%?/, rposition = /^\w+/, rpercent = /%$/, _position = $.fn.position;
            function getOffsets(offsets, width, height) {
                return [ parseFloat(offsets[0]) * (rpercent.test(offsets[0]) ? width / 100 : 1), parseFloat(offsets[1]) * (rpercent.test(offsets[1]) ? height / 100 : 1) ];
            }
            function parseCss(element, property) {
                return parseInt($.css(element, property), 10) || 0;
            }
            function getDimensions(elem) {
                var raw = elem[0];
                if (raw.nodeType === 9) {
                    return {
                        width: elem.width(),
                        height: elem.height(),
                        offset: {
                            top: 0,
                            left: 0
                        }
                    };
                }
                if ($.isWindow(raw)) {
                    return {
                        width: elem.width(),
                        height: elem.height(),
                        offset: {
                            top: elem.scrollTop(),
                            left: elem.scrollLeft()
                        }
                    };
                }
                if (raw.preventDefault) {
                    return {
                        width: 0,
                        height: 0,
                        offset: {
                            top: raw.pageY,
                            left: raw.pageX
                        }
                    };
                }
                return {
                    width: elem.outerWidth(),
                    height: elem.outerHeight(),
                    offset: elem.offset()
                };
            }
            $.position = {
                scrollbarWidth: function() {
                    if (cachedScrollbarWidth !== undefined) {
                        return cachedScrollbarWidth;
                    }
                    var w1, w2, div = $("<div style='display:block;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>"), innerDiv = div.children()[0];
                    $("body").append(div);
                    w1 = innerDiv.offsetWidth;
                    div.css("overflow", "scroll");
                    w2 = innerDiv.offsetWidth;
                    if (w1 === w2) {
                        w2 = div[0].clientWidth;
                    }
                    div.remove();
                    return cachedScrollbarWidth = w1 - w2;
                },
                getScrollInfo: function(within) {
                    var overflowX = within.isWindow ? "" : within.element.css("overflow-x"), overflowY = within.isWindow ? "" : within.element.css("overflow-y"), hasOverflowX = overflowX === "scroll" || overflowX === "auto" && within.width < within.element[0].scrollWidth, hasOverflowY = overflowY === "scroll" || overflowY === "auto" && within.height < within.element[0].scrollHeight;
                    return {
                        width: hasOverflowY ? $.position.scrollbarWidth() : 0,
                        height: hasOverflowX ? $.position.scrollbarWidth() : 0
                    };
                },
                getWithinInfo: function(element) {
                    var withinElement = $(element || window), isWindow = $.isWindow(withinElement[0]);
                    return {
                        element: withinElement,
                        isWindow: isWindow,
                        offset: withinElement.offset() || {
                            left: 0,
                            top: 0
                        },
                        scrollLeft: withinElement.scrollLeft(),
                        scrollTop: withinElement.scrollTop(),
                        width: isWindow ? withinElement.width() : withinElement.outerWidth(),
                        height: isWindow ? withinElement.height() : withinElement.outerHeight()
                    };
                }
            };
            $.fn.position = function(options) {
                if (!options || !options.of) {
                    return _position.apply(this, arguments);
                }
                // make a copy, we don't want to modify arguments
                options = $.extend({}, options);
                var atOffset, targetWidth, targetHeight, targetOffset, basePosition, dimensions, target = $(options.of), within = $.position.getWithinInfo(options.within), scrollInfo = $.position.getScrollInfo(within), collision = (options.collision || "flip").split(" "), offsets = {};
                dimensions = getDimensions(target);
                if (target[0].preventDefault) {
                    // force left top to allow flipping
                    options.at = "left top";
                }
                targetWidth = dimensions.width;
                targetHeight = dimensions.height;
                targetOffset = dimensions.offset;
                // clone to reuse original targetOffset later
                basePosition = $.extend({}, targetOffset);
                // force my and at to have valid horizontal and vertical positions
                // if a value is missing or invalid, it will be converted to center
                $.each([ "my", "at" ], function() {
                    var pos = (options[this] || "").split(" "), horizontalOffset, verticalOffset;
                    if (pos.length === 1) {
                        pos = rhorizontal.test(pos[0]) ? pos.concat([ "center" ]) : rvertical.test(pos[0]) ? [ "center" ].concat(pos) : [ "center", "center" ];
                    }
                    pos[0] = rhorizontal.test(pos[0]) ? pos[0] : "center";
                    pos[1] = rvertical.test(pos[1]) ? pos[1] : "center";
                    // calculate offsets
                    horizontalOffset = roffset.exec(pos[0]);
                    verticalOffset = roffset.exec(pos[1]);
                    offsets[this] = [ horizontalOffset ? horizontalOffset[0] : 0, verticalOffset ? verticalOffset[0] : 0 ];
                    // reduce to just the positions without the offsets
                    options[this] = [ rposition.exec(pos[0])[0], rposition.exec(pos[1])[0] ];
                });
                // normalize collision option
                if (collision.length === 1) {
                    collision[1] = collision[0];
                }
                if (options.at[0] === "right") {
                    basePosition.left += targetWidth;
                } else if (options.at[0] === "center") {
                    basePosition.left += targetWidth / 2;
                }
                if (options.at[1] === "bottom") {
                    basePosition.top += targetHeight;
                } else if (options.at[1] === "center") {
                    basePosition.top += targetHeight / 2;
                }
                atOffset = getOffsets(offsets.at, targetWidth, targetHeight);
                basePosition.left += atOffset[0];
                basePosition.top += atOffset[1];
                return this.each(function() {
                    var collisionPosition, using, elem = $(this), elemWidth = elem.outerWidth(), elemHeight = elem.outerHeight(), marginLeft = parseCss(this, "marginLeft"), marginTop = parseCss(this, "marginTop"), collisionWidth = elemWidth + marginLeft + parseCss(this, "marginRight") + scrollInfo.width, collisionHeight = elemHeight + marginTop + parseCss(this, "marginBottom") + scrollInfo.height, position = $.extend({}, basePosition), myOffset = getOffsets(offsets.my, elem.outerWidth(), elem.outerHeight());
                    if (options.my[0] === "right") {
                        position.left -= elemWidth;
                    } else if (options.my[0] === "center") {
                        position.left -= elemWidth / 2;
                    }
                    if (options.my[1] === "bottom") {
                        position.top -= elemHeight;
                    } else if (options.my[1] === "center") {
                        position.top -= elemHeight / 2;
                    }
                    position.left += myOffset[0];
                    position.top += myOffset[1];
                    // if the browser doesn't support fractions, then round for consistent results
                    if (!$.support.offsetFractions) {
                        position.left = round(position.left);
                        position.top = round(position.top);
                    }
                    collisionPosition = {
                        marginLeft: marginLeft,
                        marginTop: marginTop
                    };
                    $.each([ "left", "top" ], function(i, dir) {
                        if ($.ui.position[collision[i]]) {
                            $.ui.position[collision[i]][dir](position, {
                                targetWidth: targetWidth,
                                targetHeight: targetHeight,
                                elemWidth: elemWidth,
                                elemHeight: elemHeight,
                                collisionPosition: collisionPosition,
                                collisionWidth: collisionWidth,
                                collisionHeight: collisionHeight,
                                offset: [ atOffset[0] + myOffset[0], atOffset[1] + myOffset[1] ],
                                my: options.my,
                                at: options.at,
                                within: within,
                                elem: elem
                            });
                        }
                    });
                    if (options.using) {
                        // adds feedback as second argument to using callback, if present
                        using = function(props) {
                            var left = targetOffset.left - position.left, right = left + targetWidth - elemWidth, top = targetOffset.top - position.top, bottom = top + targetHeight - elemHeight, feedback = {
                                target: {
                                    element: target,
                                    left: targetOffset.left,
                                    top: targetOffset.top,
                                    width: targetWidth,
                                    height: targetHeight
                                },
                                element: {
                                    element: elem,
                                    left: position.left,
                                    top: position.top,
                                    width: elemWidth,
                                    height: elemHeight
                                },
                                horizontal: right < 0 ? "left" : left > 0 ? "right" : "center",
                                vertical: bottom < 0 ? "top" : top > 0 ? "bottom" : "middle"
                            };
                            if (targetWidth < elemWidth && abs(left + right) < targetWidth) {
                                feedback.horizontal = "center";
                            }
                            if (targetHeight < elemHeight && abs(top + bottom) < targetHeight) {
                                feedback.vertical = "middle";
                            }
                            if (max(abs(left), abs(right)) > max(abs(top), abs(bottom))) {
                                feedback.important = "horizontal";
                            } else {
                                feedback.important = "vertical";
                            }
                            options.using.call(this, props, feedback);
                        };
                    }
                    elem.offset($.extend(position, {
                        using: using
                    }));
                });
            };
            $.ui.position = {
                fit: {
                    left: function(position, data) {
                        var within = data.within, withinOffset = within.isWindow ? within.scrollLeft : within.offset.left, outerWidth = within.width, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = withinOffset - collisionPosLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - withinOffset, newOverRight;
                        // element is wider than within
                        if (data.collisionWidth > outerWidth) {
                            // element is initially over the left side of within
                            if (overLeft > 0 && overRight <= 0) {
                                newOverRight = position.left + overLeft + data.collisionWidth - outerWidth - withinOffset;
                                position.left += overLeft - newOverRight;
                            } else if (overRight > 0 && overLeft <= 0) {
                                position.left = withinOffset;
                            } else {
                                if (overLeft > overRight) {
                                    position.left = withinOffset + outerWidth - data.collisionWidth;
                                } else {
                                    position.left = withinOffset;
                                }
                            }
                        } else if (overLeft > 0) {
                            position.left += overLeft;
                        } else if (overRight > 0) {
                            position.left -= overRight;
                        } else {
                            position.left = max(position.left - collisionPosLeft, position.left);
                        }
                    },
                    top: function(position, data) {
                        var within = data.within, withinOffset = within.isWindow ? within.scrollTop : within.offset.top, outerHeight = data.within.height, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = withinOffset - collisionPosTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - withinOffset, newOverBottom;
                        // element is taller than within
                        if (data.collisionHeight > outerHeight) {
                            // element is initially over the top of within
                            if (overTop > 0 && overBottom <= 0) {
                                newOverBottom = position.top + overTop + data.collisionHeight - outerHeight - withinOffset;
                                position.top += overTop - newOverBottom;
                            } else if (overBottom > 0 && overTop <= 0) {
                                position.top = withinOffset;
                            } else {
                                if (overTop > overBottom) {
                                    position.top = withinOffset + outerHeight - data.collisionHeight;
                                } else {
                                    position.top = withinOffset;
                                }
                            }
                        } else if (overTop > 0) {
                            position.top += overTop;
                        } else if (overBottom > 0) {
                            position.top -= overBottom;
                        } else {
                            position.top = max(position.top - collisionPosTop, position.top);
                        }
                    }
                },
                flip: {
                    left: function(position, data) {
                        var within = data.within, withinOffset = within.offset.left + within.scrollLeft, outerWidth = within.width, offsetLeft = within.isWindow ? within.scrollLeft : within.offset.left, collisionPosLeft = position.left - data.collisionPosition.marginLeft, overLeft = collisionPosLeft - offsetLeft, overRight = collisionPosLeft + data.collisionWidth - outerWidth - offsetLeft, myOffset = data.my[0] === "left" ? -data.elemWidth : data.my[0] === "right" ? data.elemWidth : 0, atOffset = data.at[0] === "left" ? data.targetWidth : data.at[0] === "right" ? -data.targetWidth : 0, offset = -2 * data.offset[0], newOverRight, newOverLeft;
                        if (overLeft < 0) {
                            newOverRight = position.left + myOffset + atOffset + offset + data.collisionWidth - outerWidth - withinOffset;
                            if (newOverRight < 0 || newOverRight < abs(overLeft)) {
                                position.left += myOffset + atOffset + offset;
                            }
                        } else if (overRight > 0) {
                            newOverLeft = position.left - data.collisionPosition.marginLeft + myOffset + atOffset + offset - offsetLeft;
                            if (newOverLeft > 0 || abs(newOverLeft) < overRight) {
                                position.left += myOffset + atOffset + offset;
                            }
                        }
                    },
                    top: function(position, data) {
                        var within = data.within, withinOffset = within.offset.top + within.scrollTop, outerHeight = within.height, offsetTop = within.isWindow ? within.scrollTop : within.offset.top, collisionPosTop = position.top - data.collisionPosition.marginTop, overTop = collisionPosTop - offsetTop, overBottom = collisionPosTop + data.collisionHeight - outerHeight - offsetTop, top = data.my[1] === "top", myOffset = top ? -data.elemHeight : data.my[1] === "bottom" ? data.elemHeight : 0, atOffset = data.at[1] === "top" ? data.targetHeight : data.at[1] === "bottom" ? -data.targetHeight : 0, offset = -2 * data.offset[1], newOverTop, newOverBottom;
                        if (overTop < 0) {
                            newOverBottom = position.top + myOffset + atOffset + offset + data.collisionHeight - outerHeight - withinOffset;
                            if (position.top + myOffset + atOffset + offset > overTop && (newOverBottom < 0 || newOverBottom < abs(overTop))) {
                                position.top += myOffset + atOffset + offset;
                            }
                        } else if (overBottom > 0) {
                            newOverTop = position.top - data.collisionPosition.marginTop + myOffset + atOffset + offset - offsetTop;
                            if (position.top + myOffset + atOffset + offset > overBottom && (newOverTop > 0 || abs(newOverTop) < overBottom)) {
                                position.top += myOffset + atOffset + offset;
                            }
                        }
                    }
                },
                flipfit: {
                    left: function() {
                        $.ui.position.flip.left.apply(this, arguments);
                        $.ui.position.fit.left.apply(this, arguments);
                    },
                    top: function() {
                        $.ui.position.flip.top.apply(this, arguments);
                        $.ui.position.fit.top.apply(this, arguments);
                    }
                }
            };
            // fraction support test
            (function() {
                var testElement, testElementParent, testElementStyle, offsetLeft, i, body = document.getElementsByTagName("body")[0], div = document.createElement("div");
                //Create a "fake body" for testing based on method used in jQuery.support
                testElement = document.createElement(body ? "div" : "body");
                testElementStyle = {
                    visibility: "hidden",
                    width: 0,
                    height: 0,
                    border: 0,
                    margin: 0,
                    background: "none"
                };
                if (body) {
                    $.extend(testElementStyle, {
                        position: "absolute",
                        left: "-1000px",
                        top: "-1000px"
                    });
                }
                for (i in testElementStyle) {
                    testElement.style[i] = testElementStyle[i];
                }
                testElement.appendChild(div);
                testElementParent = body || document.documentElement;
                testElementParent.insertBefore(testElement, testElementParent.firstChild);
                div.style.cssText = "position: absolute; left: 10.7432222px;";
                offsetLeft = $(div).offset().left;
                $.support.offsetFractions = offsetLeft > 10 && offsetLeft < 11;
                testElement.innerHTML = "";
                testElementParent.removeChild(testElement);
            })();
        })(jQuery);
        (function($, undefined) {
            $.widget("ui.progressbar", {
                version: "1.10.2",
                options: {
                    max: 100,
                    value: 0,
                    change: null,
                    complete: null
                },
                min: 0,
                _create: function() {
                    // Constrain initial value
                    this.oldValue = this.options.value = this._constrainedValue();
                    this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                        // Only set static values, aria-valuenow and aria-valuemax are
                        // set inside _refreshValue()
                        role: "progressbar",
                        "aria-valuemin": this.min
                    });
                    this.valueDiv = $("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
                    this._refreshValue();
                },
                _destroy: function() {
                    this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                    this.valueDiv.remove();
                },
                value: function(newValue) {
                    if (newValue === undefined) {
                        return this.options.value;
                    }
                    this.options.value = this._constrainedValue(newValue);
                    this._refreshValue();
                },
                _constrainedValue: function(newValue) {
                    if (newValue === undefined) {
                        newValue = this.options.value;
                    }
                    this.indeterminate = newValue === false;
                    // sanitize value
                    if (typeof newValue !== "number") {
                        newValue = 0;
                    }
                    return this.indeterminate ? false : Math.min(this.options.max, Math.max(this.min, newValue));
                },
                _setOptions: function(options) {
                    // Ensure "value" option is set after other values (like max)
                    var value = options.value;
                    delete options.value;
                    this._super(options);
                    this.options.value = this._constrainedValue(value);
                    this._refreshValue();
                },
                _setOption: function(key, value) {
                    if (key === "max") {
                        // Don't allow a max less than min
                        value = Math.max(this.min, value);
                    }
                    this._super(key, value);
                },
                _percentage: function() {
                    return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min);
                },
                _refreshValue: function() {
                    var value = this.options.value, percentage = this._percentage();
                    this.valueDiv.toggle(this.indeterminate || value > this.min).toggleClass("ui-corner-right", value === this.options.max).width(percentage.toFixed(0) + "%");
                    this.element.toggleClass("ui-progressbar-indeterminate", this.indeterminate);
                    if (this.indeterminate) {
                        this.element.removeAttr("aria-valuenow");
                        if (!this.overlayDiv) {
                            this.overlayDiv = $("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv);
                        }
                    } else {
                        this.element.attr({
                            "aria-valuemax": this.options.max,
                            "aria-valuenow": value
                        });
                        if (this.overlayDiv) {
                            this.overlayDiv.remove();
                            this.overlayDiv = null;
                        }
                    }
                    if (this.oldValue !== value) {
                        this.oldValue = value;
                        this._trigger("change");
                    }
                    if (value === this.options.max) {
                        this._trigger("complete");
                    }
                }
            });
        })(jQuery);
        (function($, undefined) {
            // number of pages in a slider
            // (how many times can you page up/down to go through the whole range)
            var numPages = 5;
            $.widget("ui.slider", $.ui.mouse, {
                version: "1.10.2",
                widgetEventPrefix: "slide",
                options: {
                    animate: false,
                    distance: 0,
                    max: 100,
                    min: 0,
                    orientation: "horizontal",
                    range: false,
                    step: 1,
                    value: 0,
                    values: null,
                    // callbacks
                    change: null,
                    slide: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    this._keySliding = false;
                    this._mouseSliding = false;
                    this._animateOff = true;
                    this._handleIndex = null;
                    this._detectOrientation();
                    this._mouseInit();
                    this.element.addClass("ui-slider" + " ui-slider-" + this.orientation + " ui-widget" + " ui-widget-content" + " ui-corner-all");
                    this._refresh();
                    this._setOption("disabled", this.options.disabled);
                    this._animateOff = false;
                },
                _refresh: function() {
                    this._createRange();
                    this._createHandles();
                    this._setupEvents();
                    this._refreshValue();
                },
                _createHandles: function() {
                    var i, handleCount, options = this.options, existingHandles = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"), handle = "<a class='ui-slider-handle ui-state-default ui-corner-all' href='#'></a>", handles = [];
                    handleCount = options.values && options.values.length || 1;
                    if (existingHandles.length > handleCount) {
                        existingHandles.slice(handleCount).remove();
                        existingHandles = existingHandles.slice(0, handleCount);
                    }
                    for (i = existingHandles.length; i < handleCount; i++) {
                        handles.push(handle);
                    }
                    this.handles = existingHandles.add($(handles.join("")).appendTo(this.element));
                    this.handle = this.handles.eq(0);
                    this.handles.each(function(i) {
                        $(this).data("ui-slider-handle-index", i);
                    });
                },
                _createRange: function() {
                    var options = this.options, classes = "";
                    if (options.range) {
                        if (options.range === true) {
                            if (!options.values) {
                                options.values = [ this._valueMin(), this._valueMin() ];
                            } else if (options.values.length && options.values.length !== 2) {
                                options.values = [ options.values[0], options.values[0] ];
                            } else if ($.isArray(options.values)) {
                                options.values = options.values.slice(0);
                            }
                        }
                        if (!this.range || !this.range.length) {
                            this.range = $("<div></div>").appendTo(this.element);
                            classes = "ui-slider-range" + // note: this isn't the most fittingly semantic framework class for this element,
                            // but worked best visually with a variety of themes
                            " ui-widget-header ui-corner-all";
                        } else {
                            this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                                left: "",
                                bottom: ""
                            });
                        }
                        this.range.addClass(classes + (options.range === "min" || options.range === "max" ? " ui-slider-range-" + options.range : ""));
                    } else {
                        this.range = $([]);
                    }
                },
                _setupEvents: function() {
                    var elements = this.handles.add(this.range).filter("a");
                    this._off(elements);
                    this._on(elements, this._handleEvents);
                    this._hoverable(elements);
                    this._focusable(elements);
                },
                _destroy: function() {
                    this.handles.remove();
                    this.range.remove();
                    this.element.removeClass("ui-slider" + " ui-slider-horizontal" + " ui-slider-vertical" + " ui-widget" + " ui-widget-content" + " ui-corner-all");
                    this._mouseDestroy();
                },
                _mouseCapture: function(event) {
                    var position, normValue, distance, closestHandle, index, allowed, offset, mouseOverHandle, that = this, o = this.options;
                    if (o.disabled) {
                        return false;
                    }
                    this.elementSize = {
                        width: this.element.outerWidth(),
                        height: this.element.outerHeight()
                    };
                    this.elementOffset = this.element.offset();
                    position = {
                        x: event.pageX,
                        y: event.pageY
                    };
                    normValue = this._normValueFromMouse(position);
                    distance = this._valueMax() - this._valueMin() + 1;
                    this.handles.each(function(i) {
                        var thisDistance = Math.abs(normValue - that.values(i));
                        if (distance > thisDistance || distance === thisDistance && (i === that._lastChangedValue || that.values(i) === o.min)) {
                            distance = thisDistance;
                            closestHandle = $(this);
                            index = i;
                        }
                    });
                    allowed = this._start(event, index);
                    if (allowed === false) {
                        return false;
                    }
                    this._mouseSliding = true;
                    this._handleIndex = index;
                    closestHandle.addClass("ui-state-active").focus();
                    offset = closestHandle.offset();
                    mouseOverHandle = !$(event.target).parents().addBack().is(".ui-slider-handle");
                    this._clickOffset = mouseOverHandle ? {
                        left: 0,
                        top: 0
                    } : {
                        left: event.pageX - offset.left - closestHandle.width() / 2,
                        top: event.pageY - offset.top - closestHandle.height() / 2 - (parseInt(closestHandle.css("borderTopWidth"), 10) || 0) - (parseInt(closestHandle.css("borderBottomWidth"), 10) || 0) + (parseInt(closestHandle.css("marginTop"), 10) || 0)
                    };
                    if (!this.handles.hasClass("ui-state-hover")) {
                        this._slide(event, index, normValue);
                    }
                    this._animateOff = true;
                    return true;
                },
                _mouseStart: function() {
                    return true;
                },
                _mouseDrag: function(event) {
                    var position = {
                        x: event.pageX,
                        y: event.pageY
                    }, normValue = this._normValueFromMouse(position);
                    this._slide(event, this._handleIndex, normValue);
                    return false;
                },
                _mouseStop: function(event) {
                    this.handles.removeClass("ui-state-active");
                    this._mouseSliding = false;
                    this._stop(event, this._handleIndex);
                    this._change(event, this._handleIndex);
                    this._handleIndex = null;
                    this._clickOffset = null;
                    this._animateOff = false;
                    return false;
                },
                _detectOrientation: function() {
                    this.orientation = this.options.orientation === "vertical" ? "vertical" : "horizontal";
                },
                _normValueFromMouse: function(position) {
                    var pixelTotal, pixelMouse, percentMouse, valueTotal, valueMouse;
                    if (this.orientation === "horizontal") {
                        pixelTotal = this.elementSize.width;
                        pixelMouse = position.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0);
                    } else {
                        pixelTotal = this.elementSize.height;
                        pixelMouse = position.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0);
                    }
                    percentMouse = pixelMouse / pixelTotal;
                    if (percentMouse > 1) {
                        percentMouse = 1;
                    }
                    if (percentMouse < 0) {
                        percentMouse = 0;
                    }
                    if (this.orientation === "vertical") {
                        percentMouse = 1 - percentMouse;
                    }
                    valueTotal = this._valueMax() - this._valueMin();
                    valueMouse = this._valueMin() + percentMouse * valueTotal;
                    return this._trimAlignValue(valueMouse);
                },
                _start: function(event, index) {
                    var uiHash = {
                        handle: this.handles[index],
                        value: this.value()
                    };
                    if (this.options.values && this.options.values.length) {
                        uiHash.value = this.values(index);
                        uiHash.values = this.values();
                    }
                    return this._trigger("start", event, uiHash);
                },
                _slide: function(event, index, newVal) {
                    var otherVal, newValues, allowed;
                    if (this.options.values && this.options.values.length) {
                        otherVal = this.values(index ? 0 : 1);
                        if (this.options.values.length === 2 && this.options.range === true && (index === 0 && newVal > otherVal || index === 1 && newVal < otherVal)) {
                            newVal = otherVal;
                        }
                        if (newVal !== this.values(index)) {
                            newValues = this.values();
                            newValues[index] = newVal;
                            // A slide can be canceled by returning false from the slide callback
                            allowed = this._trigger("slide", event, {
                                handle: this.handles[index],
                                value: newVal,
                                values: newValues
                            });
                            otherVal = this.values(index ? 0 : 1);
                            if (allowed !== false) {
                                this.values(index, newVal, true);
                            }
                        }
                    } else {
                        if (newVal !== this.value()) {
                            // A slide can be canceled by returning false from the slide callback
                            allowed = this._trigger("slide", event, {
                                handle: this.handles[index],
                                value: newVal
                            });
                            if (allowed !== false) {
                                this.value(newVal);
                            }
                        }
                    }
                },
                _stop: function(event, index) {
                    var uiHash = {
                        handle: this.handles[index],
                        value: this.value()
                    };
                    if (this.options.values && this.options.values.length) {
                        uiHash.value = this.values(index);
                        uiHash.values = this.values();
                    }
                    this._trigger("stop", event, uiHash);
                },
                _change: function(event, index) {
                    if (!this._keySliding && !this._mouseSliding) {
                        var uiHash = {
                            handle: this.handles[index],
                            value: this.value()
                        };
                        if (this.options.values && this.options.values.length) {
                            uiHash.value = this.values(index);
                            uiHash.values = this.values();
                        }
                        //store the last changed value index for reference when handles overlap
                        this._lastChangedValue = index;
                        this._trigger("change", event, uiHash);
                    }
                },
                value: function(newValue) {
                    if (arguments.length) {
                        this.options.value = this._trimAlignValue(newValue);
                        this._refreshValue();
                        this._change(null, 0);
                        return;
                    }
                    return this._value();
                },
                values: function(index, newValue) {
                    var vals, newValues, i;
                    if (arguments.length > 1) {
                        this.options.values[index] = this._trimAlignValue(newValue);
                        this._refreshValue();
                        this._change(null, index);
                        return;
                    }
                    if (arguments.length) {
                        if ($.isArray(arguments[0])) {
                            vals = this.options.values;
                            newValues = arguments[0];
                            for (i = 0; i < vals.length; i += 1) {
                                vals[i] = this._trimAlignValue(newValues[i]);
                                this._change(null, i);
                            }
                            this._refreshValue();
                        } else {
                            if (this.options.values && this.options.values.length) {
                                return this._values(index);
                            } else {
                                return this.value();
                            }
                        }
                    } else {
                        return this._values();
                    }
                },
                _setOption: function(key, value) {
                    var i, valsLength = 0;
                    if (key === "range" && this.options.range === true) {
                        if (value === "min") {
                            this.options.value = this._values(0);
                            this.options.values = null;
                        } else if (value === "max") {
                            this.options.value = this._values(this.options.values.length - 1);
                            this.options.values = null;
                        }
                    }
                    if ($.isArray(this.options.values)) {
                        valsLength = this.options.values.length;
                    }
                    $.Widget.prototype._setOption.apply(this, arguments);
                    switch (key) {
                      case "orientation":
                        this._detectOrientation();
                        this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" + this.orientation);
                        this._refreshValue();
                        break;

                      case "value":
                        this._animateOff = true;
                        this._refreshValue();
                        this._change(null, 0);
                        this._animateOff = false;
                        break;

                      case "values":
                        this._animateOff = true;
                        this._refreshValue();
                        for (i = 0; i < valsLength; i += 1) {
                            this._change(null, i);
                        }
                        this._animateOff = false;
                        break;

                      case "min":
                      case "max":
                        this._animateOff = true;
                        this._refreshValue();
                        this._animateOff = false;
                        break;

                      case "range":
                        this._animateOff = true;
                        this._refresh();
                        this._animateOff = false;
                        break;
                    }
                },
                //internal value getter
                // _value() returns value trimmed by min and max, aligned by step
                _value: function() {
                    var val = this.options.value;
                    val = this._trimAlignValue(val);
                    return val;
                },
                //internal values getter
                // _values() returns array of values trimmed by min and max, aligned by step
                // _values( index ) returns single value trimmed by min and max, aligned by step
                _values: function(index) {
                    var val, vals, i;
                    if (arguments.length) {
                        val = this.options.values[index];
                        val = this._trimAlignValue(val);
                        return val;
                    } else if (this.options.values && this.options.values.length) {
                        // .slice() creates a copy of the array
                        // this copy gets trimmed by min and max and then returned
                        vals = this.options.values.slice();
                        for (i = 0; i < vals.length; i += 1) {
                            vals[i] = this._trimAlignValue(vals[i]);
                        }
                        return vals;
                    } else {
                        return [];
                    }
                },
                // returns the step-aligned value that val is closest to, between (inclusive) min and max
                _trimAlignValue: function(val) {
                    if (val <= this._valueMin()) {
                        return this._valueMin();
                    }
                    if (val >= this._valueMax()) {
                        return this._valueMax();
                    }
                    var step = this.options.step > 0 ? this.options.step : 1, valModStep = (val - this._valueMin()) % step, alignValue = val - valModStep;
                    if (Math.abs(valModStep) * 2 >= step) {
                        alignValue += valModStep > 0 ? step : -step;
                    }
                    // Since JavaScript has problems with large floats, round
                    // the final value to 5 digits after the decimal point (see #4124)
                    return parseFloat(alignValue.toFixed(5));
                },
                _valueMin: function() {
                    return this.options.min;
                },
                _valueMax: function() {
                    return this.options.max;
                },
                _refreshValue: function() {
                    var lastValPercent, valPercent, value, valueMin, valueMax, oRange = this.options.range, o = this.options, that = this, animate = !this._animateOff ? o.animate : false, _set = {};
                    if (this.options.values && this.options.values.length) {
                        this.handles.each(function(i) {
                            valPercent = (that.values(i) - that._valueMin()) / (that._valueMax() - that._valueMin()) * 100;
                            _set[that.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                            $(this).stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                            if (that.options.range === true) {
                                if (that.orientation === "horizontal") {
                                    if (i === 0) {
                                        that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                            left: valPercent + "%"
                                        }, o.animate);
                                    }
                                    if (i === 1) {
                                        that.range[animate ? "animate" : "css"]({
                                            width: valPercent - lastValPercent + "%"
                                        }, {
                                            queue: false,
                                            duration: o.animate
                                        });
                                    }
                                } else {
                                    if (i === 0) {
                                        that.range.stop(1, 1)[animate ? "animate" : "css"]({
                                            bottom: valPercent + "%"
                                        }, o.animate);
                                    }
                                    if (i === 1) {
                                        that.range[animate ? "animate" : "css"]({
                                            height: valPercent - lastValPercent + "%"
                                        }, {
                                            queue: false,
                                            duration: o.animate
                                        });
                                    }
                                }
                            }
                            lastValPercent = valPercent;
                        });
                    } else {
                        value = this.value();
                        valueMin = this._valueMin();
                        valueMax = this._valueMax();
                        valPercent = valueMax !== valueMin ? (value - valueMin) / (valueMax - valueMin) * 100 : 0;
                        _set[this.orientation === "horizontal" ? "left" : "bottom"] = valPercent + "%";
                        this.handle.stop(1, 1)[animate ? "animate" : "css"](_set, o.animate);
                        if (oRange === "min" && this.orientation === "horizontal") {
                            this.range.stop(1, 1)[animate ? "animate" : "css"]({
                                width: valPercent + "%"
                            }, o.animate);
                        }
                        if (oRange === "max" && this.orientation === "horizontal") {
                            this.range[animate ? "animate" : "css"]({
                                width: 100 - valPercent + "%"
                            }, {
                                queue: false,
                                duration: o.animate
                            });
                        }
                        if (oRange === "min" && this.orientation === "vertical") {
                            this.range.stop(1, 1)[animate ? "animate" : "css"]({
                                height: valPercent + "%"
                            }, o.animate);
                        }
                        if (oRange === "max" && this.orientation === "vertical") {
                            this.range[animate ? "animate" : "css"]({
                                height: 100 - valPercent + "%"
                            }, {
                                queue: false,
                                duration: o.animate
                            });
                        }
                    }
                },
                _handleEvents: {
                    keydown: function(event) {
                        /*jshint maxcomplexity:25*/
                        var allowed, curVal, newVal, step, index = $(event.target).data("ui-slider-handle-index");
                        switch (event.keyCode) {
                          case $.ui.keyCode.HOME:
                          case $.ui.keyCode.END:
                          case $.ui.keyCode.PAGE_UP:
                          case $.ui.keyCode.PAGE_DOWN:
                          case $.ui.keyCode.UP:
                          case $.ui.keyCode.RIGHT:
                          case $.ui.keyCode.DOWN:
                          case $.ui.keyCode.LEFT:
                            event.preventDefault();
                            if (!this._keySliding) {
                                this._keySliding = true;
                                $(event.target).addClass("ui-state-active");
                                allowed = this._start(event, index);
                                if (allowed === false) {
                                    return;
                                }
                            }
                            break;
                        }
                        step = this.options.step;
                        if (this.options.values && this.options.values.length) {
                            curVal = newVal = this.values(index);
                        } else {
                            curVal = newVal = this.value();
                        }
                        switch (event.keyCode) {
                          case $.ui.keyCode.HOME:
                            newVal = this._valueMin();
                            break;

                          case $.ui.keyCode.END:
                            newVal = this._valueMax();
                            break;

                          case $.ui.keyCode.PAGE_UP:
                            newVal = this._trimAlignValue(curVal + (this._valueMax() - this._valueMin()) / numPages);
                            break;

                          case $.ui.keyCode.PAGE_DOWN:
                            newVal = this._trimAlignValue(curVal - (this._valueMax() - this._valueMin()) / numPages);
                            break;

                          case $.ui.keyCode.UP:
                          case $.ui.keyCode.RIGHT:
                            if (curVal === this._valueMax()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal + step);
                            break;

                          case $.ui.keyCode.DOWN:
                          case $.ui.keyCode.LEFT:
                            if (curVal === this._valueMin()) {
                                return;
                            }
                            newVal = this._trimAlignValue(curVal - step);
                            break;
                        }
                        this._slide(event, index, newVal);
                    },
                    click: function(event) {
                        event.preventDefault();
                    },
                    keyup: function(event) {
                        var index = $(event.target).data("ui-slider-handle-index");
                        if (this._keySliding) {
                            this._keySliding = false;
                            this._stop(event, index);
                            this._change(event, index);
                            $(event.target).removeClass("ui-state-active");
                        }
                    }
                }
            });
        })(jQuery);
        (function($) {
            function modifier(fn) {
                return function() {
                    var previous = this.element.val();
                    fn.apply(this, arguments);
                    this._refresh();
                    if (previous !== this.element.val()) {
                        this._trigger("change");
                    }
                };
            }
            $.widget("ui.spinner", {
                version: "1.10.2",
                defaultElement: "<input>",
                widgetEventPrefix: "spin",
                options: {
                    culture: null,
                    icons: {
                        down: "ui-icon-triangle-1-s",
                        up: "ui-icon-triangle-1-n"
                    },
                    incremental: true,
                    max: null,
                    min: null,
                    numberFormat: null,
                    page: 10,
                    step: 1,
                    change: null,
                    spin: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    // handle string values that need to be parsed
                    this._setOption("max", this.options.max);
                    this._setOption("min", this.options.min);
                    this._setOption("step", this.options.step);
                    // format the value, but don't constrain
                    this._value(this.element.val(), true);
                    this._draw();
                    this._on(this._events);
                    this._refresh();
                    // turning off autocomplete prevents the browser from remembering the
                    // value when navigating through history, so we re-enable autocomplete
                    // if the page is unloaded before the widget is destroyed. #7790
                    this._on(this.window, {
                        beforeunload: function() {
                            this.element.removeAttr("autocomplete");
                        }
                    });
                },
                _getCreateOptions: function() {
                    var options = {}, element = this.element;
                    $.each([ "min", "max", "step" ], function(i, option) {
                        var value = element.attr(option);
                        if (value !== undefined && value.length) {
                            options[option] = value;
                        }
                    });
                    return options;
                },
                _events: {
                    keydown: function(event) {
                        if (this._start(event) && this._keydown(event)) {
                            event.preventDefault();
                        }
                    },
                    keyup: "_stop",
                    focus: function() {
                        this.previous = this.element.val();
                    },
                    blur: function(event) {
                        if (this.cancelBlur) {
                            delete this.cancelBlur;
                            return;
                        }
                        this._stop();
                        this._refresh();
                        if (this.previous !== this.element.val()) {
                            this._trigger("change", event);
                        }
                    },
                    mousewheel: function(event, delta) {
                        if (!delta) {
                            return;
                        }
                        if (!this.spinning && !this._start(event)) {
                            return false;
                        }
                        this._spin((delta > 0 ? 1 : -1) * this.options.step, event);
                        clearTimeout(this.mousewheelTimer);
                        this.mousewheelTimer = this._delay(function() {
                            if (this.spinning) {
                                this._stop(event);
                            }
                        }, 100);
                        event.preventDefault();
                    },
                    "mousedown .ui-spinner-button": function(event) {
                        var previous;
                        // We never want the buttons to have focus; whenever the user is
                        // interacting with the spinner, the focus should be on the input.
                        // If the input is focused then this.previous is properly set from
                        // when the input first received focus. If the input is not focused
                        // then we need to set this.previous based on the value before spinning.
                        previous = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                        function checkFocus() {
                            var isActive = this.element[0] === this.document[0].activeElement;
                            if (!isActive) {
                                this.element.focus();
                                this.previous = previous;
                                // support: IE
                                // IE sets focus asynchronously, so we need to check if focus
                                // moved off of the input because the user clicked on the button.
                                this._delay(function() {
                                    this.previous = previous;
                                });
                            }
                        }
                        // ensure focus is on (or stays on) the text field
                        event.preventDefault();
                        checkFocus.call(this);
                        // support: IE
                        // IE doesn't prevent moving focus even with event.preventDefault()
                        // so we set a flag to know when we should ignore the blur event
                        // and check (again) if focus moved off of the input.
                        this.cancelBlur = true;
                        this._delay(function() {
                            delete this.cancelBlur;
                            checkFocus.call(this);
                        });
                        if (this._start(event) === false) {
                            return;
                        }
                        this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
                    },
                    "mouseup .ui-spinner-button": "_stop",
                    "mouseenter .ui-spinner-button": function(event) {
                        // button will add ui-state-active if mouse was down while mouseleave and kept down
                        if (!$(event.currentTarget).hasClass("ui-state-active")) {
                            return;
                        }
                        if (this._start(event) === false) {
                            return false;
                        }
                        this._repeat(null, $(event.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, event);
                    },
                    // TODO: do we really want to consider this a stop?
                    // shouldn't we just stop the repeater and wait until mouseup before
                    // we trigger the stop event?
                    "mouseleave .ui-spinner-button": "_stop"
                },
                _draw: function() {
                    var uiSpinner = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
                    this.element.attr("role", "spinbutton");
                    // button bindings
                    this.buttons = uiSpinner.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
                    // IE 6 doesn't understand height: 50% for the buttons
                    // unless the wrapper has an explicit height
                    if (this.buttons.height() > Math.ceil(uiSpinner.height() * .5) && uiSpinner.height() > 0) {
                        uiSpinner.height(uiSpinner.height());
                    }
                    // disable spinner if element was already disabled
                    if (this.options.disabled) {
                        this.disable();
                    }
                },
                _keydown: function(event) {
                    var options = this.options, keyCode = $.ui.keyCode;
                    switch (event.keyCode) {
                      case keyCode.UP:
                        this._repeat(null, 1, event);
                        return true;

                      case keyCode.DOWN:
                        this._repeat(null, -1, event);
                        return true;

                      case keyCode.PAGE_UP:
                        this._repeat(null, options.page, event);
                        return true;

                      case keyCode.PAGE_DOWN:
                        this._repeat(null, -options.page, event);
                        return true;
                    }
                    return false;
                },
                _uiSpinnerHtml: function() {
                    return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>";
                },
                _buttonHtml: function() {
                    return "" + "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'>" + "<span class='ui-icon " + this.options.icons.up + "'>&#9650;</span>" + "</a>" + "<a class='ui-spinner-button ui-spinner-down ui-corner-br'>" + "<span class='ui-icon " + this.options.icons.down + "'>&#9660;</span>" + "</a>";
                },
                _start: function(event) {
                    if (!this.spinning && this._trigger("start", event) === false) {
                        return false;
                    }
                    if (!this.counter) {
                        this.counter = 1;
                    }
                    this.spinning = true;
                    return true;
                },
                _repeat: function(i, steps, event) {
                    i = i || 500;
                    clearTimeout(this.timer);
                    this.timer = this._delay(function() {
                        this._repeat(40, steps, event);
                    }, i);
                    this._spin(steps * this.options.step, event);
                },
                _spin: function(step, event) {
                    var value = this.value() || 0;
                    if (!this.counter) {
                        this.counter = 1;
                    }
                    value = this._adjustValue(value + step * this._increment(this.counter));
                    if (!this.spinning || this._trigger("spin", event, {
                        value: value
                    }) !== false) {
                        this._value(value);
                        this.counter++;
                    }
                },
                _increment: function(i) {
                    var incremental = this.options.incremental;
                    if (incremental) {
                        return $.isFunction(incremental) ? incremental(i) : Math.floor(i * i * i / 5e4 - i * i / 500 + 17 * i / 200 + 1);
                    }
                    return 1;
                },
                _precision: function() {
                    var precision = this._precisionOf(this.options.step);
                    if (this.options.min !== null) {
                        precision = Math.max(precision, this._precisionOf(this.options.min));
                    }
                    return precision;
                },
                _precisionOf: function(num) {
                    var str = num.toString(), decimal = str.indexOf(".");
                    return decimal === -1 ? 0 : str.length - decimal - 1;
                },
                _adjustValue: function(value) {
                    var base, aboveMin, options = this.options;
                    // make sure we're at a valid step
                    // - find out where we are relative to the base (min or 0)
                    base = options.min !== null ? options.min : 0;
                    aboveMin = value - base;
                    // - round to the nearest step
                    aboveMin = Math.round(aboveMin / options.step) * options.step;
                    // - rounding is based on 0, so adjust back to our base
                    value = base + aboveMin;
                    // fix precision from bad JS floating point math
                    value = parseFloat(value.toFixed(this._precision()));
                    // clamp the value
                    if (options.max !== null && value > options.max) {
                        return options.max;
                    }
                    if (options.min !== null && value < options.min) {
                        return options.min;
                    }
                    return value;
                },
                _stop: function(event) {
                    if (!this.spinning) {
                        return;
                    }
                    clearTimeout(this.timer);
                    clearTimeout(this.mousewheelTimer);
                    this.counter = 0;
                    this.spinning = false;
                    this._trigger("stop", event);
                },
                _setOption: function(key, value) {
                    if (key === "culture" || key === "numberFormat") {
                        var prevValue = this._parse(this.element.val());
                        this.options[key] = value;
                        this.element.val(this._format(prevValue));
                        return;
                    }
                    if (key === "max" || key === "min" || key === "step") {
                        if (typeof value === "string") {
                            value = this._parse(value);
                        }
                    }
                    if (key === "icons") {
                        this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(value.up);
                        this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(value.down);
                    }
                    this._super(key, value);
                    if (key === "disabled") {
                        if (value) {
                            this.element.prop("disabled", true);
                            this.buttons.button("disable");
                        } else {
                            this.element.prop("disabled", false);
                            this.buttons.button("enable");
                        }
                    }
                },
                _setOptions: modifier(function(options) {
                    this._super(options);
                    this._value(this.element.val());
                }),
                _parse: function(val) {
                    if (typeof val === "string" && val !== "") {
                        val = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(val, 10, this.options.culture) : +val;
                    }
                    return val === "" || isNaN(val) ? null : val;
                },
                _format: function(value) {
                    if (value === "") {
                        return "";
                    }
                    return window.Globalize && this.options.numberFormat ? Globalize.format(value, this.options.numberFormat, this.options.culture) : value;
                },
                _refresh: function() {
                    this.element.attr({
                        "aria-valuemin": this.options.min,
                        "aria-valuemax": this.options.max,
                        // TODO: what should we do with values that can't be parsed?
                        "aria-valuenow": this._parse(this.element.val())
                    });
                },
                // update the value without triggering change
                _value: function(value, allowAny) {
                    var parsed;
                    if (value !== "") {
                        parsed = this._parse(value);
                        if (parsed !== null) {
                            if (!allowAny) {
                                parsed = this._adjustValue(parsed);
                            }
                            value = this._format(parsed);
                        }
                    }
                    this.element.val(value);
                    this._refresh();
                },
                _destroy: function() {
                    this.element.removeClass("ui-spinner-input").prop("disabled", false).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                    this.uiSpinner.replaceWith(this.element);
                },
                stepUp: modifier(function(steps) {
                    this._stepUp(steps);
                }),
                _stepUp: function(steps) {
                    if (this._start()) {
                        this._spin((steps || 1) * this.options.step);
                        this._stop();
                    }
                },
                stepDown: modifier(function(steps) {
                    this._stepDown(steps);
                }),
                _stepDown: function(steps) {
                    if (this._start()) {
                        this._spin((steps || 1) * -this.options.step);
                        this._stop();
                    }
                },
                pageUp: modifier(function(pages) {
                    this._stepUp((pages || 1) * this.options.page);
                }),
                pageDown: modifier(function(pages) {
                    this._stepDown((pages || 1) * this.options.page);
                }),
                value: function(newVal) {
                    if (!arguments.length) {
                        return this._parse(this.element.val());
                    }
                    modifier(this._value).call(this, newVal);
                },
                widget: function() {
                    return this.uiSpinner;
                }
            });
        })(jQuery);
        (function($, undefined) {
            var tabId = 0, rhash = /#.*$/;
            function getNextTabId() {
                return ++tabId;
            }
            function isLocal(anchor) {
                return anchor.hash.length > 1 && decodeURIComponent(anchor.href.replace(rhash, "")) === decodeURIComponent(location.href.replace(rhash, ""));
            }
            $.widget("ui.tabs", {
                version: "1.10.2",
                delay: 300,
                options: {
                    active: null,
                    collapsible: false,
                    event: "click",
                    heightStyle: "content",
                    hide: null,
                    show: null,
                    // callbacks
                    activate: null,
                    beforeActivate: null,
                    beforeLoad: null,
                    load: null
                },
                _create: function() {
                    var that = this, options = this.options;
                    this.running = false;
                    this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", options.collapsible).delegate(".ui-tabs-nav > li", "mousedown" + this.eventNamespace, function(event) {
                        if ($(this).is(".ui-state-disabled")) {
                            event.preventDefault();
                        }
                    }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                        if ($(this).closest("li").is(".ui-state-disabled")) {
                            this.blur();
                        }
                    });
                    this._processTabs();
                    options.active = this._initialActive();
                    // Take disabling tabs via class attribute from HTML
                    // into account and update option properly.
                    if ($.isArray(options.disabled)) {
                        options.disabled = $.unique(options.disabled.concat($.map(this.tabs.filter(".ui-state-disabled"), function(li) {
                            return that.tabs.index(li);
                        }))).sort();
                    }
                    // check for length avoids error when initializing empty list
                    if (this.options.active !== false && this.anchors.length) {
                        this.active = this._findActive(options.active);
                    } else {
                        this.active = $();
                    }
                    this._refresh();
                    if (this.active.length) {
                        this.load(options.active);
                    }
                },
                _initialActive: function() {
                    var active = this.options.active, collapsible = this.options.collapsible, locationHash = location.hash.substring(1);
                    if (active === null) {
                        // check the fragment identifier in the URL
                        if (locationHash) {
                            this.tabs.each(function(i, tab) {
                                if ($(tab).attr("aria-controls") === locationHash) {
                                    active = i;
                                    return false;
                                }
                            });
                        }
                        // check for a tab marked active via a class
                        if (active === null) {
                            active = this.tabs.index(this.tabs.filter(".ui-tabs-active"));
                        }
                        // no active tab, set to false
                        if (active === null || active === -1) {
                            active = this.tabs.length ? 0 : false;
                        }
                    }
                    // handle numbers: negative, out of range
                    if (active !== false) {
                        active = this.tabs.index(this.tabs.eq(active));
                        if (active === -1) {
                            active = collapsible ? false : 0;
                        }
                    }
                    // don't allow collapsible: false and active: false
                    if (!collapsible && active === false && this.anchors.length) {
                        active = 0;
                    }
                    return active;
                },
                _getCreateEventData: function() {
                    return {
                        tab: this.active,
                        panel: !this.active.length ? $() : this._getPanelForTab(this.active)
                    };
                },
                _tabKeydown: function(event) {
                    /*jshint maxcomplexity:15*/
                    var focusedTab = $(this.document[0].activeElement).closest("li"), selectedIndex = this.tabs.index(focusedTab), goingForward = true;
                    if (this._handlePageNav(event)) {
                        return;
                    }
                    switch (event.keyCode) {
                      case $.ui.keyCode.RIGHT:
                      case $.ui.keyCode.DOWN:
                        selectedIndex++;
                        break;

                      case $.ui.keyCode.UP:
                      case $.ui.keyCode.LEFT:
                        goingForward = false;
                        selectedIndex--;
                        break;

                      case $.ui.keyCode.END:
                        selectedIndex = this.anchors.length - 1;
                        break;

                      case $.ui.keyCode.HOME:
                        selectedIndex = 0;
                        break;

                      case $.ui.keyCode.SPACE:
                        // Activate only, no collapsing
                        event.preventDefault();
                        clearTimeout(this.activating);
                        this._activate(selectedIndex);
                        return;

                      case $.ui.keyCode.ENTER:
                        // Toggle (cancel delayed activation, allow collapsing)
                        event.preventDefault();
                        clearTimeout(this.activating);
                        // Determine if we should collapse or activate
                        this._activate(selectedIndex === this.options.active ? false : selectedIndex);
                        return;

                      default:
                        return;
                    }
                    // Focus the appropriate tab, based on which key was pressed
                    event.preventDefault();
                    clearTimeout(this.activating);
                    selectedIndex = this._focusNextTab(selectedIndex, goingForward);
                    // Navigating with control key will prevent automatic activation
                    if (!event.ctrlKey) {
                        // Update aria-selected immediately so that AT think the tab is already selected.
                        // Otherwise AT may confuse the user by stating that they need to activate the tab,
                        // but the tab will already be activated by the time the announcement finishes.
                        focusedTab.attr("aria-selected", "false");
                        this.tabs.eq(selectedIndex).attr("aria-selected", "true");
                        this.activating = this._delay(function() {
                            this.option("active", selectedIndex);
                        }, this.delay);
                    }
                },
                _panelKeydown: function(event) {
                    if (this._handlePageNav(event)) {
                        return;
                    }
                    // Ctrl+up moves focus to the current tab
                    if (event.ctrlKey && event.keyCode === $.ui.keyCode.UP) {
                        event.preventDefault();
                        this.active.focus();
                    }
                },
                // Alt+page up/down moves focus to the previous/next tab (and activates)
                _handlePageNav: function(event) {
                    if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_UP) {
                        this._activate(this._focusNextTab(this.options.active - 1, false));
                        return true;
                    }
                    if (event.altKey && event.keyCode === $.ui.keyCode.PAGE_DOWN) {
                        this._activate(this._focusNextTab(this.options.active + 1, true));
                        return true;
                    }
                },
                _findNextTab: function(index, goingForward) {
                    var lastTabIndex = this.tabs.length - 1;
                    function constrain() {
                        if (index > lastTabIndex) {
                            index = 0;
                        }
                        if (index < 0) {
                            index = lastTabIndex;
                        }
                        return index;
                    }
                    while ($.inArray(constrain(), this.options.disabled) !== -1) {
                        index = goingForward ? index + 1 : index - 1;
                    }
                    return index;
                },
                _focusNextTab: function(index, goingForward) {
                    index = this._findNextTab(index, goingForward);
                    this.tabs.eq(index).focus();
                    return index;
                },
                _setOption: function(key, value) {
                    if (key === "active") {
                        // _activate() will handle invalid values and update this.options
                        this._activate(value);
                        return;
                    }
                    if (key === "disabled") {
                        // don't use the widget factory's disabled handling
                        this._setupDisabled(value);
                        return;
                    }
                    this._super(key, value);
                    if (key === "collapsible") {
                        this.element.toggleClass("ui-tabs-collapsible", value);
                        // Setting collapsible: false while collapsed; open first panel
                        if (!value && this.options.active === false) {
                            this._activate(0);
                        }
                    }
                    if (key === "event") {
                        this._setupEvents(value);
                    }
                    if (key === "heightStyle") {
                        this._setupHeightStyle(value);
                    }
                },
                _tabId: function(tab) {
                    return tab.attr("aria-controls") || "ui-tabs-" + getNextTabId();
                },
                _sanitizeSelector: function(hash) {
                    return hash ? hash.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : "";
                },
                refresh: function() {
                    var options = this.options, lis = this.tablist.children(":has(a[href])");
                    // get disabled tabs from class attribute from HTML
                    // this will get converted to a boolean if needed in _refresh()
                    options.disabled = $.map(lis.filter(".ui-state-disabled"), function(tab) {
                        return lis.index(tab);
                    });
                    this._processTabs();
                    // was collapsed or no tabs
                    if (options.active === false || !this.anchors.length) {
                        options.active = false;
                        this.active = $();
                    } else if (this.active.length && !$.contains(this.tablist[0], this.active[0])) {
                        // all remaining tabs are disabled
                        if (this.tabs.length === options.disabled.length) {
                            options.active = false;
                            this.active = $();
                        } else {
                            this._activate(this._findNextTab(Math.max(0, options.active - 1), false));
                        }
                    } else {
                        // make sure active index is correct
                        options.active = this.tabs.index(this.active);
                    }
                    this._refresh();
                },
                _refresh: function() {
                    this._setupDisabled(this.options.disabled);
                    this._setupEvents(this.options.event);
                    this._setupHeightStyle(this.options.heightStyle);
                    this.tabs.not(this.active).attr({
                        "aria-selected": "false",
                        tabIndex: -1
                    });
                    this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                        "aria-expanded": "false",
                        "aria-hidden": "true"
                    });
                    // Make sure one tab is in the tab order
                    if (!this.active.length) {
                        this.tabs.eq(0).attr("tabIndex", 0);
                    } else {
                        this.active.addClass("ui-tabs-active ui-state-active").attr({
                            "aria-selected": "true",
                            tabIndex: 0
                        });
                        this._getPanelForTab(this.active).show().attr({
                            "aria-expanded": "true",
                            "aria-hidden": "false"
                        });
                    }
                },
                _processTabs: function() {
                    var that = this;
                    this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist");
                    this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                        role: "tab",
                        tabIndex: -1
                    });
                    this.anchors = this.tabs.map(function() {
                        return $("a", this)[0];
                    }).addClass("ui-tabs-anchor").attr({
                        role: "presentation",
                        tabIndex: -1
                    });
                    this.panels = $();
                    this.anchors.each(function(i, anchor) {
                        var selector, panel, panelId, anchorId = $(anchor).uniqueId().attr("id"), tab = $(anchor).closest("li"), originalAriaControls = tab.attr("aria-controls");
                        // inline tab
                        if (isLocal(anchor)) {
                            selector = anchor.hash;
                            panel = that.element.find(that._sanitizeSelector(selector));
                        } else {
                            panelId = that._tabId(tab);
                            selector = "#" + panelId;
                            panel = that.element.find(selector);
                            if (!panel.length) {
                                panel = that._createPanel(panelId);
                                panel.insertAfter(that.panels[i - 1] || that.tablist);
                            }
                            panel.attr("aria-live", "polite");
                        }
                        if (panel.length) {
                            that.panels = that.panels.add(panel);
                        }
                        if (originalAriaControls) {
                            tab.data("ui-tabs-aria-controls", originalAriaControls);
                        }
                        tab.attr({
                            "aria-controls": selector.substring(1),
                            "aria-labelledby": anchorId
                        });
                        panel.attr("aria-labelledby", anchorId);
                    });
                    this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role", "tabpanel");
                },
                // allow overriding how to find the list for rare usage scenarios (#7715)
                _getList: function() {
                    return this.element.find("ol,ul").eq(0);
                },
                _createPanel: function(id) {
                    return $("<div>").attr("id", id).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", true);
                },
                _setupDisabled: function(disabled) {
                    if ($.isArray(disabled)) {
                        if (!disabled.length) {
                            disabled = false;
                        } else if (disabled.length === this.anchors.length) {
                            disabled = true;
                        }
                    }
                    // disable tabs
                    for (var i = 0, li; li = this.tabs[i]; i++) {
                        if (disabled === true || $.inArray(i, disabled) !== -1) {
                            $(li).addClass("ui-state-disabled").attr("aria-disabled", "true");
                        } else {
                            $(li).removeClass("ui-state-disabled").removeAttr("aria-disabled");
                        }
                    }
                    this.options.disabled = disabled;
                },
                _setupEvents: function(event) {
                    var events = {
                        click: function(event) {
                            event.preventDefault();
                        }
                    };
                    if (event) {
                        $.each(event.split(" "), function(index, eventName) {
                            events[eventName] = "_eventHandler";
                        });
                    }
                    this._off(this.anchors.add(this.tabs).add(this.panels));
                    this._on(this.anchors, events);
                    this._on(this.tabs, {
                        keydown: "_tabKeydown"
                    });
                    this._on(this.panels, {
                        keydown: "_panelKeydown"
                    });
                    this._focusable(this.tabs);
                    this._hoverable(this.tabs);
                },
                _setupHeightStyle: function(heightStyle) {
                    var maxHeight, parent = this.element.parent();
                    if (heightStyle === "fill") {
                        maxHeight = parent.height();
                        maxHeight -= this.element.outerHeight() - this.element.height();
                        this.element.siblings(":visible").each(function() {
                            var elem = $(this), position = elem.css("position");
                            if (position === "absolute" || position === "fixed") {
                                return;
                            }
                            maxHeight -= elem.outerHeight(true);
                        });
                        this.element.children().not(this.panels).each(function() {
                            maxHeight -= $(this).outerHeight(true);
                        });
                        this.panels.each(function() {
                            $(this).height(Math.max(0, maxHeight - $(this).innerHeight() + $(this).height()));
                        }).css("overflow", "auto");
                    } else if (heightStyle === "auto") {
                        maxHeight = 0;
                        this.panels.each(function() {
                            maxHeight = Math.max(maxHeight, $(this).height("").height());
                        }).height(maxHeight);
                    }
                },
                _eventHandler: function(event) {
                    var options = this.options, active = this.active, anchor = $(event.currentTarget), tab = anchor.closest("li"), clickedIsActive = tab[0] === active[0], collapsing = clickedIsActive && options.collapsible, toShow = collapsing ? $() : this._getPanelForTab(tab), toHide = !active.length ? $() : this._getPanelForTab(active), eventData = {
                        oldTab: active,
                        oldPanel: toHide,
                        newTab: collapsing ? $() : tab,
                        newPanel: toShow
                    };
                    event.preventDefault();
                    if (tab.hasClass("ui-state-disabled") || // tab is already loading
                    tab.hasClass("ui-tabs-loading") || // can't switch durning an animation
                    this.running || // click on active header, but not collapsible
                    clickedIsActive && !options.collapsible || // allow canceling activation
                    this._trigger("beforeActivate", event, eventData) === false) {
                        return;
                    }
                    options.active = collapsing ? false : this.tabs.index(tab);
                    this.active = clickedIsActive ? $() : tab;
                    if (this.xhr) {
                        this.xhr.abort();
                    }
                    if (!toHide.length && !toShow.length) {
                        $.error("jQuery UI Tabs: Mismatching fragment identifier.");
                    }
                    if (toShow.length) {
                        this.load(this.tabs.index(tab), event);
                    }
                    this._toggle(event, eventData);
                },
                // handles show/hide for selecting tabs
                _toggle: function(event, eventData) {
                    var that = this, toShow = eventData.newPanel, toHide = eventData.oldPanel;
                    this.running = true;
                    function complete() {
                        that.running = false;
                        that._trigger("activate", event, eventData);
                    }
                    function show() {
                        eventData.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                        if (toShow.length && that.options.show) {
                            that._show(toShow, that.options.show, complete);
                        } else {
                            toShow.show();
                            complete();
                        }
                    }
                    // start out by hiding, then showing, then completing
                    if (toHide.length && this.options.hide) {
                        this._hide(toHide, this.options.hide, function() {
                            eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                            show();
                        });
                    } else {
                        eventData.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                        toHide.hide();
                        show();
                    }
                    toHide.attr({
                        "aria-expanded": "false",
                        "aria-hidden": "true"
                    });
                    eventData.oldTab.attr("aria-selected", "false");
                    // If we're switching tabs, remove the old tab from the tab order.
                    // If we're opening from collapsed state, remove the previous tab from the tab order.
                    // If we're collapsing, then keep the collapsing tab in the tab order.
                    if (toShow.length && toHide.length) {
                        eventData.oldTab.attr("tabIndex", -1);
                    } else if (toShow.length) {
                        this.tabs.filter(function() {
                            return $(this).attr("tabIndex") === 0;
                        }).attr("tabIndex", -1);
                    }
                    toShow.attr({
                        "aria-expanded": "true",
                        "aria-hidden": "false"
                    });
                    eventData.newTab.attr({
                        "aria-selected": "true",
                        tabIndex: 0
                    });
                },
                _activate: function(index) {
                    var anchor, active = this._findActive(index);
                    // trying to activate the already active panel
                    if (active[0] === this.active[0]) {
                        return;
                    }
                    // trying to collapse, simulate a click on the current active header
                    if (!active.length) {
                        active = this.active;
                    }
                    anchor = active.find(".ui-tabs-anchor")[0];
                    this._eventHandler({
                        target: anchor,
                        currentTarget: anchor,
                        preventDefault: $.noop
                    });
                },
                _findActive: function(index) {
                    return index === false ? $() : this.tabs.eq(index);
                },
                _getIndex: function(index) {
                    // meta-function to give users option to provide a href string instead of a numerical index.
                    if (typeof index === "string") {
                        index = this.anchors.index(this.anchors.filter("[href$='" + index + "']"));
                    }
                    return index;
                },
                _destroy: function() {
                    if (this.xhr) {
                        this.xhr.abort();
                    }
                    this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
                    this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
                    this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
                    this.tabs.add(this.panels).each(function() {
                        if ($.data(this, "ui-tabs-destroy")) {
                            $(this).remove();
                        } else {
                            $(this).removeClass("ui-state-default ui-state-active ui-state-disabled " + "ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role");
                        }
                    });
                    this.tabs.each(function() {
                        var li = $(this), prev = li.data("ui-tabs-aria-controls");
                        if (prev) {
                            li.attr("aria-controls", prev).removeData("ui-tabs-aria-controls");
                        } else {
                            li.removeAttr("aria-controls");
                        }
                    });
                    this.panels.show();
                    if (this.options.heightStyle !== "content") {
                        this.panels.css("height", "");
                    }
                },
                enable: function(index) {
                    var disabled = this.options.disabled;
                    if (disabled === false) {
                        return;
                    }
                    if (index === undefined) {
                        disabled = false;
                    } else {
                        index = this._getIndex(index);
                        if ($.isArray(disabled)) {
                            disabled = $.map(disabled, function(num) {
                                return num !== index ? num : null;
                            });
                        } else {
                            disabled = $.map(this.tabs, function(li, num) {
                                return num !== index ? num : null;
                            });
                        }
                    }
                    this._setupDisabled(disabled);
                },
                disable: function(index) {
                    var disabled = this.options.disabled;
                    if (disabled === true) {
                        return;
                    }
                    if (index === undefined) {
                        disabled = true;
                    } else {
                        index = this._getIndex(index);
                        if ($.inArray(index, disabled) !== -1) {
                            return;
                        }
                        if ($.isArray(disabled)) {
                            disabled = $.merge([ index ], disabled).sort();
                        } else {
                            disabled = [ index ];
                        }
                    }
                    this._setupDisabled(disabled);
                },
                load: function(index, event) {
                    index = this._getIndex(index);
                    var that = this, tab = this.tabs.eq(index), anchor = tab.find(".ui-tabs-anchor"), panel = this._getPanelForTab(tab), eventData = {
                        tab: tab,
                        panel: panel
                    };
                    // not remote
                    if (isLocal(anchor[0])) {
                        return;
                    }
                    this.xhr = $.ajax(this._ajaxSettings(anchor, event, eventData));
                    // support: jQuery <1.8
                    // jQuery <1.8 returns false if the request is canceled in beforeSend,
                    // but as of 1.8, $.ajax() always returns a jqXHR object.
                    if (this.xhr && this.xhr.statusText !== "canceled") {
                        tab.addClass("ui-tabs-loading");
                        panel.attr("aria-busy", "true");
                        this.xhr.success(function(response) {
                            // support: jQuery <1.8
                            // http://bugs.jquery.com/ticket/11778
                            setTimeout(function() {
                                panel.html(response);
                                that._trigger("load", event, eventData);
                            }, 1);
                        }).complete(function(jqXHR, status) {
                            // support: jQuery <1.8
                            // http://bugs.jquery.com/ticket/11778
                            setTimeout(function() {
                                if (status === "abort") {
                                    that.panels.stop(false, true);
                                }
                                tab.removeClass("ui-tabs-loading");
                                panel.removeAttr("aria-busy");
                                if (jqXHR === that.xhr) {
                                    delete that.xhr;
                                }
                            }, 1);
                        });
                    }
                },
                _ajaxSettings: function(anchor, event, eventData) {
                    var that = this;
                    return {
                        url: anchor.attr("href"),
                        beforeSend: function(jqXHR, settings) {
                            return that._trigger("beforeLoad", event, $.extend({
                                jqXHR: jqXHR,
                                ajaxSettings: settings
                            }, eventData));
                        }
                    };
                },
                _getPanelForTab: function(tab) {
                    var id = $(tab).attr("aria-controls");
                    return this.element.find(this._sanitizeSelector("#" + id));
                }
            });
        })(jQuery);
        (function($) {
            var increments = 0;
            function addDescribedBy(elem, id) {
                var describedby = (elem.attr("aria-describedby") || "").split(/\s+/);
                describedby.push(id);
                elem.data("ui-tooltip-id", id).attr("aria-describedby", $.trim(describedby.join(" ")));
            }
            function removeDescribedBy(elem) {
                var id = elem.data("ui-tooltip-id"), describedby = (elem.attr("aria-describedby") || "").split(/\s+/), index = $.inArray(id, describedby);
                if (index !== -1) {
                    describedby.splice(index, 1);
                }
                elem.removeData("ui-tooltip-id");
                describedby = $.trim(describedby.join(" "));
                if (describedby) {
                    elem.attr("aria-describedby", describedby);
                } else {
                    elem.removeAttr("aria-describedby");
                }
            }
            $.widget("ui.tooltip", {
                version: "1.10.2",
                options: {
                    content: function() {
                        // support: IE<9, Opera in jQuery <1.7
                        // .text() can't accept undefined, so coerce to a string
                        var title = $(this).attr("title") || "";
                        // Escape title, since we're going from an attribute to raw HTML
                        return $("<a>").text(title).html();
                    },
                    hide: true,
                    // Disabled elements have inconsistent behavior across browsers (#8661)
                    items: "[title]:not([disabled])",
                    position: {
                        my: "left top+15",
                        at: "left bottom",
                        collision: "flipfit flip"
                    },
                    show: true,
                    tooltipClass: null,
                    track: false,
                    // callbacks
                    close: null,
                    open: null
                },
                _create: function() {
                    this._on({
                        mouseover: "open",
                        focusin: "open"
                    });
                    // IDs of generated tooltips, needed for destroy
                    this.tooltips = {};
                    // IDs of parent tooltips where we removed the title attribute
                    this.parents = {};
                    if (this.options.disabled) {
                        this._disable();
                    }
                },
                _setOption: function(key, value) {
                    var that = this;
                    if (key === "disabled") {
                        this[value ? "_disable" : "_enable"]();
                        this.options[key] = value;
                        // disable element style changes
                        return;
                    }
                    this._super(key, value);
                    if (key === "content") {
                        $.each(this.tooltips, function(id, element) {
                            that._updateContent(element);
                        });
                    }
                },
                _disable: function() {
                    var that = this;
                    // close open tooltips
                    $.each(this.tooltips, function(id, element) {
                        var event = $.Event("blur");
                        event.target = event.currentTarget = element[0];
                        that.close(event, true);
                    });
                    // remove title attributes to prevent native tooltips
                    this.element.find(this.options.items).addBack().each(function() {
                        var element = $(this);
                        if (element.is("[title]")) {
                            element.data("ui-tooltip-title", element.attr("title")).attr("title", "");
                        }
                    });
                },
                _enable: function() {
                    // restore title attributes
                    this.element.find(this.options.items).addBack().each(function() {
                        var element = $(this);
                        if (element.data("ui-tooltip-title")) {
                            element.attr("title", element.data("ui-tooltip-title"));
                        }
                    });
                },
                open: function(event) {
                    var that = this, target = $(event ? event.target : this.element).closest(this.options.items);
                    // No element to show a tooltip for or the tooltip is already open
                    if (!target.length || target.data("ui-tooltip-id")) {
                        return;
                    }
                    if (target.attr("title")) {
                        target.data("ui-tooltip-title", target.attr("title"));
                    }
                    target.data("ui-tooltip-open", true);
                    // kill parent tooltips, custom or native, for hover
                    if (event && event.type === "mouseover") {
                        target.parents().each(function() {
                            var parent = $(this), blurEvent;
                            if (parent.data("ui-tooltip-open")) {
                                blurEvent = $.Event("blur");
                                blurEvent.target = blurEvent.currentTarget = this;
                                that.close(blurEvent, true);
                            }
                            if (parent.attr("title")) {
                                parent.uniqueId();
                                that.parents[this.id] = {
                                    element: this,
                                    title: parent.attr("title")
                                };
                                parent.attr("title", "");
                            }
                        });
                    }
                    this._updateContent(target, event);
                },
                _updateContent: function(target, event) {
                    var content, contentOption = this.options.content, that = this, eventType = event ? event.type : null;
                    if (typeof contentOption === "string") {
                        return this._open(event, target, contentOption);
                    }
                    content = contentOption.call(target[0], function(response) {
                        // ignore async response if tooltip was closed already
                        if (!target.data("ui-tooltip-open")) {
                            return;
                        }
                        // IE may instantly serve a cached response for ajax requests
                        // delay this call to _open so the other call to _open runs first
                        that._delay(function() {
                            // jQuery creates a special event for focusin when it doesn't
                            // exist natively. To improve performance, the native event
                            // object is reused and the type is changed. Therefore, we can't
                            // rely on the type being correct after the event finished
                            // bubbling, so we set it back to the previous value. (#8740)
                            if (event) {
                                event.type = eventType;
                            }
                            this._open(event, target, response);
                        });
                    });
                    if (content) {
                        this._open(event, target, content);
                    }
                },
                _open: function(event, target, content) {
                    var tooltip, events, delayedShow, positionOption = $.extend({}, this.options.position);
                    if (!content) {
                        return;
                    }
                    // Content can be updated multiple times. If the tooltip already
                    // exists, then just update the content and bail.
                    tooltip = this._find(target);
                    if (tooltip.length) {
                        tooltip.find(".ui-tooltip-content").html(content);
                        return;
                    }
                    // if we have a title, clear it to prevent the native tooltip
                    // we have to check first to avoid defining a title if none exists
                    // (we don't want to cause an element to start matching [title])
                    //
                    // We use removeAttr only for key events, to allow IE to export the correct
                    // accessible attributes. For mouse events, set to empty string to avoid
                    // native tooltip showing up (happens only when removing inside mouseover).
                    if (target.is("[title]")) {
                        if (event && event.type === "mouseover") {
                            target.attr("title", "");
                        } else {
                            target.removeAttr("title");
                        }
                    }
                    tooltip = this._tooltip(target);
                    addDescribedBy(target, tooltip.attr("id"));
                    tooltip.find(".ui-tooltip-content").html(content);
                    function position(event) {
                        positionOption.of = event;
                        if (tooltip.is(":hidden")) {
                            return;
                        }
                        tooltip.position(positionOption);
                    }
                    if (this.options.track && event && /^mouse/.test(event.type)) {
                        this._on(this.document, {
                            mousemove: position
                        });
                        // trigger once to override element-relative positioning
                        position(event);
                    } else {
                        tooltip.position($.extend({
                            of: target
                        }, this.options.position));
                    }
                    tooltip.hide();
                    this._show(tooltip, this.options.show);
                    // Handle tracking tooltips that are shown with a delay (#8644). As soon
                    // as the tooltip is visible, position the tooltip using the most recent
                    // event.
                    if (this.options.show && this.options.show.delay) {
                        delayedShow = this.delayedShow = setInterval(function() {
                            if (tooltip.is(":visible")) {
                                position(positionOption.of);
                                clearInterval(delayedShow);
                            }
                        }, $.fx.interval);
                    }
                    this._trigger("open", event, {
                        tooltip: tooltip
                    });
                    events = {
                        keyup: function(event) {
                            if (event.keyCode === $.ui.keyCode.ESCAPE) {
                                var fakeEvent = $.Event(event);
                                fakeEvent.currentTarget = target[0];
                                this.close(fakeEvent, true);
                            }
                        },
                        remove: function() {
                            this._removeTooltip(tooltip);
                        }
                    };
                    if (!event || event.type === "mouseover") {
                        events.mouseleave = "close";
                    }
                    if (!event || event.type === "focusin") {
                        events.focusout = "close";
                    }
                    this._on(true, target, events);
                },
                close: function(event) {
                    var that = this, target = $(event ? event.currentTarget : this.element), tooltip = this._find(target);
                    // disabling closes the tooltip, so we need to track when we're closing
                    // to avoid an infinite loop in case the tooltip becomes disabled on close
                    if (this.closing) {
                        return;
                    }
                    // Clear the interval for delayed tracking tooltips
                    clearInterval(this.delayedShow);
                    // only set title if we had one before (see comment in _open())
                    if (target.data("ui-tooltip-title")) {
                        target.attr("title", target.data("ui-tooltip-title"));
                    }
                    removeDescribedBy(target);
                    tooltip.stop(true);
                    this._hide(tooltip, this.options.hide, function() {
                        that._removeTooltip($(this));
                    });
                    target.removeData("ui-tooltip-open");
                    this._off(target, "mouseleave focusout keyup");
                    // Remove 'remove' binding only on delegated targets
                    if (target[0] !== this.element[0]) {
                        this._off(target, "remove");
                    }
                    this._off(this.document, "mousemove");
                    if (event && event.type === "mouseleave") {
                        $.each(this.parents, function(id, parent) {
                            $(parent.element).attr("title", parent.title);
                            delete that.parents[id];
                        });
                    }
                    this.closing = true;
                    this._trigger("close", event, {
                        tooltip: tooltip
                    });
                    this.closing = false;
                },
                _tooltip: function(element) {
                    var id = "ui-tooltip-" + increments++, tooltip = $("<div>").attr({
                        id: id,
                        role: "tooltip"
                    }).addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " + (this.options.tooltipClass || ""));
                    $("<div>").addClass("ui-tooltip-content").appendTo(tooltip);
                    tooltip.appendTo(this.document[0].body);
                    this.tooltips[id] = element;
                    return tooltip;
                },
                _find: function(target) {
                    var id = target.data("ui-tooltip-id");
                    return id ? $("#" + id) : $();
                },
                _removeTooltip: function(tooltip) {
                    tooltip.remove();
                    delete this.tooltips[tooltip.attr("id")];
                },
                _destroy: function() {
                    var that = this;
                    // close open tooltips
                    $.each(this.tooltips, function(id, element) {
                        // Delegate to close method to handle common cleanup
                        var event = $.Event("blur");
                        event.target = event.currentTarget = element[0];
                        that.close(event, true);
                        // Remove immediately; destroying an open tooltip doesn't use the
                        // hide animation
                        $("#" + id).remove();
                        // Restore the title
                        if (element.data("ui-tooltip-title")) {
                            element.attr("title", element.data("ui-tooltip-title"));
                            element.removeData("ui-tooltip-title");
                        }
                    });
                }
            });
        })(jQuery);
    };
});

define("ucloud/plugins/1.3.3/jquery-cookie-debug", [], function(require, exports, module) {
    return function($) {
        /*!
         * jQuery Cookie Plugin v1.3.1
         * https://github.com/carhartl/jquery-cookie
         *
         * Copyright 2013 Klaus Hartl
         * Released under the MIT license
         */
        var pluses = /\+/g;
        function raw(s) {
            return s;
        }
        function decoded(s) {
            return decodeURIComponent(s.replace(pluses, " "));
        }
        function converted(s) {
            if (s.indexOf('"') === 0) {
                // This is a quoted cookie as according to RFC2068, unescape
                s = s.slice(1, -1).replace(/\\"/g, '"').replace(/\\\\/g, "\\");
            }
            try {
                return config.json ? JSON.parse(s) : s;
            } catch (er) {}
        }
        var config = $.cookie = function(key, value, options) {
            // write
            if (value !== undefined) {
                options = $.extend({}, config.defaults, options);
                if (typeof options.expires === "number") {
                    var days = options.expires, t = options.expires = new Date();
                    t.setDate(t.getDate() + days);
                }
                value = config.json ? JSON.stringify(value) : String(value);
                return document.cookie = [ config.raw ? key : encodeURIComponent(key), "=", config.raw ? value : encodeURIComponent(value), options.expires ? "; expires=" + options.expires.toUTCString() : "", // use expires attribute, max-age is not supported by IE
                options.path ? "; path=" + options.path : "", options.domain ? "; domain=" + options.domain : "", options.secure ? "; secure" : "" ].join("");
            }
            // read
            var decode = config.raw ? raw : decoded;
            var cookies = document.cookie.split("; ");
            var result = key ? undefined : {};
            for (var i = 0, l = cookies.length; i < l; i++) {
                var parts = cookies[i].split("=");
                var name = decode(parts.shift());
                var cookie = decode(parts.join("="));
                if (key && key === name) {
                    result = converted(cookie);
                    break;
                }
                if (!key) {
                    result[name] = converted(cookie);
                }
            }
            return result;
        };
        config.defaults = {};
        $.removeCookie = function(key, options) {
            if ($.cookie(key) !== undefined) {
                // Must not alter options, thus extending a fresh object...
                $.cookie(key, "", $.extend({}, options, {
                    expires: -1
                }));
                return true;
            }
            return false;
        };
    };
});

/*
 * jQuery UI Slider Access
 * By: Trent Richardson [http://trentrichardson.com]
 * Version 0.3
 * Last Modified: 10/20/2012
 * 
 * Copyright 2011 Trent Richardson
 * Dual licensed under the MIT and GPL licenses.
 * http://trentrichardson.com/Impromptu/GPL-LICENSE.txt
 * http://trentrichardson.com/Impromptu/MIT-LICENSE.txt
 * 
 */
define("ucloud/plugins/1.3.3/jquery-ui-slideraccess-debug", [], function() {
    return function($) {
        $.fn.extend({
            sliderAccess: function(options) {
                options = options || {};
                options.touchonly = options.touchonly !== undefined ? options.touchonly : true;
                // by default only show it if touch device
                if (options.touchonly === true && !("ontouchend" in document)) return $(this);
                return $(this).each(function(i, obj) {
                    var $t = $(this), o = $.extend({}, {
                        where: "after",
                        step: $t.slider("option", "step"),
                        upIcon: "ui-icon-plus",
                        downIcon: "ui-icon-minus",
                        text: false,
                        upText: "+",
                        downText: "-",
                        buttonset: true,
                        buttonsetTag: "span",
                        isRTL: false
                    }, options), $buttons = $("<" + o.buttonsetTag + ' class="ui-slider-access">' + '<button data-icon="' + o.downIcon + '" data-step="' + (o.isRTL ? o.step : o.step * -1) + '">' + o.downText + "</button>" + '<button data-icon="' + o.upIcon + '" data-step="' + (o.isRTL ? o.step * -1 : o.step) + '">' + o.upText + "</button>" + "</" + o.buttonsetTag + ">");
                    $buttons.children("button").each(function(j, jobj) {
                        var $jt = $(this);
                        $jt.button({
                            text: o.text,
                            icons: {
                                primary: $jt.data("icon")
                            }
                        }).click(function(e) {
                            var step = $jt.data("step"), curr = $t.slider("value"), newval = curr += step * 1, minval = $t.slider("option", "min"), maxval = $t.slider("option", "max"), slidee = $t.slider("option", "slide") || function() {}, stope = $t.slider("option", "stop") || function() {};
                            e.preventDefault();
                            if (newval < minval || newval > maxval) return;
                            $t.slider("value", newval);
                            slidee.call($t, null, {
                                value: newval
                            });
                            stope.call($t, null, {
                                value: newval
                            });
                        });
                    });
                    // before or after					
                    $t[o.where]($buttons);
                    if (o.buttonset) {
                        $buttons.removeClass("ui-corner-right").removeClass("ui-corner-left").buttonset();
                        $buttons.eq(0).addClass("ui-corner-left");
                        $buttons.eq(1).addClass("ui-corner-right");
                    }
                    // adjust the width so we don't break the original layout
                    var bOuterWidth = $buttons.css({
                        marginLeft: o.where == "after" && !o.isRTL || o.where == "before" && o.isRTL ? 10 : 0,
                        marginRight: o.where == "before" && !o.isRTL || o.where == "after" && o.isRTL ? 10 : 0
                    }).outerWidth(true) + 5;
                    var tOuterWidth = $t.outerWidth(true);
                    $t.css("display", "inline-block").width(tOuterWidth - bOuterWidth);
                });
            }
        });
    };
});

/*
 Copyright 2012 Igor Vaynberg

 Version: 3.1 Timestamp: Tue Aug 14 09:05:17 PDT 2012

 Licensed under the Apache License, Version 2.0 (the "License"); you may not use this work except in
 compliance with the License. You may obtain a copy of the License in the LICENSE file, or at:

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software distributed under the License is
 distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and limitations under the License.
 */
define("ucloud/plugins/1.3.3/select2-debug", [], function() {
    return function($) {
        var jQuery = $;
        (function($) {
            if (typeof $.fn.each2 == "undefined") {
                $.fn.extend({
                    /*
                     * 4-10 times faster .each replacement
                     * use it carefully, as it overrides jQuery context of element on each iteration
                     */
                    each2: function(c) {
                        var j = $([ 0 ]), i = -1, l = this.length;
                        while (++i < l && (j.context = j[0] = this[i]) && c.call(j[0], i, j) !== false) ;
                        return this;
                    }
                });
            }
        })(jQuery);
        (function($, undefined) {
            "use strict";
            /*global document, window, jQuery, console */
            if (window.Select2 !== undefined) {
                return;
            }
            var KEY, AbstractSelect2, SingleSelect2, MultiSelect2, nextUid, sizer;
            KEY = {
                TAB: 9,
                ENTER: 13,
                ESC: 27,
                SPACE: 32,
                LEFT: 37,
                UP: 38,
                RIGHT: 39,
                DOWN: 40,
                SHIFT: 16,
                CTRL: 17,
                ALT: 18,
                PAGE_UP: 33,
                PAGE_DOWN: 34,
                HOME: 36,
                END: 35,
                BACKSPACE: 8,
                DELETE: 46,
                isArrow: function(k) {
                    k = k.which ? k.which : k;
                    switch (k) {
                      case KEY.LEFT:
                      case KEY.RIGHT:
                      case KEY.UP:
                      case KEY.DOWN:
                        return true;
                    }
                    return false;
                },
                isControl: function(e) {
                    var k = e.which;
                    switch (k) {
                      case KEY.SHIFT:
                      case KEY.CTRL:
                      case KEY.ALT:
                        return true;
                    }
                    if (e.metaKey) return true;
                    return false;
                },
                isFunctionKey: function(k) {
                    k = k.which ? k.which : k;
                    return k >= 112 && k <= 123;
                }
            };
            nextUid = function() {
                var counter = 1;
                return function() {
                    return counter++;
                };
            }();
            function escapeMarkup(markup) {
                if (markup && typeof markup === "string") {
                    return markup.replace(/&/g, "&amp;");
                } else {
                    return markup;
                }
            }
            function indexOf(value, array) {
                var i = 0, l = array.length, v;
                if (typeof value === "undefined") {
                    return -1;
                }
                if (value.constructor === String) {
                    for (;i < l; i = i + 1) {
                        if (value.localeCompare(array[i]) === 0) {
                            return i;
                        }
                    }
                } else {
                    for (;i < l; i = i + 1) {
                        v = array[i];
                        if (v.constructor === String) {
                            if (v.localeCompare(value) === 0) return i;
                        } else {
                            if (v === value) return i;
                        }
                    }
                }
                return -1;
            }
            /**
             * Compares equality of a and b taking into account that a and b may be strings, in which case localeCompare is used
             * @param a
             * @param b
             */
            function equal(a, b) {
                if (a === b) return true;
                if (a === undefined || b === undefined) return false;
                if (a === null || b === null) return false;
                if (a.constructor === String) return a.localeCompare(b) === 0;
                if (b.constructor === String) return b.localeCompare(a) === 0;
                return false;
            }
            /**
             * Splits the string into an array of values, trimming each value. An empty array is returned for nulls or empty
             * strings
             * @param string
             * @param separator
             */
            function splitVal(string, separator) {
                var val, i, l;
                if (string === null || string.length < 1) return [];
                val = string.split(separator);
                for (i = 0, l = val.length; i < l; i = i + 1) val[i] = $.trim(val[i]);
                return val;
            }
            function getSideBorderPadding(element) {
                return element.outerWidth() - element.width();
            }
            function installKeyUpChangeEvent(element) {
                var key = "keyup-change-value";
                element.bind("keydown", function() {
                    if ($.data(element, key) === undefined) {
                        $.data(element, key, element.val());
                    }
                });
                element.bind("keyup", function() {
                    var val = $.data(element, key);
                    if (val !== undefined && element.val() !== val) {
                        $.removeData(element, key);
                        element.trigger("keyup-change");
                    }
                });
            }
            $(document).delegate("*", "mousemove", function(e) {
                $.data(document, "select2-lastpos", {
                    x: e.pageX,
                    y: e.pageY
                });
            });
            /**
             * filters mouse events so an event is fired only if the mouse moved.
             *
             * filters out mouse events that occur when mouse is stationary but
             * the elements under the pointer are scrolled.
             */
            function installFilteredMouseMove(element) {
                element.bind("mousemove", function(e) {
                    var lastpos = $.data(document, "select2-lastpos");
                    if (lastpos === undefined || lastpos.x !== e.pageX || lastpos.y !== e.pageY) {
                        $(e.target).trigger("mousemove-filtered", e);
                    }
                });
            }
            /**
             * Debounces a function. Returns a function that calls the original fn function only if no invocations have been made
             * within the last quietMillis milliseconds.
             *
             * @param quietMillis number of milliseconds to wait before invoking fn
             * @param fn function to be debounced
             * @return debounced version of fn
             */
            function debounce(quietMillis, fn) {
                var timeout;
                return function() {
                    window.clearTimeout(timeout);
                    timeout = window.setTimeout(fn, quietMillis);
                };
            }
            /**
             * A simple implementation of a thunk
             * @param formula function used to lazily initialize the thunk
             * @return {Function}
             */
            function thunk(formula) {
                var evaluated = false, value;
                return function() {
                    if (evaluated === false) {
                        value = formula();
                        evaluated = true;
                    }
                    return value;
                };
            }
            function installDebouncedScroll(threshold, element) {
                var notify = debounce(threshold, function(e) {
                    element.trigger("scroll-debounced", e);
                });
                element.bind("scroll", function(e) {
                    if (indexOf(e.target, element.get()) >= 0) notify(e);
                });
            }
            function killEvent(event) {
                event.preventDefault();
                event.stopPropagation();
            }
            function measureTextWidth(e) {
                if (!sizer) {
                    var style = e[0].currentStyle || window.getComputedStyle(e[0], null);
                    sizer = $("<div></div>").css({
                        position: "absolute",
                        left: "-10000px",
                        top: "-10000px",
                        display: "none",
                        fontSize: style.fontSize,
                        fontFamily: style.fontFamily,
                        fontStyle: style.fontStyle,
                        fontWeight: style.fontWeight,
                        letterSpacing: style.letterSpacing,
                        textTransform: style.textTransform,
                        whiteSpace: "nowrap"
                    });
                    $("body").append(sizer);
                }
                sizer.text(e.val());
                return sizer.width();
            }
            function markMatch(text, term, markup) {
                var match = text.toUpperCase().indexOf(term.toUpperCase()), tl = term.length;
                if (match < 0) {
                    markup.push(text);
                    return;
                }
                markup.push(text.substring(0, match));
                markup.push("<span class='select2-match'>");
                markup.push(text.substring(match, match + tl));
                markup.push("</span>");
                markup.push(text.substring(match + tl, text.length));
            }
            /**
             * Produces an ajax-based query function
             *
             * @param options object containing configuration paramters
             * @param options.transport function that will be used to execute the ajax request. must be compatible with parameters supported by $.ajax
             * @param options.url url for the data
             * @param options.data a function(searchTerm, pageNumber, context) that should return an object containing query string parameters for the above url.
             * @param options.dataType request data type: ajax, jsonp, other datatatypes supported by jQuery's $.ajax function or the transport function if specified
             * @param options.traditional a boolean flag that should be true if you wish to use the traditional style of param serialization for the ajax request
             * @param options.quietMillis (optional) milliseconds to wait before making the ajaxRequest, helps debounce the ajax function if invoked too often
             * @param options.results a function(remoteData, pageNumber) that converts data returned form the remote request to the format expected by Select2.
             *      The expected format is an object containing the following keys:
             *      results array of objects that will be used as choices
             *      more (optional) boolean indicating whether there are more results available
             *      Example: {results:[{id:1, text:'Red'},{id:2, text:'Blue'}], more:true}
             */
            function ajax(options) {
                var timeout, // current scheduled but not yet executed request
                requestSequence = 0, // sequence used to drop out-of-order responses
                handler = null, quietMillis = options.quietMillis || 100;
                return function(query) {
                    window.clearTimeout(timeout);
                    timeout = window.setTimeout(function() {
                        requestSequence += 1;
                        // increment the sequence
                        var requestNumber = requestSequence, // this request's sequence number
                        data = options.data, // ajax data function
                        transport = options.transport || $.ajax, traditional = options.traditional || false, type = options.type || "GET";
                        // set type of request (GET or POST)
                        data = data.call(this, query.term, query.page, query.context);
                        if (null !== handler) {
                            handler.abort();
                        }
                        handler = transport.call(null, {
                            url: options.url,
                            dataType: options.dataType,
                            data: data,
                            type: type,
                            traditional: traditional,
                            success: function(data) {
                                if (requestNumber < requestSequence) {
                                    return;
                                }
                                // TODO 3.0 - replace query.page with query so users have access to term, page, etc.
                                var results = options.results(data, query.page);
                                query.callback(results);
                            }
                        });
                    }, quietMillis);
                };
            }
            /**
             * Produces a query function that works with a local array
             *
             * @param options object containing configuration parameters. The options parameter can either be an array or an
             * object.
             *
             * If the array form is used it is assumed that it contains objects with 'id' and 'text' keys.
             *
             * If the object form is used ti is assumed that it contains 'data' and 'text' keys. The 'data' key should contain
             * an array of objects that will be used as choices. These objects must contain at least an 'id' key. The 'text'
             * key can either be a String in which case it is expected that each element in the 'data' array has a key with the
             * value of 'text' which will be used to match choices. Alternatively, text can be a function(item) that can extract
             * the text.
             */
            function local(options) {
                var data = options, // data elements
                dataText, text = function(item) {
                    return "" + item.text;
                };
                // function used to retrieve the text portion of a data item that is matched against the search
                if (!$.isArray(data)) {
                    text = data.text;
                    // if text is not a function we assume it to be a key name
                    if (!$.isFunction(text)) {
                        dataText = data.text;
                        // we need to store this in a separate variable because in the next step data gets reset and data.text is no longer available
                        text = function(item) {
                            return item[dataText];
                        };
                    }
                    data = data.results;
                }
                return function(query) {
                    var t = query.term, filtered = {};
                    if (t === "") {
                        query.callback({
                            results: data
                        });
                        return;
                    }
                    filtered.results = $(data).filter(function() {
                        return query.matcher(t, text(this));
                    }).get();
                    query.callback(filtered);
                };
            }
            // TODO javadoc
            function tags(data) {
                // TODO even for a function we should probably return a wrapper that does the same object/string check as
                // the function for arrays. otherwise only functions that return objects are supported.
                if ($.isFunction(data)) {
                    return data;
                }
                // if not a function we assume it to be an array
                return function(query) {
                    var t = query.term, filtered = {
                        results: []
                    };
                    $(data).each(function() {
                        var isObject = this.text !== undefined, text = isObject ? this.text : this;
                        if (t === "" || query.matcher(t, text)) {
                            filtered.results.push(isObject ? this : {
                                id: this,
                                text: this
                            });
                        }
                    });
                    query.callback(filtered);
                };
            }
            /**
             * Checks if the formatter function should be used.
             *
             * Throws an error if it is not a function. Returns true if it should be used,
             * false if no formatting should be performed.
             *
             * @param formatter
             */
            function checkFormatter(formatter, formatterName) {
                if ($.isFunction(formatter)) return true;
                if (!formatter) return false;
                throw new Error("formatterName must be a function or a falsy value");
            }
            function evaluate(val) {
                return $.isFunction(val) ? val() : val;
            }
            function countResults(results) {
                var count = 0;
                $.each(results, function(i, item) {
                    if (item.children) {
                        count += countResults(item.children);
                    } else {
                        count++;
                    }
                });
                return count;
            }
            /**
             * Default tokenizer. This function uses breaks the input on substring match of any string from the
             * opts.tokenSeparators array and uses opts.createSearchChoice to create the choice object. Both of those
             * two options have to be defined in order for the tokenizer to work.
             *
             * @param input text user has typed so far or pasted into the search field
             * @param selection currently selected choices
             * @param selectCallback function(choice) callback tho add the choice to selection
             * @param opts select2's opts
             * @return undefined/null to leave the current input unchanged, or a string to change the input to the returned value
             */
            function defaultTokenizer(input, selection, selectCallback, opts) {
                var original = input, // store the original so we can compare and know if we need to tell the search to update its text
                dupe = false, // check for whether a token we extracted represents a duplicate selected choice
                token, // token
                index, // position at which the separator was found
                i, l, // looping variables
                separator;
                // the matched separator
                if (!opts.createSearchChoice || !opts.tokenSeparators || opts.tokenSeparators.length < 1) return undefined;
                while (true) {
                    index = -1;
                    for (i = 0, l = opts.tokenSeparators.length; i < l; i++) {
                        separator = opts.tokenSeparators[i];
                        index = input.indexOf(separator);
                        if (index >= 0) break;
                    }
                    if (index < 0) break;
                    // did not find any token separator in the input string, bail
                    token = input.substring(0, index);
                    input = input.substring(index + separator.length);
                    if (token.length > 0) {
                        token = opts.createSearchChoice(token, selection);
                        if (token !== undefined && token !== null && opts.id(token) !== undefined && opts.id(token) !== null) {
                            dupe = false;
                            for (i = 0, l = selection.length; i < l; i++) {
                                if (equal(opts.id(token), opts.id(selection[i]))) {
                                    dupe = true;
                                    break;
                                }
                            }
                            if (!dupe) selectCallback(token);
                        }
                    }
                }
                if (original.localeCompare(input) != 0) return input;
            }
            /**
             * blurs any Select2 container that has focus when an element outside them was clicked or received focus
             *
             * also takes care of clicks on label tags that point to the source element
             */
            $(document).ready(function() {
                $(document).delegate("*", "mousedown touchend", function(e) {
                    var target = $(e.target).closest("div.select2-container").get(0), attr;
                    if (target) {
                        $(document).find("div.select2-container-active").each(function() {
                            if (this !== target) $(this).data("select2").blur();
                        });
                    } else {
                        target = $(e.target).closest("div.select2-drop").get(0);
                        $(document).find("div.select2-drop-active").each(function() {
                            if (this !== target) $(this).data("select2").blur();
                        });
                    }
                    target = $(e.target);
                    attr = target.attr("for");
                    if ("LABEL" === e.target.tagName && attr && attr.length > 0) {
                        target = $("#" + attr);
                        target = target.data("select2");
                        if (target !== undefined) {
                            target.focus();
                            e.preventDefault();
                        }
                    }
                });
            });
            /**
             * Creates a new class
             *
             * @param superClass
             * @param methods
             */
            function clazz(SuperClass, methods) {
                var constructor = function() {};
                constructor.prototype = new SuperClass();
                constructor.prototype.constructor = constructor;
                constructor.prototype.parent = SuperClass.prototype;
                constructor.prototype = $.extend(constructor.prototype, methods);
                return constructor;
            }
            AbstractSelect2 = clazz(Object, {
                // abstract
                bind: function(func) {
                    var self = this;
                    return function() {
                        func.apply(self, arguments);
                    };
                },
                // abstract
                init: function(opts) {
                    var results, search, resultsSelector = ".select2-results";
                    // prepare options
                    this.opts = opts = this.prepareOpts(opts);
                    this.id = opts.id;
                    // destroy if called on an existing component
                    if (opts.element.data("select2") !== undefined && opts.element.data("select2") !== null) {
                        this.destroy();
                    }
                    this.enabled = true;
                    this.container = this.createContainer();
                    this.containerId = "s2id" + nextUid();
                    this.container.attr("id", this.containerId);
                    // cache the body so future lookups are cheap
                    this.body = thunk(function() {
                        return opts.element.closest("body");
                    });
                    if (opts.element.attr("class") !== undefined) {
                        this.container.addClass(opts.element.attr("class"));
                    }
                    this.container.css(evaluate(opts.containerCss));
                    this.container.addClass(evaluate(opts.containerCssClass));
                    // swap container for the element
                    this.opts.element.data("select2", this).hide().before(this.container);
                    this.container.data("select2", this);
                    this.dropdown = this.container.find(".select2-drop");
                    this.dropdown.addClass(evaluate(opts.dropdownCssClass));
                    this.dropdown.data("select2", this);
                    this.results = results = this.container.find(resultsSelector);
                    this.search = search = this.container.find("input.select2-input");
                    search.attr("tabIndex", this.opts.element.attr("tabIndex"));
                    this.resultsPage = 0;
                    this.context = null;
                    // initialize the container
                    this.initContainer();
                    this.initContainerWidth();
                    installFilteredMouseMove(this.results);
                    this.dropdown.delegate(resultsSelector, "mousemove-filtered", this.bind(this.highlightUnderEvent));
                    installDebouncedScroll(80, this.results);
                    this.dropdown.delegate(resultsSelector, "scroll-debounced", this.bind(this.loadMoreIfNeeded));
                    // if jquery.mousewheel plugin is installed we can prevent out-of-bounds scrolling of results via mousewheel
                    if ($.fn.mousewheel) {
                        results.mousewheel(function(e, delta, deltaX, deltaY) {
                            var top = results.scrollTop(), height;
                            if (deltaY > 0 && top - deltaY <= 0) {
                                results.scrollTop(0);
                                killEvent(e);
                            } else if (deltaY < 0 && results.get(0).scrollHeight - results.scrollTop() + deltaY <= results.height()) {
                                results.scrollTop(results.get(0).scrollHeight - results.height());
                                killEvent(e);
                            }
                        });
                    }
                    installKeyUpChangeEvent(search);
                    search.bind("keyup-change", this.bind(this.updateResults));
                    search.bind("focus", function() {
                        search.addClass("select2-focused");
                        if (search.val() === " ") search.val("");
                    });
                    search.bind("blur", function() {
                        search.removeClass("select2-focused");
                    });
                    this.dropdown.delegate(resultsSelector, "mouseup", this.bind(function(e) {
                        if ($(e.target).closest(".select2-result-selectable:not(.select2-disabled)").length > 0) {
                            this.highlightUnderEvent(e);
                            this.selectHighlighted(e);
                        } else {
                            this.focusSearch();
                        }
                        killEvent(e);
                    }));
                    // trap all mouse events from leaving the dropdown. sometimes there may be a modal that is listening
                    // for mouse events outside of itself so it can close itself. since the dropdown is now outside the select2's
                    // dom it will trigger the popup close, which is not what we want
                    this.dropdown.bind("click mouseup mousedown", function(e) {
                        e.stopPropagation();
                    });
                    if ($.isFunction(this.opts.initSelection)) {
                        // initialize selection based on the current value of the source element
                        this.initSelection();
                        // if the user has provided a function that can set selection based on the value of the source element
                        // we monitor the change event on the element and trigger it, allowing for two way synchronization
                        this.monitorSource();
                    }
                    if (opts.element.is(":disabled") || opts.element.is("[readonly='readonly']")) this.disable();
                },
                // abstract
                destroy: function() {
                    var select2 = this.opts.element.data("select2");
                    if (select2 !== undefined) {
                        select2.container.remove();
                        select2.dropdown.remove();
                        select2.opts.element.removeData("select2").unbind(".select2").show();
                    }
                },
                // abstract
                prepareOpts: function(opts) {
                    var element, select, idKey, ajaxUrl;
                    element = opts.element;
                    if (element.get(0).tagName.toLowerCase() === "select") {
                        this.select = select = opts.element;
                    }
                    if (select) {
                        // these options are not allowed when attached to a select because they are picked up off the element itself
                        $.each([ "id", "multiple", "ajax", "query", "createSearchChoice", "initSelection", "data", "tags" ], function() {
                            if (this in opts) {
                                throw new Error("Option '" + this + "' is not allowed for Select2 when attached to a <select> element.");
                            }
                        });
                    }
                    opts = $.extend({}, {
                        populateResults: function(container, results, query) {
                            var populate, data, result, children, id = this.opts.id, self = this;
                            populate = function(results, container, depth) {
                                var i, l, result, selectable, compound, node, label, innerContainer, formatted;
                                for (i = 0, l = results.length; i < l; i = i + 1) {
                                    result = results[i];
                                    selectable = id(result) !== undefined;
                                    compound = "children" in result && result.children.length > 0;
                                    node = $("<li></li>");
                                    node.addClass("select2-results-dept-" + depth);
                                    node.addClass("select2-result");
                                    node.addClass(selectable ? "select2-result-selectable" : "select2-result-unselectable");
                                    if (compound) {
                                        node.addClass("select2-result-with-children");
                                    }
                                    node.addClass(self.opts.formatResultCssClass(result));
                                    label = $("<div></div>");
                                    label.addClass("select2-result-label");
                                    formatted = opts.formatResult(result, label, query);
                                    if (formatted !== undefined) {
                                        label.html(escapeMarkup(formatted));
                                    }
                                    node.append(label);
                                    if (compound) {
                                        innerContainer = $("<ul></ul>");
                                        innerContainer.addClass("select2-result-sub");
                                        populate(result.children, innerContainer, depth + 1);
                                        node.append(innerContainer);
                                    }
                                    node.data("select2-data", result);
                                    container.append(node);
                                }
                            };
                            populate(results, container, 0);
                        }
                    }, $.fn.select2.defaults, opts);
                    if (typeof opts.id !== "function") {
                        idKey = opts.id;
                        opts.id = function(e) {
                            return e[idKey];
                        };
                    }
                    if (select) {
                        opts.query = this.bind(function(query) {
                            var data = {
                                results: [],
                                more: false
                            }, term = query.term, children, firstChild, process;
                            process = function(element, collection) {
                                var group;
                                if (element.is("option")) {
                                    if (query.matcher(term, element.text(), element)) {
                                        collection.push({
                                            id: element.attr("value"),
                                            text: element.text(),
                                            element: element.get(),
                                            css: element.attr("class")
                                        });
                                    }
                                } else if (element.is("optgroup")) {
                                    group = {
                                        text: element.attr("label"),
                                        children: [],
                                        element: element.get(),
                                        css: element.attr("class")
                                    };
                                    element.children().each2(function(i, elm) {
                                        process(elm, group.children);
                                    });
                                    if (group.children.length > 0) {
                                        collection.push(group);
                                    }
                                }
                            };
                            children = element.children();
                            // ignore the placeholder option if there is one
                            if (this.getPlaceholder() !== undefined && children.length > 0) {
                                firstChild = children[0];
                                if ($(firstChild).text() === "") {
                                    children = children.not(firstChild);
                                }
                            }
                            children.each2(function(i, elm) {
                                process(elm, data.results);
                            });
                            query.callback(data);
                        });
                        // this is needed because inside val() we construct choices from options and there id is hardcoded
                        opts.id = function(e) {
                            return e.id;
                        };
                        opts.formatResultCssClass = function(data) {
                            return data.css;
                        };
                    } else {
                        if (!("query" in opts)) {
                            if ("ajax" in opts) {
                                ajaxUrl = opts.element.data("ajax-url");
                                if (ajaxUrl && ajaxUrl.length > 0) {
                                    opts.ajax.url = ajaxUrl;
                                }
                                opts.query = ajax(opts.ajax);
                            } else if ("data" in opts) {
                                opts.query = local(opts.data);
                            } else if ("tags" in opts) {
                                opts.query = tags(opts.tags);
                                opts.createSearchChoice = function(term) {
                                    return {
                                        id: term,
                                        text: term
                                    };
                                };
                                opts.initSelection = function(element, callback) {
                                    var data = [];
                                    $(splitVal(element.val(), opts.separator)).each(function() {
                                        var id = this, text = this, tags = opts.tags;
                                        if ($.isFunction(tags)) tags = tags();
                                        $(tags).each(function() {
                                            if (equal(this.id, id)) {
                                                text = this.text;
                                                return false;
                                            }
                                        });
                                        data.push({
                                            id: id,
                                            text: text
                                        });
                                    });
                                    callback(data);
                                };
                            }
                        }
                    }
                    if (typeof opts.query !== "function") {
                        throw "query function not defined for Select2 " + opts.element.attr("id");
                    }
                    return opts;
                },
                /**
                 * Monitor the original element for changes and update select2 accordingly
                 */
                // abstract
                monitorSource: function() {
                    this.opts.element.bind("change.select2", this.bind(function(e) {
                        if (this.opts.element.data("select2-change-triggered") !== true) {
                            this.initSelection();
                        }
                    }));
                },
                /**
                 * Triggers the change event on the source element
                 */
                // abstract
                triggerChange: function(details) {
                    details = details || {};
                    details = $.extend({}, details, {
                        type: "change",
                        val: this.val()
                    });
                    // prevents recursive triggering
                    this.opts.element.data("select2-change-triggered", true);
                    this.opts.element.trigger(details);
                    this.opts.element.data("select2-change-triggered", false);
                    // some validation frameworks ignore the change event and listen instead to keyup, click for selects
                    // so here we trigger the click event manually
                    this.opts.element.click();
                },
                // abstract
                enable: function() {
                    if (this.enabled) return;
                    this.enabled = true;
                    this.container.removeClass("select2-container-disabled");
                },
                // abstract
                disable: function() {
                    if (!this.enabled) return;
                    this.close();
                    this.enabled = false;
                    this.container.addClass("select2-container-disabled");
                },
                // abstract
                opened: function() {
                    return this.container.hasClass("select2-dropdown-open");
                },
                // abstract
                positionDropdown: function() {
                    var offset = this.container.offset(), height = this.container.outerHeight(), width = this.container.outerWidth(), dropHeight = this.dropdown.outerHeight(), viewportBottom = $(window).scrollTop() + document.documentElement.clientHeight, dropTop = offset.top + height, enoughRoomBelow = dropTop + dropHeight <= viewportBottom, enoughRoomAbove = offset.top - dropHeight >= this.body().scrollTop(), aboveNow = this.dropdown.hasClass("select2-drop-above"), above, css;
                    // console.log("below/ droptop:", dropTop, "dropHeight", dropHeight, "sum", (dropTop+dropHeight)+" viewport bottom", viewportBottom, "enough?", enoughRoomBelow);
                    // console.log("above/ offset.top", offset.top, "dropHeight", dropHeight, "top", (offset.top-dropHeight), "scrollTop", this.body().scrollTop(), "enough?", enoughRoomAbove);
                    // always prefer the current above/below alignment, unless there is not enough room
                    if (aboveNow) {
                        above = true;
                        if (!enoughRoomAbove && enoughRoomBelow) above = false;
                    } else {
                        above = false;
                        if (!enoughRoomBelow && enoughRoomAbove) above = true;
                    }
                    if (above) {
                        dropTop = offset.top - dropHeight;
                        this.container.addClass("select2-drop-above");
                        this.dropdown.addClass("select2-drop-above");
                    } else {
                        this.container.removeClass("select2-drop-above");
                        this.dropdown.removeClass("select2-drop-above");
                    }
                    css = {
                        top: dropTop,
                        left: offset.left,
                        width: width
                    };
                    this.dropdown.css(css);
                },
                // abstract
                shouldOpen: function() {
                    var event;
                    if (this.opened()) return false;
                    event = jQuery.Event("open");
                    this.opts.element.trigger(event);
                    return !event.isDefaultPrevented();
                },
                // abstract
                clearDropdownAlignmentPreference: function() {
                    // clear the classes used to figure out the preference of where the dropdown should be opened
                    this.container.removeClass("select2-drop-above");
                    this.dropdown.removeClass("select2-drop-above");
                },
                /**
                 * Opens the dropdown
                 *
                 * @return {Boolean} whether or not dropdown was opened. This method will return false if, for example,
                 * the dropdown is already open, or if the 'open' event listener on the element called preventDefault().
                 */
                // abstract
                open: function() {
                    if (!this.shouldOpen()) return false;
                    window.setTimeout(this.bind(this.opening), 1);
                    return true;
                },
                /**
                 * Performs the opening of the dropdown
                 */
                // abstract
                opening: function() {
                    var cid = this.containerId, selector = "#" + cid, scroll = "scroll." + cid, resize = "resize." + cid;
                    this.container.parents().each(function() {
                        $(this).bind(scroll, function() {
                            var s2 = $(selector);
                            if (s2.length == 0) {
                                $(this).unbind(scroll);
                            }
                            s2.select2("close");
                        });
                    });
                    $(window).bind(resize, function() {
                        var s2 = $(selector);
                        if (s2.length == 0) {
                            $(window).unbind(resize);
                        }
                        s2.select2("close");
                    });
                    this.clearDropdownAlignmentPreference();
                    if (this.search.val() === " ") {
                        this.search.val("");
                    }
                    this.dropdown.css(evaluate(this.opts.dropdownCss));
                    this.dropdown.addClass("select2-drop-active");
                    this.container.addClass("select2-dropdown-open").addClass("select2-container-active");
                    this.updateResults(true);
                    if (this.dropdown[0] !== this.body().children().last()[0]) {
                        this.dropdown.detach().appendTo(this.body());
                    }
                    this.dropdown.show();
                    this.ensureHighlightVisible();
                    this.positionDropdown();
                    this.focusSearch();
                },
                // abstract
                close: function() {
                    if (!this.opened()) return;
                    var self = this;
                    this.container.parents().each(function() {
                        $(this).unbind("scroll." + self.containerId);
                    });
                    $(window).unbind("resize." + this.containerId);
                    this.clearDropdownAlignmentPreference();
                    this.dropdown.hide();
                    this.container.removeClass("select2-dropdown-open").removeClass("select2-container-active");
                    this.results.empty();
                    this.clearSearch();
                    this.opts.element.trigger(jQuery.Event("close"));
                },
                // abstract
                clearSearch: function() {},
                // abstract
                ensureHighlightVisible: function() {
                    var results = this.results, children, index, child, hb, rb, y, more;
                    index = this.highlight();
                    if (index < 0) return;
                    if (index == 0) {
                        // if the first element is highlighted scroll all the way to the top,
                        // that way any unselectable headers above it will also be scrolled
                        // into view
                        results.scrollTop(0);
                        return;
                    }
                    children = results.find(".select2-result-selectable");
                    child = $(children[index]);
                    hb = child.offset().top + child.outerHeight();
                    // if this is the last child lets also make sure select2-more-results is visible
                    if (index === children.length - 1) {
                        more = results.find("li.select2-more-results");
                        if (more.length > 0) {
                            hb = more.offset().top + more.outerHeight();
                        }
                    }
                    rb = results.offset().top + results.outerHeight();
                    if (hb > rb) {
                        results.scrollTop(results.scrollTop() + (hb - rb));
                    }
                    y = child.offset().top - results.offset().top;
                    // make sure the top of the element is visible
                    if (y < 0) {
                        results.scrollTop(results.scrollTop() + y);
                    }
                },
                // abstract
                moveHighlight: function(delta) {
                    var choices = this.results.find(".select2-result-selectable"), index = this.highlight();
                    while (index > -1 && index < choices.length) {
                        index += delta;
                        var choice = $(choices[index]);
                        if (choice.hasClass("select2-result-selectable") && !choice.hasClass("select2-disabled")) {
                            this.highlight(index);
                            break;
                        }
                    }
                },
                // abstract
                highlight: function(index) {
                    var choices = this.results.find(".select2-result-selectable").not(".select2-disabled");
                    if (arguments.length === 0) {
                        return indexOf(choices.filter(".select2-highlighted")[0], choices.get());
                    }
                    if (index >= choices.length) index = choices.length - 1;
                    if (index < 0) index = 0;
                    choices.removeClass("select2-highlighted");
                    $(choices[index]).addClass("select2-highlighted");
                    this.ensureHighlightVisible();
                },
                // abstract
                countSelectableResults: function() {
                    return this.results.find(".select2-result-selectable").not(".select2-disabled").length;
                },
                // abstract
                highlightUnderEvent: function(event) {
                    var el = $(event.target).closest(".select2-result-selectable");
                    if (el.length > 0 && !el.is(".select2-highlighted")) {
                        var choices = this.results.find(".select2-result-selectable");
                        this.highlight(choices.index(el));
                    } else if (el.length == 0) {
                        // if we are over an unselectable item remove al highlights
                        this.results.find(".select2-highlighted").removeClass("select2-highlighted");
                    }
                },
                // abstract
                loadMoreIfNeeded: function() {
                    var results = this.results, more = results.find("li.select2-more-results"), below, // pixels the element is below the scroll fold, below==0 is when the element is starting to be visible
                    offset = -1, // index of first element without data
                    page = this.resultsPage + 1, self = this, term = this.search.val(), context = this.context;
                    if (more.length === 0) return;
                    below = more.offset().top - results.offset().top - results.height();
                    if (below <= 0) {
                        more.addClass("select2-active");
                        this.opts.query({
                            term: term,
                            page: page,
                            context: context,
                            matcher: this.opts.matcher,
                            callback: this.bind(function(data) {
                                self.opts.populateResults.call(this, results, data.results, {
                                    term: term,
                                    page: page,
                                    context: context
                                });
                                if (data.more === true) {
                                    more.detach().appendTo(results).text(self.opts.formatLoadMore(page + 1));
                                    window.setTimeout(function() {
                                        self.loadMoreIfNeeded();
                                    }, 10);
                                } else {
                                    more.remove();
                                }
                                self.positionDropdown();
                                self.resultsPage = page;
                            })
                        });
                    }
                },
                /**
                 * Default tokenizer function which does nothing
                 */
                tokenize: function() {},
                /**
                 * @param initial whether or not this is the call to this method right after the dropdown has been opened
                 */
                // abstract
                updateResults: function(initial) {
                    var search = this.search, results = this.results, opts = this.opts, data, self = this, input;
                    // if the search is currently hidden we do not alter the results
                    if (initial !== true && (this.showSearchInput === false || !this.opened())) {
                        return;
                    }
                    search.addClass("select2-active");
                    function postRender() {
                        results.scrollTop(0);
                        search.removeClass("select2-active");
                        self.positionDropdown();
                    }
                    function render(html) {
                        results.html(escapeMarkup(html));
                        postRender();
                    }
                    if (opts.maximumSelectionSize >= 1) {
                        data = this.data();
                        if ($.isArray(data) && data.length >= opts.maximumSelectionSize && checkFormatter(opts.formatSelectionTooBig, "formatSelectionTooBig")) {
                            render("<li class='select2-selection-limit'>" + opts.formatSelectionTooBig(opts.maximumSelectionSize) + "</li>");
                            return;
                        }
                    }
                    if (search.val().length < opts.minimumInputLength && checkFormatter(opts.formatInputTooShort, "formatInputTooShort")) {
                        render("<li class='select2-no-results'>" + opts.formatInputTooShort(search.val(), opts.minimumInputLength) + "</li>");
                        return;
                    } else {
                        render("<li class='select2-searching'>" + opts.formatSearching() + "</li>");
                    }
                    // give the tokenizer a chance to pre-process the input
                    input = this.tokenize();
                    if (input != undefined && input != null) {
                        search.val(input);
                    }
                    this.resultsPage = 1;
                    opts.query({
                        term: search.val(),
                        page: this.resultsPage,
                        context: null,
                        matcher: opts.matcher,
                        callback: this.bind(function(data) {
                            var def;
                            // default choice
                            // save context, if any
                            this.context = data.context === undefined ? null : data.context;
                            // create a default choice and prepend it to the list
                            if (this.opts.createSearchChoice && search.val() !== "") {
                                def = this.opts.createSearchChoice.call(null, search.val(), data.results);
                                if (def !== undefined && def !== null && self.id(def) !== undefined && self.id(def) !== null) {
                                    if ($(data.results).filter(function() {
                                        return equal(self.id(this), self.id(def));
                                    }).length === 0) {
                                        data.results.unshift(def);
                                    }
                                }
                            }
                            if (data.results.length === 0 && checkFormatter(opts.formatNoMatches, "formatNoMatches")) {
                                render("<li class='select2-no-results'>" + opts.formatNoMatches(search.val()) + "</li>");
                                return;
                            }
                            results.empty();
                            self.opts.populateResults.call(this, results, data.results, {
                                term: search.val(),
                                page: this.resultsPage,
                                context: null
                            });
                            if (data.more === true && checkFormatter(opts.formatLoadMore, "formatLoadMore")) {
                                results.append("<li class='select2-more-results'>" + escapeMarkup(opts.formatLoadMore(this.resultsPage)) + "</li>");
                                window.setTimeout(function() {
                                    self.loadMoreIfNeeded();
                                }, 10);
                            }
                            this.postprocessResults(data, initial);
                            postRender();
                        })
                    });
                },
                // abstract
                cancel: function() {
                    this.close();
                },
                // abstract
                blur: function() {
                    this.close();
                    this.container.removeClass("select2-container-active");
                    this.dropdown.removeClass("select2-drop-active");
                    // synonymous to .is(':focus'), which is available in jquery >= 1.6
                    if (this.search[0] === document.activeElement) {
                        this.search.blur();
                    }
                    this.clearSearch();
                    this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                },
                // abstract
                focusSearch: function() {
                    /* we do this in a timeout so that current event processing can complete before this code is executed.
             this makes sure the search field is focussed even if the current event would blur it */
                    window.setTimeout(this.bind(function() {
                        this.search.focus();
                        // reset the value so IE places the cursor at the end of the input box
                        this.search.val(this.search.val());
                    }), 10);
                },
                // abstract
                selectHighlighted: function() {
                    var index = this.highlight(), highlighted = this.results.find(".select2-highlighted").not(".select2-disabled"), data = highlighted.closest(".select2-result-selectable").data("select2-data");
                    if (data) {
                        highlighted.addClass("select2-disabled");
                        this.highlight(index);
                        this.onSelect(data);
                    }
                },
                // abstract
                getPlaceholder: function() {
                    return this.opts.element.attr("placeholder") || this.opts.element.attr("data-placeholder") || // jquery 1.4 compat
                    this.opts.element.data("placeholder") || this.opts.placeholder;
                },
                /**
                 * Get the desired width for the container element.  This is
                 * derived first from option `width` passed to select2, then
                 * the inline 'style' on the original element, and finally
                 * falls back to the jQuery calculated element width.
                 */
                // abstract
                initContainerWidth: function() {
                    function resolveContainerWidth() {
                        var style, attrs, matches, i, l;
                        if (this.opts.width === "off") {
                            return null;
                        } else if (this.opts.width === "element") {
                            return this.opts.element.outerWidth() === 0 ? "auto" : this.opts.element.outerWidth() + "px";
                        } else if (this.opts.width === "copy" || this.opts.width === "resolve") {
                            // check if there is inline style on the element that contains width
                            style = this.opts.element.attr("style");
                            if (style !== undefined) {
                                attrs = style.split(";");
                                for (i = 0, l = attrs.length; i < l; i = i + 1) {
                                    matches = attrs[i].replace(/\s/g, "").match(/width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/);
                                    if (matches !== null && matches.length >= 1) return matches[1];
                                }
                            }
                            if (this.opts.width === "resolve") {
                                // next check if css('width') can resolve a width that is percent based, this is sometimes possible
                                // when attached to input type=hidden or elements hidden via css
                                style = this.opts.element.css("width");
                                if (style.indexOf("%") > 0) return style;
                                // finally, fallback on the calculated width of the element
                                return this.opts.element.outerWidth() === 0 ? "auto" : this.opts.element.outerWidth() + "px";
                            }
                            return null;
                        } else if ($.isFunction(this.opts.width)) {
                            return this.opts.width();
                        } else {
                            return this.opts.width;
                        }
                    }
                    var width = resolveContainerWidth.call(this);
                    if (width !== null) {
                        this.container.attr("style", "width: " + width);
                    }
                }
            });
            SingleSelect2 = clazz(AbstractSelect2, {
                // single
                createContainer: function() {
                    var container = $("<div></div>", {
                        "class": "select2-container"
                    }).html([ "    <a href='javascript:void(0)' class='select2-choice'>", "   <span></span><abbr class='select2-search-choice-close' style='display:none;'></abbr>", "   <div><b></b></div>", "</a>", "    <div class='select2-drop select2-offscreen'>", "   <div class='select2-search'>", "       <input type='text' autocomplete='off' class='select2-input'/>", "   </div>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
                    return container;
                },
                // single
                opening: function() {
                    this.search.show();
                    this.parent.opening.apply(this, arguments);
                    this.dropdown.removeClass("select2-offscreen");
                },
                // single
                close: function() {
                    if (!this.opened()) return;
                    this.parent.close.apply(this, arguments);
                    this.dropdown.removeAttr("style").addClass("select2-offscreen").insertAfter(this.selection).show();
                },
                // single
                focus: function() {
                    this.close();
                    this.selection.focus();
                },
                // single
                isFocused: function() {
                    return this.selection[0] === document.activeElement;
                },
                // single
                cancel: function() {
                    this.parent.cancel.apply(this, arguments);
                    this.selection.focus();
                },
                // single
                initContainer: function() {
                    var selection, container = this.container, dropdown = this.dropdown, clickingInside = false;
                    this.selection = selection = container.find(".select2-choice");
                    this.search.bind("keydown", this.bind(function(e) {
                        if (!this.enabled) return;
                        if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                            // prevent the page from scrolling
                            killEvent(e);
                            return;
                        }
                        if (this.opened()) {
                            switch (e.which) {
                              case KEY.UP:
                              case KEY.DOWN:
                                this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                                killEvent(e);
                                return;

                              case KEY.TAB:
                              case KEY.ENTER:
                                this.selectHighlighted();
                                killEvent(e);
                                return;

                              case KEY.ESC:
                                this.cancel(e);
                                killEvent(e);
                                return;
                            }
                        } else {
                            if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                                return;
                            }
                            if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                                return;
                            }
                            this.open();
                            if (e.which === KEY.ENTER) {
                                // do not propagate the event otherwise we open, and propagate enter which closes
                                return;
                            }
                        }
                    }));
                    this.search.bind("focus", this.bind(function() {
                        this.selection.attr("tabIndex", "-1");
                    }));
                    this.search.bind("blur", this.bind(function() {
                        if (!this.opened()) this.container.removeClass("select2-container-active");
                        window.setTimeout(this.bind(function() {
                            this.selection.attr("tabIndex", this.opts.element.attr("tabIndex"));
                        }), 10);
                    }));
                    selection.bind("mousedown", this.bind(function(e) {
                        clickingInside = true;
                        if (this.opened()) {
                            this.close();
                            this.selection.focus();
                        } else if (this.enabled) {
                            this.open();
                        }
                        clickingInside = false;
                    }));
                    dropdown.bind("mousedown", this.bind(function() {
                        this.search.focus();
                    }));
                    selection.bind("focus", this.bind(function() {
                        this.container.addClass("select2-container-active");
                        // hide the search so the tab key does not focus on it
                        this.search.attr("tabIndex", "-1");
                    }));
                    selection.bind("blur", this.bind(function() {
                        if (!this.opened()) {
                            this.container.removeClass("select2-container-active");
                        }
                        window.setTimeout(this.bind(function() {
                            this.search.attr("tabIndex", this.opts.element.attr("tabIndex"));
                        }), 10);
                    }));
                    selection.bind("keydown", this.bind(function(e) {
                        if (!this.enabled) return;
                        if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                            // prevent the page from scrolling
                            killEvent(e);
                            return;
                        }
                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                            return;
                        }
                        if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                            return;
                        }
                        if (e.which == KEY.DELETE) {
                            if (this.opts.allowClear) {
                                this.clear();
                            }
                            return;
                        }
                        this.open();
                        if (e.which === KEY.ENTER) {
                            // do not propagate the event otherwise we open, and propagate enter which closes
                            killEvent(e);
                            return;
                        }
                        // do not set the search input value for non-alpha-numeric keys
                        // otherwise pressing down results in a '(' being set in the search field
                        if (e.which < 48) {
                            // '0' == 48
                            killEvent(e);
                            return;
                        }
                        var keyWritten = String.fromCharCode(e.which).toLowerCase();
                        if (e.shiftKey) {
                            keyWritten = keyWritten.toUpperCase();
                        }
                        // focus the field before calling val so the cursor ends up after the value instead of before
                        this.search.focus();
                        this.search.val(keyWritten);
                        // prevent event propagation so it doesnt replay on the now focussed search field and result in double key entry
                        killEvent(e);
                    }));
                    selection.delegate("abbr", "mousedown", this.bind(function(e) {
                        if (!this.enabled) return;
                        this.clear();
                        killEvent(e);
                        this.close();
                        this.triggerChange();
                        this.selection.focus();
                    }));
                    this.setPlaceholder();
                    this.search.bind("focus", this.bind(function() {
                        this.container.addClass("select2-container-active");
                    }));
                },
                // single
                clear: function() {
                    this.opts.element.val("");
                    this.selection.find("span").empty();
                    this.selection.removeData("select2-data");
                    this.setPlaceholder();
                },
                /**
                 * Sets selection based on source element's value
                 */
                // single
                initSelection: function() {
                    var selected;
                    if (this.opts.element.val() === "") {
                        this.close();
                        this.setPlaceholder();
                    } else {
                        var self = this;
                        this.opts.initSelection.call(null, this.opts.element, function(selected) {
                            if (selected !== undefined && selected !== null) {
                                self.updateSelection(selected);
                                self.close();
                                self.setPlaceholder();
                            }
                        });
                    }
                },
                // single
                prepareOpts: function() {
                    var opts = this.parent.prepareOpts.apply(this, arguments);
                    if (opts.element.get(0).tagName.toLowerCase() === "select") {
                        // install the selection initializer
                        opts.initSelection = function(element, callback) {
                            var selected = element.find(":selected");
                            // a single select box always has a value, no need to null check 'selected'
                            if ($.isFunction(callback)) callback({
                                id: selected.attr("value"),
                                text: selected.text()
                            });
                        };
                    }
                    return opts;
                },
                // single
                setPlaceholder: function() {
                    var placeholder = this.getPlaceholder();
                    if (this.opts.element.val() === "" && placeholder !== undefined) {
                        // check for a first blank option if attached to a select
                        if (this.select && this.select.find("option:first").text() !== "") return;
                        this.selection.find("span").html(escapeMarkup(placeholder));
                        this.selection.addClass("select2-default");
                        this.selection.find("abbr").hide();
                    }
                },
                // single
                postprocessResults: function(data, initial) {
                    var selected = 0, self = this, showSearchInput = true;
                    // find the selected element in the result list
                    this.results.find(".select2-result-selectable").each2(function(i, elm) {
                        if (equal(self.id(elm.data("select2-data")), self.opts.element.val())) {
                            selected = i;
                            return false;
                        }
                    });
                    // and highlight it
                    this.highlight(selected);
                    // hide the search box if this is the first we got the results and there are a few of them
                    if (initial === true) {
                        showSearchInput = this.showSearchInput = countResults(data.results) >= this.opts.minimumResultsForSearch;
                        this.dropdown.find(".select2-search")[showSearchInput ? "removeClass" : "addClass"]("select2-search-hidden");
                        //add "select2-with-searchbox" to the container if search box is shown
                        $(this.dropdown, this.container)[showSearchInput ? "addClass" : "removeClass"]("select2-with-searchbox");
                    }
                },
                // single
                onSelect: function(data) {
                    var old = this.opts.element.val();
                    this.opts.element.val(this.id(data));
                    this.updateSelection(data);
                    this.close();
                    this.selection.focus();
                    if (!equal(old, this.id(data))) {
                        this.triggerChange();
                    }
                },
                // single
                updateSelection: function(data) {
                    var container = this.selection.find("span"), formatted;
                    this.selection.data("select2-data", data);
                    container.empty();
                    formatted = this.opts.formatSelection(data, container);
                    if (formatted !== undefined) {
                        container.append(escapeMarkup(formatted));
                    }
                    this.selection.removeClass("select2-default");
                    if (this.opts.allowClear && this.getPlaceholder() !== undefined) {
                        this.selection.find("abbr").show();
                    }
                },
                // single
                val: function() {
                    var val, data = null, self = this;
                    if (arguments.length === 0) {
                        return this.opts.element.val();
                    }
                    val = arguments[0];
                    if (this.select) {
                        this.select.val(val).find(":selected").each2(function(i, elm) {
                            data = {
                                id: elm.attr("value"),
                                text: elm.text()
                            };
                            return false;
                        });
                        this.updateSelection(data);
                        this.setPlaceholder();
                    } else {
                        if (this.opts.initSelection === undefined) {
                            throw new Error("cannot call val() if initSelection() is not defined");
                        }
                        // val is an id. !val is true for [undefined,null,'']
                        if (!val) {
                            this.clear();
                            return;
                        }
                        this.opts.initSelection(this.opts.element, function(data) {
                            self.opts.element.val(!data ? "" : self.id(data));
                            self.updateSelection(data);
                            self.setPlaceholder();
                        });
                    }
                },
                // single
                clearSearch: function() {
                    this.search.val("");
                },
                // single
                data: function(value) {
                    var data;
                    if (arguments.length === 0) {
                        data = this.selection.data("select2-data");
                        if (data == undefined) data = null;
                        return data;
                    } else {
                        if (!value || value === "") {
                            this.clear();
                        } else {
                            this.opts.element.val(!value ? "" : this.id(value));
                            this.updateSelection(value);
                        }
                    }
                }
            });
            MultiSelect2 = clazz(AbstractSelect2, {
                // multi
                createContainer: function() {
                    var container = $("<div></div>", {
                        "class": "select2-container select2-container-multi"
                    }).html([ "    <ul class='select2-choices'>", //"<li class='select2-search-choice'><span>California</span><a href="javascript:void(0)" class="select2-search-choice-close"></a></li>" ,
                    "  <li class='select2-search-field'>", "    <input type='text' autocomplete='off' class='select2-input'>", "  </li>", "</ul>", "<div class='select2-drop select2-drop-multi' style='display:none;'>", "   <ul class='select2-results'>", "   </ul>", "</div>" ].join(""));
                    return container;
                },
                // multi
                prepareOpts: function() {
                    var opts = this.parent.prepareOpts.apply(this, arguments);
                    // TODO validate placeholder is a string if specified
                    if (opts.element.get(0).tagName.toLowerCase() === "select") {
                        // install sthe selection initializer
                        opts.initSelection = function(element, callback) {
                            var data = [];
                            element.find(":selected").each2(function(i, elm) {
                                data.push({
                                    id: elm.attr("value"),
                                    text: elm.text()
                                });
                            });
                            if ($.isFunction(callback)) callback(data);
                        };
                    }
                    return opts;
                },
                // multi
                initContainer: function() {
                    var selector = ".select2-choices", selection;
                    this.searchContainer = this.container.find(".select2-search-field");
                    this.selection = selection = this.container.find(selector);
                    this.search.bind("keydown", this.bind(function(e) {
                        if (!this.enabled) return;
                        if (e.which === KEY.BACKSPACE && this.search.val() === "") {
                            this.close();
                            var choices, selected = selection.find(".select2-search-choice-focus");
                            if (selected.length > 0) {
                                this.unselect(selected.first());
                                this.search.width(10);
                                killEvent(e);
                                return;
                            }
                            choices = selection.find(".select2-search-choice");
                            if (choices.length > 0) {
                                choices.last().addClass("select2-search-choice-focus");
                            }
                        } else {
                            selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                        }
                        if (this.opened()) {
                            switch (e.which) {
                              case KEY.UP:
                              case KEY.DOWN:
                                this.moveHighlight(e.which === KEY.UP ? -1 : 1);
                                killEvent(e);
                                return;

                              case KEY.ENTER:
                              case KEY.TAB:
                                this.selectHighlighted();
                                killEvent(e);
                                return;

                              case KEY.ESC:
                                this.cancel(e);
                                killEvent(e);
                                return;
                            }
                        }
                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.BACKSPACE || e.which === KEY.ESC) {
                            return;
                        }
                        if (this.opts.openOnEnter === false && e.which === KEY.ENTER) {
                            return;
                        }
                        this.open();
                        if (e.which === KEY.PAGE_UP || e.which === KEY.PAGE_DOWN) {
                            // prevent the page from scrolling
                            killEvent(e);
                        }
                    }));
                    this.search.bind("keyup", this.bind(this.resizeSearch));
                    this.search.bind("blur", this.bind(function() {
                        this.container.removeClass("select2-container-active");
                    }));
                    this.container.delegate(selector, "mousedown", this.bind(function(e) {
                        if (!this.enabled) return;
                        this.clearPlaceholder();
                        this.open();
                        this.focusSearch();
                        e.preventDefault();
                    }));
                    this.container.delegate(selector, "focus", this.bind(function() {
                        if (!this.enabled) return;
                        this.container.addClass("select2-container-active");
                        this.dropdown.addClass("select2-drop-active");
                        this.clearPlaceholder();
                    }));
                    // set the placeholder if necessary
                    this.clearSearch();
                },
                // multi
                enable: function() {
                    if (this.enabled) return;
                    this.parent.enable.apply(this, arguments);
                    this.search.removeAttr("disabled");
                },
                // multi
                disable: function() {
                    if (!this.enabled) return;
                    this.parent.disable.apply(this, arguments);
                    this.search.attr("disabled", true);
                },
                // multi
                initSelection: function() {
                    var data;
                    if (this.opts.element.val() === "") {
                        this.updateSelection([]);
                        this.close();
                        // set the placeholder if necessary
                        this.clearSearch();
                    }
                    if (this.select || this.opts.element.val() !== "") {
                        var self = this;
                        this.opts.initSelection.call(null, this.opts.element, function(data) {
                            if (data !== undefined && data !== null) {
                                self.updateSelection(data);
                                self.close();
                                // set the placeholder if necessary
                                self.clearSearch();
                            }
                        });
                    }
                },
                // multi
                clearSearch: function() {
                    var placeholder = this.getPlaceholder();
                    if (placeholder !== undefined && this.getVal().length === 0 && this.search.hasClass("select2-focused") === false) {
                        this.search.val(placeholder).addClass("select2-default");
                        // stretch the search box to full width of the container so as much of the placeholder is visible as possible
                        this.resizeSearch();
                    } else {
                        // we set this to " " instead of "" and later clear it on focus() because there is a firefox bug
                        // that does not properly render the caret when the field starts out blank
                        this.search.val(" ").width(10);
                    }
                },
                // multi
                clearPlaceholder: function() {
                    if (this.search.hasClass("select2-default")) {
                        this.search.val("").removeClass("select2-default");
                    } else {
                        // work around for the space character we set to avoid firefox caret bug
                        if (this.search.val() === " ") this.search.val("");
                    }
                },
                // multi
                opening: function() {
                    this.parent.opening.apply(this, arguments);
                    this.clearPlaceholder();
                    this.resizeSearch();
                    this.focusSearch();
                },
                // multi
                close: function() {
                    if (!this.opened()) return;
                    this.parent.close.apply(this, arguments);
                },
                // multi
                focus: function() {
                    this.close();
                    this.search.focus();
                },
                // multi
                isFocused: function() {
                    return this.search.hasClass("select2-focused");
                },
                // multi
                updateSelection: function(data) {
                    var ids = [], filtered = [], self = this;
                    // filter out duplicates
                    $(data).each(function() {
                        if (indexOf(self.id(this), ids) < 0) {
                            ids.push(self.id(this));
                            filtered.push(this);
                        }
                    });
                    data = filtered;
                    this.selection.find(".select2-search-choice").remove();
                    $(data).each(function() {
                        self.addSelectedChoice(this);
                    });
                    self.postprocessResults();
                },
                tokenize: function() {
                    var input = this.search.val();
                    input = this.opts.tokenizer(input, this.data(), this.bind(this.onSelect), this.opts);
                    if (input != null && input != undefined) {
                        this.search.val(input);
                        if (input.length > 0) {
                            this.open();
                        }
                    }
                },
                // multi
                onSelect: function(data) {
                    this.addSelectedChoice(data);
                    if (this.select) {
                        this.postprocessResults();
                    }
                    if (this.opts.closeOnSelect) {
                        this.close();
                        this.search.width(10);
                    } else {
                        if (this.countSelectableResults() > 0) {
                            this.search.width(10);
                            this.resizeSearch();
                            this.positionDropdown();
                        } else {
                            // if nothing left to select close
                            this.close();
                        }
                    }
                    // since its not possible to select an element that has already been
                    // added we do not need to check if this is a new element before firing change
                    this.triggerChange({
                        added: data
                    });
                    this.focusSearch();
                },
                // multi
                cancel: function() {
                    this.close();
                    this.focusSearch();
                },
                // multi
                addSelectedChoice: function(data) {
                    var choice = $("<li class='select2-search-choice'>" + "    <div></div>" + "    <a href='javascript:void(0)' class='select2-search-choice-close' tabindex='-1'></a>" + "</li>"), id = this.id(data), val = this.getVal(), formatted;
                    formatted = this.opts.formatSelection(data, choice);
                    choice.find("div").replaceWith("<div>" + escapeMarkup(formatted) + "</div>");
                    choice.find(".select2-search-choice-close").bind("mousedown", killEvent).bind("click dblclick", this.bind(function(e) {
                        if (!this.enabled) return;
                        $(e.target).closest(".select2-search-choice").fadeOut("fast").animate({
                            width: "hide"
                        }, 50, this.bind(function() {
                            this.unselect($(e.target));
                            this.selection.find(".select2-search-choice-focus").removeClass("select2-search-choice-focus");
                            this.close();
                            this.focusSearch();
                        })).dequeue();
                        killEvent(e);
                    })).bind("focus", this.bind(function() {
                        if (!this.enabled) return;
                        this.container.addClass("select2-container-active");
                        this.dropdown.addClass("select2-drop-active");
                    }));
                    choice.data("select2-data", data);
                    choice.insertBefore(this.searchContainer);
                    val.push(id);
                    this.setVal(val);
                },
                // multi
                unselect: function(selected) {
                    var val = this.getVal(), data, index;
                    selected = selected.closest(".select2-search-choice");
                    if (selected.length === 0) {
                        throw "Invalid argument: " + selected + ". Must be .select2-search-choice";
                    }
                    data = selected.data("select2-data");
                    index = indexOf(this.id(data), val);
                    if (index >= 0) {
                        val.splice(index, 1);
                        this.setVal(val);
                        if (this.select) this.postprocessResults();
                    }
                    selected.remove();
                    this.triggerChange({
                        removed: data
                    });
                },
                // multi
                postprocessResults: function() {
                    var val = this.getVal(), choices = this.results.find(".select2-result-selectable"), compound = this.results.find(".select2-result-with-children"), self = this;
                    choices.each2(function(i, choice) {
                        var id = self.id(choice.data("select2-data"));
                        if (indexOf(id, val) >= 0) {
                            choice.addClass("select2-disabled").removeClass("select2-result-selectable");
                        } else {
                            choice.removeClass("select2-disabled").addClass("select2-result-selectable");
                        }
                    });
                    compound.each2(function(i, e) {
                        if (e.find(".select2-result-selectable").length == 0) {
                            e.addClass("select2-disabled");
                        } else {
                            e.removeClass("select2-disabled");
                        }
                    });
                    choices.each2(function(i, choice) {
                        if (!choice.hasClass("select2-disabled") && choice.hasClass("select2-result-selectable")) {
                            self.highlight(0);
                            return false;
                        }
                    });
                },
                // multi
                resizeSearch: function() {
                    var minimumWidth, left, maxWidth, containerLeft, searchWidth, sideBorderPadding = getSideBorderPadding(this.search);
                    minimumWidth = measureTextWidth(this.search) + 10;
                    left = this.search.offset().left;
                    maxWidth = this.selection.width();
                    containerLeft = this.selection.offset().left;
                    searchWidth = maxWidth - (left - containerLeft) - sideBorderPadding;
                    if (searchWidth < minimumWidth) {
                        searchWidth = maxWidth - sideBorderPadding;
                    }
                    if (searchWidth < 40) {
                        searchWidth = maxWidth - sideBorderPadding;
                    }
                    this.search.width(searchWidth);
                },
                // multi
                getVal: function() {
                    var val;
                    if (this.select) {
                        val = this.select.val();
                        return val === null ? [] : val;
                    } else {
                        val = this.opts.element.val();
                        return splitVal(val, this.opts.separator);
                    }
                },
                // multi
                setVal: function(val) {
                    var unique;
                    if (this.select) {
                        this.select.val(val);
                    } else {
                        unique = [];
                        // filter out duplicates
                        $(val).each(function() {
                            if (indexOf(this, unique) < 0) unique.push(this);
                        });
                        this.opts.element.val(unique.length === 0 ? "" : unique.join(this.opts.separator));
                    }
                },
                // multi
                val: function() {
                    var val, data = [], self = this;
                    if (arguments.length === 0) {
                        return this.getVal();
                    }
                    val = arguments[0];
                    if (!val) {
                        this.opts.element.val("");
                        this.updateSelection([]);
                        this.clearSearch();
                        return;
                    }
                    // val is a list of ids
                    this.setVal(val);
                    if (this.select) {
                        this.select.find(":selected").each(function() {
                            data.push({
                                id: $(this).attr("value"),
                                text: $(this).text()
                            });
                        });
                        this.updateSelection(data);
                    } else {
                        if (this.opts.initSelection === undefined) {
                            throw new Error("val() cannot be called if initSelection() is not defined");
                        }
                        this.opts.initSelection(this.opts.element, function(data) {
                            var ids = $(data).map(self.id);
                            self.setVal(ids);
                            self.updateSelection(data);
                            self.clearSearch();
                        });
                    }
                    this.clearSearch();
                },
                // multi
                onSortStart: function() {
                    if (this.select) {
                        throw new Error("Sorting of elements is not supported when attached to <select>. Attach to <input type='hidden'/> instead.");
                    }
                    // collapse search field into 0 width so its container can be collapsed as well
                    this.search.width(0);
                    // hide the container
                    this.searchContainer.hide();
                },
                // multi
                onSortEnd: function() {
                    var val = [], self = this;
                    // show search and move it to the end of the list
                    this.searchContainer.show();
                    // make sure the search container is the last item in the list
                    this.searchContainer.appendTo(this.searchContainer.parent());
                    // since we collapsed the width in dragStarted, we resize it here
                    this.resizeSearch();
                    // update selection
                    this.selection.find(".select2-search-choice").each(function() {
                        val.push(self.opts.id($(this).data("select2-data")));
                    });
                    this.setVal(val);
                    this.triggerChange();
                },
                // multi
                data: function(values) {
                    var self = this, ids;
                    if (arguments.length === 0) {
                        return this.selection.find(".select2-search-choice").map(function() {
                            return $(this).data("select2-data");
                        }).get();
                    } else {
                        if (!values) {
                            values = [];
                        }
                        ids = $.map(values, function(e) {
                            return self.opts.id(e);
                        });
                        this.setVal(ids);
                        this.updateSelection(values);
                        this.clearSearch();
                    }
                }
            });
            $.fn.select2 = function() {
                var args = Array.prototype.slice.call(arguments, 0), opts, select2, value, multiple, allowedMethods = [ "val", "destroy", "opened", "open", "close", "focus", "isFocused", "container", "onSortStart", "onSortEnd", "enable", "disable", "positionDropdown", "data" ];
                this.each(function() {
                    if (args.length === 0 || typeof args[0] === "object") {
                        opts = args.length === 0 ? {} : $.extend({}, args[0]);
                        opts.element = $(this);
                        if (opts.element.get(0).tagName.toLowerCase() === "select") {
                            multiple = opts.element.attr("multiple");
                        } else {
                            multiple = opts.multiple || false;
                            if ("tags" in opts) {
                                opts.multiple = multiple = true;
                            }
                        }
                        select2 = multiple ? new MultiSelect2() : new SingleSelect2();
                        select2.init(opts);
                    } else if (typeof args[0] === "string") {
                        if (indexOf(args[0], allowedMethods) < 0) {
                            throw "Unknown method: " + args[0];
                        }
                        value = undefined;
                        select2 = $(this).data("select2");
                        if (select2 === undefined) return;
                        if (args[0] === "container") {
                            value = select2.container;
                        } else {
                            value = select2[args[0]].apply(select2, args.slice(1));
                        }
                        if (value !== undefined) {
                            return false;
                        }
                    } else {
                        throw "Invalid arguments to select2 plugin: " + args;
                    }
                });
                return value === undefined ? this : value;
            };
            // plugin defaults, accessible to users
            $.fn.select2.defaults = {
                width: "copy",
                closeOnSelect: true,
                openOnEnter: true,
                containerCss: {},
                dropdownCss: {},
                containerCssClass: "",
                dropdownCssClass: "",
                formatResult: function(result, container, query) {
                    var markup = [];
                    markMatch(result.text, query.term, markup);
                    return markup.join("");
                },
                formatSelection: function(data, container) {
                    return data.text;
                },
                formatResultCssClass: function(data) {
                    return undefined;
                },
                formatNoMatches: function() {
                    return "No matches found";
                },
                formatInputTooShort: function(input, min) {
                    return "Please enter " + (min - input.length) + " more characters";
                },
                formatSelectionTooBig: function(limit) {
                    return "You can only select " + limit + " items";
                },
                formatLoadMore: function(pageNumber) {
                    return "Loading more results...";
                },
                formatSearching: function() {
                    return "Searching...";
                },
                minimumResultsForSearch: 0,
                minimumInputLength: 0,
                maximumSelectionSize: 0,
                id: function(e) {
                    return e.id;
                },
                matcher: function(term, text) {
                    return text.toUpperCase().indexOf(term.toUpperCase()) >= 0;
                },
                separator: ",",
                tokenSeparators: [],
                tokenizer: defaultTokenizer
            };
            // exports
            window.Select2 = {
                query: {
                    ajax: ajax,
                    local: local,
                    tags: tags
                },
                util: {
                    debounce: debounce,
                    markMatch: markMatch
                },
                "class": {
                    "abstract": AbstractSelect2,
                    single: SingleSelect2,
                    multi: MultiSelect2
                }
            };
        })(jQuery);
    };
});
